[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileViewSet",
        "importPath": "alistpros_profiles.views",
        "description": "alistpros_profiles.views",
        "isExtraImport": true,
        "detail": "alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "importPath": "alistpros_profiles.views",
        "description": "alistpros_profiles.views",
        "isExtraImport": true,
        "detail": "alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileViewSet",
        "importPath": "alistpros_profiles.views",
        "description": "alistpros_profiles.views",
        "isExtraImport": true,
        "detail": "alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "importPath": "alistpros_profiles.views",
        "description": "alistpros_profiles.views",
        "isExtraImport": true,
        "detail": "alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "importPath": "scheduling.views",
        "description": "scheduling.views",
        "isExtraImport": true,
        "detail": "scheduling.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "importPath": "scheduling.views",
        "description": "scheduling.views",
        "isExtraImport": true,
        "detail": "scheduling.views",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "importPath": "messaging.views",
        "description": "messaging.views",
        "isExtraImport": true,
        "detail": "messaging.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationSettingViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationSettingViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "importPath": "contractors.models",
        "description": "contractors.models",
        "isExtraImport": true,
        "detail": "contractors.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentNote",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentNote",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "importPath": "scheduling.models",
        "description": "scheduling.models",
        "isExtraImport": true,
        "detail": "scheduling.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccount",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccount",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "messaging.models",
        "description": "messaging.models",
        "isExtraImport": true,
        "detail": "messaging.models",
        "documentation": {}
    },
    {
        "label": "DashboardStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "ContractorStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "SearchQuery",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "DashboardStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "ContractorStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStat",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "SearchQuery",
        "importPath": "analytics.models",
        "description": "analytics.models",
        "isExtraImport": true,
        "detail": "analytics.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSetting",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SMSVerification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SMSVerification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSetting",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSetting",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SMSVerification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SMSVerification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSetting",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework_nested",
        "description": "rest_framework_nested",
        "isExtraImport": true,
        "detail": "rest_framework_nested",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework_nested",
        "description": "rest_framework_nested",
        "isExtraImport": true,
        "detail": "rest_framework_nested",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework_nested",
        "description": "rest_framework_nested",
        "isExtraImport": true,
        "detail": "rest_framework_nested",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework_nested",
        "description": "rest_framework_nested",
        "isExtraImport": true,
        "detail": "rest_framework_nested",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "importPath": "contractors.serializers",
        "description": "contractors.serializers",
        "isExtraImport": true,
        "detail": "contractors.serializers",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "importPath": "alistpros_profiles.models",
        "description": "alistpros_profiles.models",
        "isExtraImport": true,
        "detail": "alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.asgi",
        "description": "A_List_Home_Pros.server.alistpros.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "A_List_Home_Pros.server.alistpros.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', default='django-insecure-z0yk!o2h=81=di$agvixrz4x*3_=4c7b3s8%1cl-5we_m$i*=n')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY', default='django-insecure-z0yk!o2h=81=di$agvixrz4x*3_=4c7b3s8%1cl-5we_m$i*=n')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "DEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "ROOT_URLCONF = 'alistpros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "WSGI_APPLICATION = 'alistpros.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n# Database configuration\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n# Use DATABASE_URL from .env file\nDATABASE_URL = config('DATABASE_URL', default='sqlite:///db.sqlite3')\nif DATABASE_URL.startswith('postgres'):\n    import dj_database_url\n    DATABASES = {",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "DATABASE_URL = config('DATABASE_URL', default='sqlite:///db.sqlite3')\nif DATABASE_URL.startswith('postgres'):\n    import dj_database_url\n    DATABASES = {\n        'default': dj_database_url.config(\n            default=DATABASE_URL,\n            conn_max_age=600,\n            conn_health_checks=True,\n        )\n    }",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development\nDEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = 'noreply@alistpros.com'\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "SITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "FRONTEND_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n}",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Stripe settings\nSTRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Stripe settings\nSTRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_PUBLISHABLE_KEY",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_WEBHOOK_SECRET",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.settings",
        "description": "A_List_Home_Pros.server.alistpros.settings",
        "peekOfCode": "STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "A_List_Home_Pros.server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.urls",
        "description": "A_List_Home_Pros.server.alistpros.urls",
        "peekOfCode": "router = routers.DefaultRouter()\n# Register routes\n# router.register(r'users', UserViewSet)  # UserViewSet is not defined in users.views\nrouter.register(r'alistpros/profiles', AListHomeProProfileViewSet)\n# ServiceCategoryListView is a ListAPIView, not a ModelViewSet, so it can't be registered with router\n# router.register(r'alistpros/categories', ServiceCategoryViewSet)\n# We don't have a ReviewViewSet, we have AListHomeProReviewCreateView which is a CreateAPIView\n# router.register(r'alistpros/reviews', ReviewViewSet)\nrouter.register(r'scheduling/appointments', AppointmentViewSet, basename='appointment')\n# TimeSlotViewSet doesn't exist in scheduling.views",
        "detail": "A_List_Home_Pros.server.alistpros.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.urls",
        "description": "A_List_Home_Pros.server.alistpros.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    # API root\n    path('api/', include(router.urls)),\n    # Authentication endpoints\n    path('api/users/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/users/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('api/users/token/verify/', TokenVerifyView.as_view(), name='token_verify'),\n    path('api/users/register/', RegisterView.as_view(), name='register'),\n    path('api/users/profile/', UserProfileView.as_view(), name='profile'),",
        "detail": "A_List_Home_Pros.server.alistpros.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros.wsgi",
        "description": "A_List_Home_Pros.server.alistpros.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "A_List_Home_Pros.server.alistpros.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.alistpros_profiles.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ServiceCategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProPortfolioInline(admin.TabularInline):\n    model = AListHomeProPortfolio\n    extra = 0\n    readonly_fields = ['image_preview', 'created_at', 'updated_at']\n    fields = ('title', 'description', 'image', 'image_preview', 'completion_date')\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe(f'<img src=\"{obj.image.url}\" width=\"100\" />')\n        return \"No Image\"\n    image_preview.short_description = 'Preview'",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProReviewInline(admin.TabularInline):\n    model = AListHomeProReview\n    extra = 0\n    readonly_fields = ['created_at', 'updated_at']\n    fields = ('client', 'rating', 'comment', 'is_verified', 'created_at')\n    can_delete = False\n@admin.register(ServiceCategory)\nclass ServiceCategoryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'get_pro_count', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class ServiceCategoryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'get_pro_count', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['name', 'description']\n    readonly_fields = ['created_at', 'updated_at']\n    def get_pro_count(self, obj):\n        return obj.alistpros.count()\n    get_pro_count.short_description = 'Professionals'\n@admin.register(AListHomeProProfile)\nclass AListHomeProProfileAdmin(admin.ModelAdmin):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProProfileAdmin(admin.ModelAdmin):\n    list_display = ['id', 'business_name', 'user_email', 'years_of_experience', 'is_onboarded',\n                   'service_radius', 'get_categories', 'profile_image_preview', 'created_at']\n    list_filter = ['is_onboarded', 'years_of_experience', 'service_categories', 'created_at', 'updated_at']\n    search_fields = ['business_name', 'business_description', 'user__email', 'user__name', 'license_number']\n    readonly_fields = ['profile_image_preview', 'created_at', 'updated_at']\n    filter_horizontal = ['service_categories']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('user', 'business_name', 'business_description', 'years_of_experience', 'is_onboarded')",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProReviewAdmin(admin.ModelAdmin):\n    list_display = ['id', 'alistpro_name', 'client_name', 'rating', 'is_verified', 'created_at']\n    list_filter = ['rating', 'is_verified', 'created_at']\n    search_fields = ['comment', 'client__name', 'client__email', 'alistpro__business_name']\n    readonly_fields = ['created_at', 'updated_at']\n    list_editable = ['is_verified']\n    def alistpro_name(self, obj):\n        return obj.alistpro.business_name\n    alistpro_name.short_description = 'Professional'\n    def client_name(self, obj):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "description": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProPortfolioAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'alistpro_name', 'image_preview', 'completion_date', 'created_at']\n    list_filter = ['completion_date', 'created_at']\n    search_fields = ['title', 'description', 'alistpro__business_name']\n    readonly_fields = ['image_preview', 'created_at', 'updated_at']\n    def alistpro_name(self, obj):\n        return obj.alistpro.business_name\n    alistpro_name.short_description = 'Professional'\n    def image_preview(self, obj):\n        if obj.image:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AlistprosProfilesConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.apps",
        "description": "A_List_Home_Pros.server.alistpros_profiles.apps",
        "peekOfCode": "class AlistprosProfilesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'alistpros_profiles'",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.apps",
        "documentation": {}
    },
    {
        "label": "AListHomeProFilter",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.filters",
        "description": "A_List_Home_Pros.server.alistpros_profiles.filters",
        "peekOfCode": "class AListHomeProFilter(django_filters.FilterSet):\n    \"\"\"\n    Filter for A-List Home Pro profiles\n    \"\"\"\n    business_name = django_filters.CharFilter(lookup_expr='icontains')\n    min_years_experience = django_filters.NumberFilter(field_name='years_of_experience', lookup_expr='gte')\n    service_category = django_filters.NumberFilter(field_name='service_categories', lookup_expr='exact')\n    service_radius = django_filters.NumberFilter(field_name='service_radius', lookup_expr='gte')\n    is_onboarded = django_filters.BooleanFilter()\n    class Meta:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.filters",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.models",
        "description": "A_List_Home_Pros.server.alistpros_profiles.models",
        "peekOfCode": "class ServiceCategory(TimeStampedModel):\n    \"\"\"\n    Categories of services offered by A-List Home Pros\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = 'Service Categories'",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.models",
        "description": "A_List_Home_Pros.server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProProfile(TimeStampedModel):\n    \"\"\"\n    Extended profile information for A-List Home Pros\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_profile')\n    business_name = models.CharField(max_length=255)\n    business_description = models.TextField(blank=True)\n    years_of_experience = models.PositiveIntegerField(default=0)\n    license_number = models.CharField(max_length=100, blank=True)\n    insurance_info = models.CharField(max_length=255, blank=True)",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.models",
        "description": "A_List_Home_Pros.server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProPortfolio(TimeStampedModel):\n    \"\"\"\n    Portfolio items for A-List Home Pros to showcase their work\n    \"\"\"\n    alistpro = models.ForeignKey(AListHomeProProfile, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    image = models.ImageField(upload_to='alistpro_portfolio/')\n    completion_date = models.DateField(null=True, blank=True)\n    def __str__(self):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.models",
        "description": "A_List_Home_Pros.server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProReview(TimeStampedModel):\n    \"\"\"\n    Reviews for A-List Home Pros left by clients\n    \"\"\"\n    alistpro = models.ForeignKey(AListHomeProProfile, on_delete=models.CASCADE, related_name='reviews')\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_reviews_given')\n    rating = models.PositiveSmallIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])\n    comment = models.TextField()\n    is_verified = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "description": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "peekOfCode": "class ServiceCategorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for service categories\n    \"\"\"\n    class Meta:\n        model = ServiceCategory\n        fields = ('id', 'name', 'description', 'created_at')\nclass AListHomeProPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro portfolio items",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "description": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro portfolio items\n    \"\"\"\n    class Meta:\n        model = AListHomeProPortfolio\n        fields = ('id', 'title', 'description', 'image', 'completion_date', 'created_at')\n        read_only_fields = ('created_at',)\nclass AListHomeProReviewSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "description": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProReviewSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro reviews\n    \"\"\"\n    client_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AListHomeProReview\n        fields = ('id', 'client', 'client_name', 'rating', 'comment', 'is_verified', 'created_at')\n        read_only_fields = ('client', 'is_verified', 'created_at')\n    def get_client_name(self, obj):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "description": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProProfileSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro profiles\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    service_categories = ServiceCategorySerializer(many=True, read_only=True)\n    portfolio_items = AListHomeProPortfolioSerializer(many=True, read_only=True)\n    reviews = AListHomeProReviewSerializer(many=True, read_only=True)\n    average_rating = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileCreateUpdateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "description": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProProfileCreateUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating and updating A-List Home Pro profiles\n    \"\"\"\n    service_category_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        write_only=True,\n        required=False\n    )\n    class Meta:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "description": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'profiles', views.AListHomeProProfileViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    path('profiles/<int:pk>/', views.AListHomeProProfileDetailView.as_view(), name='alistpro-profile-detail'),\n    path('profiles/create/', views.AListHomeProProfileCreateView.as_view(), name='alistpro-profile-create'),\n    path('profiles/update/', views.AListHomeProProfileUpdateView.as_view(), name='alistpro-profile-update'),\n    path('portfolio/', views.AListHomeProPortfolioListCreateView.as_view(), name='alistpro-portfolio-list-create'),\n    path('portfolio/<int:pk>/', views.AListHomeProPortfolioDetailView.as_view(), name='alistpro-portfolio-detail'),",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "description": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    path('profiles/<int:pk>/', views.AListHomeProProfileDetailView.as_view(), name='alistpro-profile-detail'),\n    path('profiles/create/', views.AListHomeProProfileCreateView.as_view(), name='alistpro-profile-create'),\n    path('profiles/update/', views.AListHomeProProfileUpdateView.as_view(), name='alistpro-profile-update'),\n    path('portfolio/', views.AListHomeProPortfolioListCreateView.as_view(), name='alistpro-portfolio-list-create'),\n    path('portfolio/<int:pk>/', views.AListHomeProPortfolioDetailView.as_view(), name='alistpro-portfolio-detail'),\n    path('profiles/<int:alistpro_id>/reviews/', views.AListHomeProReviewCreateView.as_view(), name='alistpro-review-create'),\n    path('admin/pending/', views.AdminPendingAListHomeProsView.as_view(), name='admin-pending-alistpros'),",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.urls",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class ServiceCategoryListView(generics.ListAPIView):\n    \"\"\"\n    List all service categories\n    \"\"\"\n    queryset = ServiceCategory.objects.all()\n    serializer_class = ServiceCategorySerializer\n    permission_classes = [permissions.AllowAny]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['name', 'description']\nclass AListHomeProProfileViewSet(viewsets.ModelViewSet):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for A-List Home Pro profiles with advanced filtering\"\"\"\n    queryset = AListHomeProProfile.objects.all()\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = AListHomeProFilter\n    search_fields = ['business_name', 'business_description', 'user__name', 'service_categories__name']\n    ordering_fields = ['business_name', 'years_of_experience', 'created_at']\n    ordering = ['business_name']",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve an A-List Home Pro profile\n    \"\"\"\n    queryset = AListHomeProProfile.objects.all()\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [permissions.AllowAny]\nclass AListHomeProProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create an A-List Home Pro profile (A-List Home Pros only)",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create an A-List Home Pro profile (A-List Home Pros only)\n    \"\"\"\n    serializer_class = AListHomeProProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def perform_create(self, serializer):\n        # Ensure the profile is linked to the current user\n        serializer.save(user=self.request.user)\nclass AListHomeProProfileUpdateView(generics.UpdateAPIView):",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileUpdateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    Update an A-List Home Pro profile (owner only)\n    \"\"\"\n    serializer_class = AListHomeProProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def get_object(self):\n        return get_object_or_404(AListHomeProProfile, user=self.request.user)\nclass AListHomeProPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioListCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    List and create portfolio items for an A-List Home Pro\n    \"\"\"\n    serializer_class = AListHomeProPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        if self.request.user.role == UserRole.ADMIN:\n            return AListHomeProPortfolio.objects.all()\n        try:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProPortfolioDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    Retrieve, update or delete a portfolio item\n    \"\"\"\n    serializer_class = AListHomeProPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        if self.request.user.role == UserRole.ADMIN:\n            return AListHomeProPortfolio.objects.all()\n        try:",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProReviewCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a review for an A-List Home Pro (clients only)\n    \"\"\"\n    serializer_class = AListHomeProReviewSerializer\n    permission_classes = [IsClient]\n    def perform_create(self, serializer):\n        alistpro_id = self.kwargs.get('alistpro_id')\n        alistpro_profile = get_object_or_404(AListHomeProProfile, id=alistpro_id)\n        # Check if the client has already reviewed this A-List Home Pro",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AdminPendingAListHomeProsView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.alistpros_profiles.views",
        "description": "A_List_Home_Pros.server.alistpros_profiles.views",
        "peekOfCode": "class AdminPendingAListHomeProsView(generics.ListAPIView):\n    \"\"\"\n    List A-List Home Pros that are not yet verified (admin only)\n    \"\"\"\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [IsAdmin]\n    def get_queryset(self):\n        return AListHomeProProfile.objects.filter(is_onboarded=False)",
        "detail": "A_List_Home_Pros.server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.analytics.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DashboardStat',\n            fields=[",
        "detail": "A_List_Home_Pros.server.analytics.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DashboardStatAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.admin",
        "description": "A_List_Home_Pros.server.analytics.admin",
        "peekOfCode": "class DashboardStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'date', 'new_users', 'new_contractors', 'new_appointments', 'completed_appointments', 'total_payment_volume']\n    list_filter = ['date']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(ContractorStat)\nclass ContractorStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'profile_views', 'appointment_requests', 'completed_appointments', 'total_earnings', 'average_rating']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'contractor__user__name']\n    readonly_fields = ['created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "ContractorStatAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.admin",
        "description": "A_List_Home_Pros.server.analytics.admin",
        "peekOfCode": "class ContractorStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'profile_views', 'appointment_requests', 'completed_appointments', 'total_earnings', 'average_rating']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'contractor__user__name']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(ServiceCategoryStat)\nclass ServiceCategoryStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'service_category', 'date', 'contractor_count', 'appointment_count', 'average_price']\n    list_filter = ['date', 'service_category']\n    search_fields = ['service_category__name']",
        "detail": "A_List_Home_Pros.server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStatAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.admin",
        "description": "A_List_Home_Pros.server.analytics.admin",
        "peekOfCode": "class ServiceCategoryStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'service_category', 'date', 'contractor_count', 'appointment_count', 'average_price']\n    list_filter = ['date', 'service_category']\n    search_fields = ['service_category__name']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(UserActivity)\nclass UserActivityAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'activity_type', 'description_preview', 'ip_address', 'created_at']\n    list_filter = ['activity_type', 'created_at']\n    search_fields = ['user__email', 'user__name', 'description', 'ip_address']",
        "detail": "A_List_Home_Pros.server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "UserActivityAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.admin",
        "description": "A_List_Home_Pros.server.analytics.admin",
        "peekOfCode": "class UserActivityAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'activity_type', 'description_preview', 'ip_address', 'created_at']\n    list_filter = ['activity_type', 'created_at']\n    search_fields = ['user__email', 'user__name', 'description', 'ip_address']\n    readonly_fields = ['created_at', 'updated_at']\n    def description_preview(self, obj):\n        return obj.description[:50] + '...' if len(obj.description) > 50 else obj.description\n    description_preview.short_description = 'Description'\n@admin.register(SearchQuery)\nclass SearchQueryAdmin(admin.ModelAdmin):",
        "detail": "A_List_Home_Pros.server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "SearchQueryAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.admin",
        "description": "A_List_Home_Pros.server.analytics.admin",
        "peekOfCode": "class SearchQueryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'query_preview', 'results_count', 'created_at']\n    list_filter = ['created_at', 'results_count']\n    search_fields = ['user__email', 'user__name', 'query']\n    readonly_fields = ['created_at', 'updated_at']\n    def query_preview(self, obj):\n        return obj.query[:50] + '...' if len(obj.query) > 50 else obj.query\n    query_preview.short_description = 'Query'",
        "detail": "A_List_Home_Pros.server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "DashboardStat",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.models",
        "description": "A_List_Home_Pros.server.analytics.models",
        "peekOfCode": "class DashboardStat(TimeStampedModel):\n    \"\"\"Statistics for dashboard display\"\"\"\n    date = models.DateField()\n    new_users = models.IntegerField(default=0)\n    new_contractors = models.IntegerField(default=0)\n    new_appointments = models.IntegerField(default=0)\n    completed_appointments = models.IntegerField(default=0)\n    total_payment_volume = models.DecimalField(max_digits=12, decimal_places=2, default=0)\n    class Meta:\n        ordering = ['-date']",
        "detail": "A_List_Home_Pros.server.analytics.models",
        "documentation": {}
    },
    {
        "label": "ContractorStat",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.models",
        "description": "A_List_Home_Pros.server.analytics.models",
        "peekOfCode": "class ContractorStat(TimeStampedModel):\n    \"\"\"Statistics for individual contractors\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='stats'\n    )\n    date = models.DateField()\n    profile_views = models.IntegerField(default=0)\n    appointment_requests = models.IntegerField(default=0)",
        "detail": "A_List_Home_Pros.server.analytics.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStat",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.models",
        "description": "A_List_Home_Pros.server.analytics.models",
        "peekOfCode": "class ServiceCategoryStat(TimeStampedModel):\n    \"\"\"Statistics for service categories\"\"\"\n    service_category = models.ForeignKey(\n        ServiceCategory,\n        on_delete=models.CASCADE,\n        related_name='stats'\n    )\n    date = models.DateField()\n    contractor_count = models.IntegerField(default=0)\n    appointment_count = models.IntegerField(default=0)",
        "detail": "A_List_Home_Pros.server.analytics.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.models",
        "description": "A_List_Home_Pros.server.analytics.models",
        "peekOfCode": "class UserActivity(TimeStampedModel):\n    \"\"\"Track user activity on the platform\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='activities'\n    )\n    activity_type = models.CharField(max_length=50)\n    description = models.TextField(blank=True)\n    ip_address = models.GenericIPAddressField(null=True, blank=True)",
        "detail": "A_List_Home_Pros.server.analytics.models",
        "documentation": {}
    },
    {
        "label": "SearchQuery",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.models",
        "description": "A_List_Home_Pros.server.analytics.models",
        "peekOfCode": "class SearchQuery(TimeStampedModel):\n    \"\"\"Track search queries on the platform\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='search_queries'\n    )\n    query = models.TextField()",
        "detail": "A_List_Home_Pros.server.analytics.models",
        "documentation": {}
    },
    {
        "label": "DashboardStatSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.serializers",
        "description": "A_List_Home_Pros.server.analytics.serializers",
        "peekOfCode": "class DashboardStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard statistics\"\"\"\n    class Meta:\n        model = DashboardStat\n        fields = [\n            'id', 'date', 'new_users', 'new_contractors', 'new_appointments',\n            'completed_appointments', 'total_payment_volume', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass ContractorStatSerializer(serializers.ModelSerializer):",
        "detail": "A_List_Home_Pros.server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorStatSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.serializers",
        "description": "A_List_Home_Pros.server.analytics.serializers",
        "peekOfCode": "class ContractorStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor statistics\"\"\"\n    class Meta:\n        model = ContractorStat\n        fields = [\n            'id', 'contractor', 'date', 'profile_views', 'appointment_requests',\n            'completed_appointments', 'cancelled_appointments', 'total_earnings',\n            'average_rating', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStatSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.serializers",
        "description": "A_List_Home_Pros.server.analytics.serializers",
        "peekOfCode": "class ServiceCategoryStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for service category statistics\"\"\"\n    class Meta:\n        model = ServiceCategoryStat\n        fields = [\n            'id', 'service_category', 'date', 'contractor_count',\n            'appointment_count', 'average_price', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass UserActivitySerializer(serializers.ModelSerializer):",
        "detail": "A_List_Home_Pros.server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "UserActivitySerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.serializers",
        "description": "A_List_Home_Pros.server.analytics.serializers",
        "peekOfCode": "class UserActivitySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user activity\"\"\"\n    class Meta:\n        model = UserActivity\n        fields = [\n            'id', 'user', 'activity_type', 'description',\n            'ip_address', 'user_agent', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass SearchQuerySerializer(serializers.ModelSerializer):",
        "detail": "A_List_Home_Pros.server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "SearchQuerySerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.serializers",
        "description": "A_List_Home_Pros.server.analytics.serializers",
        "peekOfCode": "class SearchQuerySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for search queries\"\"\"\n    class Meta:\n        model = SearchQuery\n        fields = [\n            'id', 'user', 'query', 'filters', 'results_count', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.analytics.urls",
        "description": "A_List_Home_Pros.server.analytics.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'dashboard', AnalyticsDashboardViewSet, basename='analytics-dashboard')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.analytics.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.analytics.urls",
        "description": "A_List_Home_Pros.server.analytics.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.analytics.urls",
        "documentation": {}
    },
    {
        "label": "AnalyticsDashboardViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.analytics.views",
        "description": "A_List_Home_Pros.server.analytics.views",
        "peekOfCode": "class AnalyticsDashboardViewSet(viewsets.ViewSet):\n    \"\"\"ViewSet for analytics dashboard data\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=False, methods=['get'])\n    def platform_overview(self, request):\n        \"\"\"Get platform-wide statistics\"\"\"\n        # Only admins can see platform-wide stats\n        if not request.user.is_admin:\n            return Response(\n                {'detail': 'You do not have permission to view platform statistics.'},",
        "detail": "A_List_Home_Pros.server.analytics.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.analytics.views",
        "description": "A_List_Home_Pros.server.analytics.views",
        "peekOfCode": "User = get_user_model()\nclass AnalyticsDashboardViewSet(viewsets.ViewSet):\n    \"\"\"ViewSet for analytics dashboard data\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=False, methods=['get'])\n    def platform_overview(self, request):\n        \"\"\"Get platform-wide statistics\"\"\"\n        # Only admins can see platform-wide stats\n        if not request.user.is_admin:\n            return Response(",
        "detail": "A_List_Home_Pros.server.analytics.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.contractors.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContractorPortfolio',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "A_List_Home_Pros.server.contractors.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.migrations.0002_initial",
        "description": "A_List_Home_Pros.server.contractors.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='contractorprofile',\n            name='user',",
        "detail": "A_List_Home_Pros.server.contractors.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ServiceCategoryAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ServiceCategory model\n    واجهة الإدارة لفئات الخدمات\n    \"\"\"\n    list_display = ('name', 'description', 'created_at', 'updated_at', 'contractor_count')\n    search_fields = ('name', 'description')\n    list_filter = ('created_at', 'updated_at')\n    readonly_fields = ('created_at', 'updated_at')\n    def contractor_count(self, obj):",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ContractorPortfolioInline(admin.TabularInline):\n    \"\"\"\n    Inline admin for ContractorPortfolio\n    واجهة إدارة مضمنة لمعرض أعمال المقاول\n    \"\"\"\n    model = ContractorPortfolio\n    extra = 1\n    fields = ('title', 'description', 'image', 'completion_date')\nclass ContractorReviewInline(admin.TabularInline):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorReviewInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ContractorReviewInline(admin.TabularInline):\n    \"\"\"\n    Inline admin for ContractorReview\n    واجهة إدارة مضمنة لتقييمات المقاول\n    \"\"\"\n    model = ContractorReview\n    extra = 0\n    fields = ('client', 'rating', 'comment', 'is_verified', 'created_at')\n    readonly_fields = ('created_at',)\n@admin.register(ContractorProfile)",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorProfileAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ContractorProfileAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorProfile model\n    واجهة الإدارة لملفات المقاولين\n    \"\"\"\n    list_display = ('business_name', 'user_email', 'years_of_experience', \n                   'service_radius', 'is_onboarded', 'profile_image_preview', 'created_at')\n    list_filter = ('is_onboarded', 'years_of_experience', 'service_categories', 'created_at')\n    search_fields = ('business_name', 'business_description', 'user__email', 'license_number')\n    readonly_fields = ('created_at', 'updated_at', 'profile_image_preview')",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ContractorPortfolioAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorPortfolio model\n    واجهة الإدارة لمعرض أعمال المقاولين\n    \"\"\"\n    list_display = ('title', 'contractor_name', 'image_preview', 'completion_date', 'created_at')\n    list_filter = ('completion_date', 'created_at')\n    search_fields = ('title', 'description', 'contractor__business_name')\n    readonly_fields = ('created_at', 'updated_at', 'image_preview')\n    fieldsets = (",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorReviewAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.admin",
        "description": "A_List_Home_Pros.server.contractors.admin",
        "peekOfCode": "class ContractorReviewAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorReview model\n    واجهة الإدارة لتقييمات المقاولين\n    \"\"\"\n    list_display = ('contractor_name', 'client_name', 'rating_stars', 'comment_excerpt', 'is_verified', 'created_at')\n    list_filter = ('rating', 'is_verified', 'created_at')\n    search_fields = ('comment', 'contractor__business_name', 'client__email')\n    readonly_fields = ('created_at', 'updated_at')\n    list_editable = ('is_verified',)",
        "detail": "A_List_Home_Pros.server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorsConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.apps",
        "description": "A_List_Home_Pros.server.contractors.apps",
        "peekOfCode": "class ContractorsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contractors'",
        "detail": "A_List_Home_Pros.server.contractors.apps",
        "documentation": {}
    },
    {
        "label": "ContractorFilter",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.filters",
        "description": "A_List_Home_Pros.server.contractors.filters",
        "peekOfCode": "class ContractorFilter(django_filters.FilterSet):\n    \"\"\"Advanced filter for contractors\"\"\"\n    service_category = django_filters.ModelMultipleChoiceFilter(\n        field_name='service_categories',\n        queryset=ServiceCategory.objects.all(),\n        label='Service Category'\n    )\n    location = django_filters.CharFilter(\n        method='filter_location',\n        label='Location'",
        "detail": "A_List_Home_Pros.server.contractors.filters",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.models",
        "description": "A_List_Home_Pros.server.contractors.models",
        "peekOfCode": "class ServiceCategory(TimeStampedModel):\n    \"\"\"\n    Categories of services offered by contractors\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = 'Service Categories'",
        "detail": "A_List_Home_Pros.server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.models",
        "description": "A_List_Home_Pros.server.contractors.models",
        "peekOfCode": "class ContractorProfile(TimeStampedModel):\n    \"\"\"\n    Extended profile information for contractors\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='contractor_profile')\n    business_name = models.CharField(max_length=255)\n    business_description = models.TextField(blank=True)\n    years_of_experience = models.PositiveIntegerField(default=0)\n    license_number = models.CharField(max_length=100, blank=True)\n    insurance_info = models.CharField(max_length=255, blank=True)",
        "detail": "A_List_Home_Pros.server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.models",
        "description": "A_List_Home_Pros.server.contractors.models",
        "peekOfCode": "class ContractorPortfolio(TimeStampedModel):\n    \"\"\"\n    Portfolio items for contractors to showcase their work\n    \"\"\"\n    contractor = models.ForeignKey(ContractorProfile, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    image = models.ImageField(upload_to='contractor_portfolio/')\n    completion_date = models.DateField(null=True, blank=True)\n    def __str__(self):",
        "detail": "A_List_Home_Pros.server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.models",
        "description": "A_List_Home_Pros.server.contractors.models",
        "peekOfCode": "class ContractorReview(TimeStampedModel):\n    \"\"\"\n    Reviews for contractors left by clients\n    \"\"\"\n    contractor = models.ForeignKey(ContractorProfile, on_delete=models.CASCADE, related_name='reviews')\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reviews_given')\n    rating = models.PositiveSmallIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])\n    comment = models.TextField()\n    is_verified = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "A_List_Home_Pros.server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.serializers",
        "description": "A_List_Home_Pros.server.contractors.serializers",
        "peekOfCode": "class ServiceCategorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for service categories\n    \"\"\"\n    class Meta:\n        model = ServiceCategory\n        fields = ('id', 'name', 'description', 'created_at')\nclass ContractorPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor portfolio items",
        "detail": "A_List_Home_Pros.server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.serializers",
        "description": "A_List_Home_Pros.server.contractors.serializers",
        "peekOfCode": "class ContractorPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor portfolio items\n    \"\"\"\n    class Meta:\n        model = ContractorPortfolio\n        fields = ('id', 'title', 'description', 'image', 'completion_date', 'created_at')\n        read_only_fields = ('created_at',)\nclass ContractorReviewSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorReviewSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.serializers",
        "description": "A_List_Home_Pros.server.contractors.serializers",
        "peekOfCode": "class ContractorReviewSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor reviews\n    \"\"\"\n    client_name = serializers.SerializerMethodField()\n    class Meta:\n        model = ContractorReview\n        fields = ('id', 'client', 'client_name', 'rating', 'comment', 'is_verified', 'created_at')\n        read_only_fields = ('client', 'is_verified', 'created_at')\n    def get_client_name(self, obj):",
        "detail": "A_List_Home_Pros.server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.serializers",
        "description": "A_List_Home_Pros.server.contractors.serializers",
        "peekOfCode": "class ContractorProfileSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor profiles\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    service_categories = ServiceCategorySerializer(many=True, read_only=True)\n    portfolio_items = ContractorPortfolioSerializer(many=True, read_only=True)\n    reviews = ContractorReviewSerializer(many=True, read_only=True)\n    average_rating = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "A_List_Home_Pros.server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileCreateUpdateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.serializers",
        "description": "A_List_Home_Pros.server.contractors.serializers",
        "peekOfCode": "class ContractorProfileCreateUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating and updating contractor profiles\n    \"\"\"\n    service_category_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        write_only=True,\n        required=False\n    )\n    class Meta:",
        "detail": "A_List_Home_Pros.server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.contractors.urls",
        "description": "A_List_Home_Pros.server.contractors.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'profiles', ContractorProfileViewSet, basename='contractor-profile')\nurlpatterns = [\n    # Include router URLs\n    path('', include(router.urls)),\n    # Service categories\n    path('categories/', ServiceCategoryListView.as_view(), name='service-category-list'),\n    # Legacy contractor profile endpoints\n    path('detail/<int:pk>/', ContractorProfileDetailView.as_view(), name='contractor-detail'),\n    path('create/', ContractorProfileCreateView.as_view(), name='contractor-create'),",
        "detail": "A_List_Home_Pros.server.contractors.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.contractors.urls",
        "description": "A_List_Home_Pros.server.contractors.urls",
        "peekOfCode": "urlpatterns = [\n    # Include router URLs\n    path('', include(router.urls)),\n    # Service categories\n    path('categories/', ServiceCategoryListView.as_view(), name='service-category-list'),\n    # Legacy contractor profile endpoints\n    path('detail/<int:pk>/', ContractorProfileDetailView.as_view(), name='contractor-detail'),\n    path('create/', ContractorProfileCreateView.as_view(), name='contractor-create'),\n    path('update/', ContractorProfileUpdateView.as_view(), name='contractor-update'),\n    # Portfolio items",
        "detail": "A_List_Home_Pros.server.contractors.urls",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ServiceCategoryListView(generics.ListAPIView):\n    \"\"\"\n    List all service categories\n    \"\"\"\n    queryset = ServiceCategory.objects.all()\n    serializer_class = ServiceCategorySerializer\n    permission_classes = [permissions.AllowAny]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['name', 'description']\nclass ContractorProfileViewSet(viewsets.ModelViewSet):",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorProfileViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for contractor profiles with advanced filtering\"\"\"\n    queryset = ContractorProfile.objects.all()\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = ContractorFilter\n    search_fields = ['business_name', 'description', 'user__name', 'service_categories__name']\n    ordering_fields = ['business_name', 'years_in_business', 'created_at']\n    ordering = ['business_name']",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorProfileDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve a contractor profile\n    \"\"\"\n    queryset = ContractorProfile.objects.all()\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [permissions.AllowAny]\nclass ContractorProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a contractor profile (for contractors only)",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a contractor profile (for contractors only)\n    \"\"\"\n    serializer_class = ContractorProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def perform_create(self, serializer):\n        # Check if user already has a contractor profile\n        if hasattr(self.request.user, 'contractor_profile'):\n            raise serializers.ValidationError({\"detail\": \"You already have a contractor profile\"})",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileUpdateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorProfileUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    Update a contractor profile (owner only)\n    \"\"\"\n    serializer_class = ContractorProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def get_object(self):\n        return get_object_or_404(ContractorProfile, user=self.request.user)\nclass ContractorPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioListCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    List and create portfolio items for a contractor\n    \"\"\"\n    serializer_class = ContractorPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        contractor_id = self.kwargs.get('contractor_id')\n        return ContractorPortfolio.objects.filter(contractor_id=contractor_id)\n    def perform_create(self, serializer):",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorPortfolioDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    Retrieve, update or delete a portfolio item\n    \"\"\"\n    serializer_class = ContractorPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return ContractorPortfolio.objects.all()\n    def check_object_permissions(self, request, obj):\n        # Allow only the contractor who owns this portfolio item or an admin",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorReviewCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class ContractorReviewCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a review for a contractor (clients only)\n    \"\"\"\n    serializer_class = ContractorReviewSerializer\n    permission_classes = [IsClient]\n    def perform_create(self, serializer):\n        contractor_id = self.kwargs.get('contractor_id')\n        contractor = get_object_or_404(ContractorProfile, id=contractor_id)\n        # Check if the client has already reviewed this contractor",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "AdminPendingContractorsView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.contractors.views",
        "description": "A_List_Home_Pros.server.contractors.views",
        "peekOfCode": "class AdminPendingContractorsView(generics.ListAPIView):\n    \"\"\"\n    List contractors that are not yet verified (admin only)\n    \"\"\"\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [IsAdmin]\n    def get_queryset(self):\n        return ContractorProfile.objects.filter(user__is_verified=False)",
        "detail": "A_List_Home_Pros.server.contractors.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "description": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'\n        )\n        parser.add_argument(",
        "detail": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "description": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "peekOfCode": "User = get_user_model()\nfake = Faker()\nclass Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'",
        "detail": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "description": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "peekOfCode": "fake = Faker()\nclass Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'\n        )",
        "detail": "A_List_Home_Pros.server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "A_List_Home_Pros.server.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.migrations.0002_initial",
        "description": "A_List_Home_Pros.server.core.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('core', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='address',\n            name='user',",
        "detail": "A_List_Home_Pros.server.core.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.apps",
        "description": "A_List_Home_Pros.server.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "A_List_Home_Pros.server.core.apps",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.models",
        "description": "A_List_Home_Pros.server.core.models",
        "peekOfCode": "class TimeStampedModel(models.Model):\n    \"\"\"\n    An abstract base class model that provides self-updating\n    created and modified fields.\n    \"\"\"\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass Address(TimeStampedModel):",
        "detail": "A_List_Home_Pros.server.core.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.core.models",
        "description": "A_List_Home_Pros.server.core.models",
        "peekOfCode": "class Address(TimeStampedModel):\n    \"\"\"\n    Model for storing address information\n    \"\"\"\n    street_address = models.CharField(max_length=255)\n    city = models.CharField(max_length=100)\n    state = models.CharField(max_length=100)\n    zip_code = models.CharField(max_length=20)\n    country = models.CharField(max_length=100, default='United States')\n    is_primary = models.BooleanField(default=False)",
        "detail": "A_List_Home_Pros.server.core.models",
        "documentation": {}
    },
    {
        "label": "LeadsConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.leads.apps",
        "description": "A_List_Home_Pros.server.leads.apps",
        "peekOfCode": "class LeadsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'leads'",
        "detail": "A_List_Home_Pros.server.leads.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.messaging.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Conversation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "A_List_Home_Pros.server.messaging.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MessageInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.admin",
        "description": "A_List_Home_Pros.server.messaging.admin",
        "peekOfCode": "class MessageInline(admin.TabularInline):\n    model = Message\n    extra = 0\n    readonly_fields = ['sender', 'content', 'created_at', 'updated_at']\n    can_delete = False\n    def has_add_permission(self, request, obj=None):\n        return False\n@admin.register(Conversation)\nclass ConversationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'get_participants', 'created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "ConversationAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.admin",
        "description": "A_List_Home_Pros.server.messaging.admin",
        "peekOfCode": "class ConversationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'get_participants', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['title', 'participants__email', 'participants__name']\n    readonly_fields = ['created_at', 'updated_at']\n    filter_horizontal = ['participants']\n    inlines = [MessageInline]\n    def get_participants(self, obj):\n        return \", \".join([user.email for user in obj.participants.all()])\n    get_participants.short_description = 'Participants'",
        "detail": "A_List_Home_Pros.server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.admin",
        "description": "A_List_Home_Pros.server.messaging.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n    list_display = ['id', 'conversation', 'sender', 'content_preview', 'created_at', 'is_read']\n    list_filter = ['created_at', 'sender']\n    search_fields = ['content', 'sender__email', 'sender__name']\n    readonly_fields = ['created_at', 'updated_at']\n    filter_horizontal = ['read_by']\n    def content_preview(self, obj):\n        return obj.content[:50] + '...' if len(obj.content) > 50 else obj.content\n    content_preview.short_description = 'Content Preview'\n@admin.register(Notification)",
        "detail": "A_List_Home_Pros.server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.admin",
        "description": "A_List_Home_Pros.server.messaging.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'notification_type', 'title', 'read', 'created_at']\n    list_filter = ['notification_type', 'read', 'created_at']\n    search_fields = ['title', 'content', 'user__email', 'user__name']\n    readonly_fields = ['created_at', 'updated_at']\n    list_editable = ['read']",
        "detail": "A_List_Home_Pros.server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.models",
        "description": "A_List_Home_Pros.server.messaging.models",
        "peekOfCode": "class Conversation(TimeStampedModel):\n    \"\"\"A conversation between two users\"\"\"\n    participants = models.ManyToManyField(\n        settings.AUTH_USER_MODEL,\n        related_name='conversations'\n    )\n    title = models.CharField(max_length=255, blank=True)\n    class Meta:\n        ordering = ['-updated_at']\n    def __str__(self):",
        "detail": "A_List_Home_Pros.server.messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.models",
        "description": "A_List_Home_Pros.server.messaging.models",
        "peekOfCode": "class Message(TimeStampedModel):\n    \"\"\"A message within a conversation\"\"\"\n    conversation = models.ForeignKey(\n        Conversation,\n        on_delete=models.CASCADE,\n        related_name='messages'\n    )\n    sender = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,",
        "detail": "A_List_Home_Pros.server.messaging.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.models",
        "description": "A_List_Home_Pros.server.messaging.models",
        "peekOfCode": "class Notification(TimeStampedModel):\n    \"\"\"System notification for a user\"\"\"\n    NOTIFICATION_TYPES = (\n        ('MESSAGE', 'New Message'),\n        ('REVIEW', 'New Review'),\n        ('PAYMENT', 'Payment Update'),\n        ('SYSTEM', 'System Notification'),\n    )\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,",
        "detail": "A_List_Home_Pros.server.messaging.models",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Simplified user serializer for messaging\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'name', 'role']\nclass MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)\n    class Meta:",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)\n    class Meta:\n        model = Message\n        fields = ['id', 'sender', 'content', 'created_at', 'is_read']\n        read_only_fields = ['created_at']\nclass ConversationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for conversations\"\"\"",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class ConversationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for conversations\"\"\"\n    participants = UserBasicSerializer(many=True, read_only=True)\n    last_message = MessageSerializer(read_only=True)\n    unread_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Conversation\n        fields = ['id', 'participants', 'title', 'created_at', 'updated_at', 'last_message', 'unread_count']\n        read_only_fields = ['created_at', 'updated_at']\n    def get_unread_count(self, obj):",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationCreateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class ConversationCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating a new conversation\"\"\"\n    participants = serializers.PrimaryKeyRelatedField(\n        queryset=User.objects.all(),\n        many=True,\n        write_only=True\n    )\n    initial_message = serializers.CharField(write_only=True)\n    class Meta:\n        model = Conversation",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageCreateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class MessageCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating a new message\"\"\"\n    class Meta:\n        model = Message\n        fields = ['id', 'conversation', 'content']\n    def validate_conversation(self, conversation):\n        \"\"\"Ensure user is a participant in the conversation\"\"\"\n        user = self.context['request'].user\n        if user not in conversation.participants.all():\n            raise serializers.ValidationError(\"You are not a participant in this conversation\")",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for notifications\"\"\"\n    class Meta:\n        model = Notification\n        fields = ['id', 'notification_type', 'title', 'content', 'created_at', 'read', \n                  'related_object_id', 'related_object_type']\n        read_only_fields = ['created_at']",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.messaging.serializers",
        "description": "A_List_Home_Pros.server.messaging.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Simplified user serializer for messaging\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'name', 'role']\nclass MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)",
        "detail": "A_List_Home_Pros.server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.messaging.urls",
        "description": "A_List_Home_Pros.server.messaging.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'conversations', ConversationViewSet, basename='conversation')\nrouter.register(r'notifications', NotificationViewSet, basename='notification')\n# Create a nested router for messages within conversations\nconversation_router = routers.NestedDefaultRouter(router, r'conversations', lookup='conversation')\nconversation_router.register(r'messages', MessageViewSet, basename='conversation-message')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "conversation_router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.messaging.urls",
        "description": "A_List_Home_Pros.server.messaging.urls",
        "peekOfCode": "conversation_router = routers.NestedDefaultRouter(router, r'conversations', lookup='conversation')\nconversation_router.register(r'messages', MessageViewSet, basename='conversation-message')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.messaging.urls",
        "description": "A_List_Home_Pros.server.messaging.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.views",
        "description": "A_List_Home_Pros.server.messaging.views",
        "peekOfCode": "class ConversationViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing conversations\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'participants__name', 'participants__email']\n    ordering_fields = ['updated_at', 'created_at']\n    ordering = ['-updated_at']\n    def get_queryset(self):\n        \"\"\"Return only conversations where user is a participant\"\"\"",
        "detail": "A_List_Home_Pros.server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.views",
        "description": "A_List_Home_Pros.server.messaging.views",
        "peekOfCode": "class MessageViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing messages\"\"\"\n    serializer_class = MessageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Return only messages from conversations user is part of\"\"\"\n        conversation_id = self.kwargs.get('conversation_pk')\n        if conversation_id:\n            return Message.objects.filter(\n                conversation_id=conversation_id,",
        "detail": "A_List_Home_Pros.server.messaging.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.messaging.views",
        "description": "A_List_Home_Pros.server.messaging.views",
        "peekOfCode": "class NotificationViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"ViewSet for managing notifications\"\"\"\n    serializer_class = NotificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = ['created_at']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        \"\"\"Return only user's notifications\"\"\"\n        return Notification.objects.filter(user=self.request.user)",
        "detail": "A_List_Home_Pros.server.messaging.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.messaging.views",
        "description": "A_List_Home_Pros.server.messaging.views",
        "peekOfCode": "User = get_user_model()\nclass ConversationViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing conversations\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'participants__name', 'participants__email']\n    ordering_fields = ['updated_at', 'created_at']\n    ordering = ['-updated_at']\n    def get_queryset(self):",
        "detail": "A_List_Home_Pros.server.messaging.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.payments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "A_List_Home_Pros.server.payments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.migrations.0002_initial",
        "description": "A_List_Home_Pros.server.payments.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        ('payments', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',",
        "detail": "A_List_Home_Pros.server.payments.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "description": "A_List_Home_Pros.server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('alistpros_profiles', '0001_initial'),\n        ('contractors', '0002_initial'),\n        ('payments', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',",
        "detail": "A_List_Home_Pros.server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.admin",
        "description": "A_List_Home_Pros.server.payments.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client_name', 'pro_name', 'amount_display', 'status_badge', 'description_preview', 'created_at', 'completed_at']\n    list_filter = ['status', 'created_at', 'completed_at']\n    search_fields = ['client__email', 'client__name', 'description', 'stripe_payment_intent_id', 'stripe_transfer_id']\n    readonly_fields = ['created_at', 'updated_at', 'stripe_payment_intent_id', 'stripe_transfer_id']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('client', 'alistpro', 'contractor', 'amount', 'description', 'status')\n        }),\n        ('Stripe Information', {",
        "detail": "A_List_Home_Pros.server.payments.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccountAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.admin",
        "description": "A_List_Home_Pros.server.payments.admin",
        "peekOfCode": "class AListHomeProStripeAccountAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'stripe_account_id', 'onboarding_status', 'is_charges_enabled', 'is_payouts_enabled', 'onboarding_started_at', 'onboarding_completed_at']\n    list_filter = ['is_details_submitted', 'is_charges_enabled', 'is_payouts_enabled', 'onboarding_complete']\n    search_fields = ['user__email', 'user__name', 'stripe_account_id']\n    readonly_fields = ['last_webhook_received_at', 'last_webhook_type', 'onboarding_started_at', 'onboarding_completed_at']\n    fieldsets = (\n        ('User Information', {\n            'fields': ('user', 'stripe_account_id')\n        }),\n        ('Account Status', {",
        "detail": "A_List_Home_Pros.server.payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentsConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.apps",
        "description": "A_List_Home_Pros.server.payments.apps",
        "peekOfCode": "class PaymentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'payments'",
        "detail": "A_List_Home_Pros.server.payments.apps",
        "documentation": {}
    },
    {
        "label": "PaymentStatus",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.models",
        "description": "A_List_Home_Pros.server.payments.models",
        "peekOfCode": "class PaymentStatus(models.TextChoices):\n    PENDING = 'pending', 'Pending'\n    PROCESSING = 'processing', 'Processing'\n    COMPLETED = 'completed', 'Completed'\n    FAILED = 'failed', 'Failed'\n    REFUNDED = 'refunded', 'Refunded'\nclass Payment(TimeStampedModel):\n    \"\"\"\n    Model to track payments between clients and A-List Home Pros\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.models",
        "description": "A_List_Home_Pros.server.payments.models",
        "peekOfCode": "class Payment(TimeStampedModel):\n    \"\"\"\n    Model to track payments between clients and A-List Home Pros\n    \"\"\"\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='payments_made')\n    # Use a string reference to avoid circular import issues\n    alistpro = models.ForeignKey('alistpros_profiles.AListHomeProProfile', on_delete=models.CASCADE, \n                                 related_name='payments_received', null=True, blank=True)\n    # Keep contractor field for backward compatibility\n    contractor = models.ForeignKey('contractors.ContractorProfile', on_delete=models.CASCADE, ",
        "detail": "A_List_Home_Pros.server.payments.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccount",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.models",
        "description": "A_List_Home_Pros.server.payments.models",
        "peekOfCode": "class AListHomeProStripeAccount(TimeStampedModel):\n    \"\"\"\n    Model to track Stripe Connect Express accounts for A-List Home Pros\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_stripe_account')\n    stripe_account_id = models.CharField(max_length=255)\n    is_details_submitted = models.BooleanField(default=False)\n    is_charges_enabled = models.BooleanField(default=False)\n    is_payouts_enabled = models.BooleanField(default=False)\n    onboarding_url = models.TextField(blank=True, null=True)",
        "detail": "A_List_Home_Pros.server.payments.models",
        "documentation": {}
    },
    {
        "label": "StripeAccount",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.models",
        "description": "A_List_Home_Pros.server.payments.models",
        "peekOfCode": "class StripeAccount(AListHomeProStripeAccount):\n    class Meta:\n        proxy = True",
        "detail": "A_List_Home_Pros.server.payments.models",
        "documentation": {}
    },
    {
        "label": "StripeAccountSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.serializers",
        "description": "A_List_Home_Pros.server.payments.serializers",
        "peekOfCode": "class StripeAccountSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Stripe Connect accounts\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = StripeAccount\n        fields = (\n            'id', 'user', 'stripe_account_id', 'is_details_submitted',\n            'is_charges_enabled', 'is_payouts_enabled', 'onboarding_url',",
        "detail": "A_List_Home_Pros.server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.serializers",
        "description": "A_List_Home_Pros.server.payments.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for payments\n    \"\"\"\n    client = UserSerializer(read_only=True)\n    contractor = ContractorProfileSerializer(read_only=True)\n    class Meta:\n        model = Payment\n        fields = (\n            'id', 'client', 'contractor', 'amount', 'description',",
        "detail": "A_List_Home_Pros.server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentCreateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.serializers",
        "description": "A_List_Home_Pros.server.payments.serializers",
        "peekOfCode": "class PaymentCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating payments\n    \"\"\"\n    contractor_id = serializers.IntegerField(write_only=True)\n    client_secret = serializers.CharField(read_only=True)\n    class Meta:\n        model = Payment\n        fields = ('contractor_id', 'amount', 'description', 'client_secret')\n    def validate_amount(self, value):",
        "detail": "A_List_Home_Pros.server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "create_stripe_account",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for a user\n    \"\"\"\n    try:\n        # Create the account\n        account = stripe.Account.create(\n            type=\"express\",\n            country=\"US\",\n            email=user.email,",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "generate_account_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def generate_account_link(stripe_account, request=None):\n    \"\"\"\n    Generate an account link for onboarding\n    \"\"\"\n    try:\n        # Generate a return URL\n        base_url = \"https://www.alistpros.com\"\n        if request:\n            base_url = f\"{request.scheme}://{request.get_host()}\"\n        refresh_url = f\"{base_url}/onboarding/refresh\"",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "check_account_status",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def check_account_status(stripe_account):\n    \"\"\"\n    Check the status of a Stripe account\n    \"\"\"\n    try:\n        account = stripe.Account.retrieve(stripe_account.stripe_account_id)\n        # Update the account status in our database\n        stripe_account.is_details_submitted = account.details_submitted\n        stripe_account.is_charges_enabled = account.charges_enabled\n        stripe_account.is_payouts_enabled = account.payouts_enabled",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "create_payment_intent",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def create_payment_intent(client, contractor, amount, description):\n    \"\"\"\n    Create a payment intent for a client to pay a contractor\n    \"\"\"\n    try:\n        # Check if the contractor has a Stripe account\n        if not hasattr(contractor.user, 'stripe_account'):\n            raise ValueError(\"Contractor does not have a Stripe account\")\n        stripe_account = contractor.user.stripe_account\n        # Check if the contractor's Stripe account is ready to accept payments",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "handle_payment_intent_succeeded",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def handle_payment_intent_succeeded(event):\n    \"\"\"\n    Handle the payment_intent.succeeded webhook event\n    \"\"\"\n    payment_intent = event.data.object\n    try:\n        # Find the payment in our database\n        payment = Payment.objects.get(stripe_payment_intent_id=payment_intent.id)\n        # Update the payment status\n        payment.status = PaymentStatus.COMPLETED",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "handle_account_updated",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "def handle_account_updated(event):\n    \"\"\"\n    Handle the account.updated webhook event\n    \"\"\"\n    account = event.data.object\n    try:\n        # Find the Stripe account in our database\n        stripe_account = StripeAccount.objects.get(stripe_account_id=account.id)\n        # Update the account status\n        stripe_account.is_details_submitted = account.details_submitted",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.stripe_utils",
        "description": "A_List_Home_Pros.server.payments.stripe_utils",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for a user\n    \"\"\"\n    try:\n        # Create the account\n        account = stripe.Account.create(\n            type=\"express\",\n            country=\"US\",",
        "detail": "A_List_Home_Pros.server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.urls",
        "description": "A_List_Home_Pros.server.payments.urls",
        "peekOfCode": "urlpatterns = [\n    # Stripe Connect onboarding for A-List Home Pros\n    path('onboard/', StripeOnboardingView.as_view(), name='stripe-onboarding'),\n    path('status/', StripeAccountStatusView.as_view(), name='stripe-account-status'),\n    path('dashboard-link/', stripe_dashboard_link, name='stripe-dashboard-link'),\n    # Payments\n    path('create/', PaymentCreateView.as_view(), name='payment-create'),\n    path('', PaymentListView.as_view(), name='payment-list'),\n    path('<int:pk>/', PaymentDetailView.as_view(), name='payment-detail'),\n    # Webhook",
        "detail": "A_List_Home_Pros.server.payments.urls",
        "documentation": {}
    },
    {
        "label": "create_stripe_account",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "def create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance\n    \"\"\"\n    try:\n        # Check if the user already has a Stripe account",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "generate_account_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "def generate_account_link(stripe_account, refresh_url, return_url):\n    \"\"\"\n    Generate an account link for onboarding a Stripe Connect Express account\n    Args:\n        stripe_account: The AListHomeProStripeAccount instance\n        refresh_url: URL to redirect to if the link expires\n        return_url: URL to redirect to after onboarding\n    Returns:\n        The account link URL\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "handle_account_updated_webhook",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "def handle_account_updated_webhook(event_data):\n    \"\"\"\n    Handle the account.updated webhook event from Stripe\n    Args:\n        event_data: The webhook event data\n    Returns:\n        The updated AListHomeProStripeAccount instance or None\n    \"\"\"\n    try:\n        account = event_data['data']['object']",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "create_payment_intent",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "def create_payment_intent(client, alistpro, amount, description):\n    \"\"\"\n    Create a payment intent for a client to pay an A-List Home Pro\n    Args:\n        client: The client user\n        alistpro: The A-List Home Pro profile\n        amount: The payment amount in dollars\n        description: The payment description\n    Returns:\n        The created payment intent",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "get_stripe_dashboard_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "def get_stripe_dashboard_link(stripe_account_id):\n    \"\"\"\n    Generate a link to the Stripe dashboard for an A-List Home Pro\n    Args:\n        stripe_account_id: The Stripe account ID\n    Returns:\n        The dashboard link URL\n    \"\"\"\n    try:\n        # Create a login link for the connected account",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Configure Stripe with the API key\nstripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.utils",
        "description": "A_List_Home_Pros.server.payments.utils",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance\n    \"\"\"\n    try:",
        "detail": "A_List_Home_Pros.server.payments.utils",
        "documentation": {}
    },
    {
        "label": "StripeOnboardingView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "class StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user\n        try:\n            # Create or get Stripe account\n            stripe_account = create_stripe_account(user)",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "StripeAccountStatusView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "class StripeAccountStatusView(APIView):\n    \"\"\"\n    Check the status of a Stripe Connect account\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        try:\n            # Get Stripe account\n            try:",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentCreateView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "class PaymentCreateView(APIView):\n    \"\"\"\n    Create a payment from a client to an A-List Home Pro\n    \"\"\"\n    permission_classes = [IsClient]\n    def post(self, request):\n        serializer = PaymentCreateSerializer(data=request.data)\n        if not serializer.is_valid():\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n        pro_id = serializer.validated_data.get('alistpro_id') or serializer.validated_data.get('contractor_id')",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentListView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "class PaymentListView(generics.ListAPIView):\n    \"\"\"\n    List payments for the authenticated user\n    \"\"\"\n    serializer_class = PaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        # For clients, show payments they've made\n        if user.role == 'client':",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "class PaymentDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve a payment\n    \"\"\"\n    serializer_class = PaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        # For clients, show payments they've made\n        if user.role == 'client':",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_webhook",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "def stripe_webhook(request):\n    \"\"\"\n    Handle Stripe webhook events\n    \"\"\"\n    payload = request.body\n    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')\n    try:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n        )",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_dashboard_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "def stripe_dashboard_link(request):\n    \"\"\"\n    Generate a link to the Stripe Express dashboard for an A-List Home Pro\n    \"\"\"\n    user = request.user\n    try:\n        # Get Stripe account\n        try:\n            stripe_account = AListHomeProStripeAccount.objects.get(user=user)\n        except AListHomeProStripeAccount.DoesNotExist:",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Configure Stripe with the API key\nstripe.api_key = settings.STRIPE_SECRET_KEY\nclass StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.payments.views",
        "description": "A_List_Home_Pros.server.payments.views",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\nclass StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user\n        try:\n            # Create or get Stripe account",
        "detail": "A_List_Home_Pros.server.payments.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.scheduling.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[",
        "detail": "A_List_Home_Pros.server.scheduling.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteInline",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.admin",
        "description": "A_List_Home_Pros.server.scheduling.admin",
        "peekOfCode": "class AppointmentNoteInline(admin.TabularInline):\n    model = AppointmentNote\n    extra = 0\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(AvailabilitySlot)\nclass AvailabilitySlotAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'get_day_name', 'start_time', 'end_time', 'is_recurring']\n    list_filter = ['day_of_week', 'is_recurring', 'contractor']\n    search_fields = ['contractor__business_name']\n    readonly_fields = ['created_at', 'updated_at']",
        "detail": "A_List_Home_Pros.server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.admin",
        "description": "A_List_Home_Pros.server.scheduling.admin",
        "peekOfCode": "class AvailabilitySlotAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'get_day_name', 'start_time', 'end_time', 'is_recurring']\n    list_filter = ['day_of_week', 'is_recurring', 'contractor']\n    search_fields = ['contractor__business_name']\n    readonly_fields = ['created_at', 'updated_at']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        return day_names[obj.day_of_week]\n    get_day_name.short_description = 'Day'\n@admin.register(UnavailableDate)",
        "detail": "A_List_Home_Pros.server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "UnavailableDateAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.admin",
        "description": "A_List_Home_Pros.server.scheduling.admin",
        "peekOfCode": "class UnavailableDateAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'reason']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'reason']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(Appointment)\nclass AppointmentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client', 'contractor', 'appointment_date', 'start_time', 'end_time', 'status']\n    list_filter = ['status', 'appointment_date', 'contractor']\n    search_fields = ['client__name', 'contractor__business_name', 'location', 'notes']",
        "detail": "A_List_Home_Pros.server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.admin",
        "description": "A_List_Home_Pros.server.scheduling.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client', 'contractor', 'appointment_date', 'start_time', 'end_time', 'status']\n    list_filter = ['status', 'appointment_date', 'contractor']\n    search_fields = ['client__name', 'contractor__business_name', 'location', 'notes']\n    readonly_fields = ['created_at', 'updated_at']\n    inlines = [AppointmentNoteInline]\n    list_editable = ['status']\n@admin.register(AppointmentNote)\nclass AppointmentNoteAdmin(admin.ModelAdmin):\n    list_display = ['id', 'appointment', 'user', 'note_preview', 'is_private', 'created_at']",
        "detail": "A_List_Home_Pros.server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.admin",
        "description": "A_List_Home_Pros.server.scheduling.admin",
        "peekOfCode": "class AppointmentNoteAdmin(admin.ModelAdmin):\n    list_display = ['id', 'appointment', 'user', 'note_preview', 'is_private', 'created_at']\n    list_filter = ['is_private', 'created_at', 'user']\n    search_fields = ['note', 'user__name', 'appointment__client__name']\n    readonly_fields = ['created_at', 'updated_at']\n    def note_preview(self, obj):\n        return obj.note[:50] + '...' if len(obj.note) > 50 else obj.note\n    note_preview.short_description = 'Note Preview'",
        "detail": "A_List_Home_Pros.server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.models",
        "description": "A_List_Home_Pros.server.scheduling.models",
        "peekOfCode": "class AvailabilitySlot(TimeStampedModel):\n    \"\"\"Time slots when a contractor is available for appointments\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='availability_slots'\n    )\n    day_of_week = models.IntegerField(\n        choices=[\n            (0, 'Monday'),",
        "detail": "A_List_Home_Pros.server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.models",
        "description": "A_List_Home_Pros.server.scheduling.models",
        "peekOfCode": "class UnavailableDate(TimeStampedModel):\n    \"\"\"Specific dates when a contractor is unavailable\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='unavailable_dates'\n    )\n    date = models.DateField()\n    reason = models.CharField(max_length=255, blank=True)\n    class Meta:",
        "detail": "A_List_Home_Pros.server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.models",
        "description": "A_List_Home_Pros.server.scheduling.models",
        "peekOfCode": "class AppointmentStatus(models.TextChoices):\n    REQUESTED = 'REQUESTED', 'Requested'\n    CONFIRMED = 'CONFIRMED', 'Confirmed'\n    COMPLETED = 'COMPLETED', 'Completed'\n    CANCELLED = 'CANCELLED', 'Cancelled'\n    RESCHEDULED = 'RESCHEDULED', 'Rescheduled'\nclass Appointment(TimeStampedModel):\n    \"\"\"Appointment between a client and contractor\"\"\"\n    client = models.ForeignKey(\n        settings.AUTH_USER_MODEL,",
        "detail": "A_List_Home_Pros.server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.models",
        "description": "A_List_Home_Pros.server.scheduling.models",
        "peekOfCode": "class Appointment(TimeStampedModel):\n    \"\"\"Appointment between a client and contractor\"\"\"\n    client = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='appointments'\n    )\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,",
        "detail": "A_List_Home_Pros.server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentNote",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.models",
        "description": "A_List_Home_Pros.server.scheduling.models",
        "peekOfCode": "class AppointmentNote(TimeStampedModel):\n    \"\"\"Notes related to an appointment\"\"\"\n    appointment = models.ForeignKey(\n        Appointment,\n        on_delete=models.CASCADE,\n        related_name='appointment_notes'\n    )\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,",
        "detail": "A_List_Home_Pros.server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class AvailabilitySlotSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor availability slots\"\"\"\n    day_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AvailabilitySlot\n        fields = ['id', 'contractor', 'day_of_week', 'day_name', 'start_time', 'end_time', 'is_recurring']\n        read_only_fields = ['id']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        return day_names[obj.day_of_week]",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "UnavailableDateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class UnavailableDateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor unavailable dates\"\"\"\n    class Meta:\n        model = UnavailableDate\n        fields = ['id', 'contractor', 'date', 'reason']\n        read_only_fields = ['id']\nclass AppointmentNoteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointment notes\"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class AppointmentNoteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointment notes\"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = AppointmentNote\n        fields = ['id', 'appointment', 'user', 'note', 'is_private', 'created_at']\n        read_only_fields = ['id', 'created_at', 'user']\n    def create(self, validated_data):\n        \"\"\"Create a new appointment note with the current user\"\"\"\n        validated_data['user'] = self.context['request'].user",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointments\"\"\"\n    client = UserSerializer(read_only=True)\n    contractor = ContractorProfileSerializer(read_only=True)\n    service_category = ServiceCategorySerializer(read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    notes = AppointmentNoteSerializer(source='appointment_notes', many=True, read_only=True)\n    class Meta:\n        model = Appointment\n        fields = [",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentCreateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class AppointmentCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating appointments\"\"\"\n    class Meta:\n        model = Appointment\n        fields = [\n            'contractor', 'service_category', 'appointment_date', \n            'start_time', 'end_time', 'notes', 'location', 'estimated_cost'\n        ]\n    def validate(self, data):\n        \"\"\"",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentUpdateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "class AppointmentUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for updating appointments\"\"\"\n    class Meta:\n        model = Appointment\n        fields = ['status', 'appointment_date', 'start_time', 'end_time', 'notes', 'location', 'estimated_cost']\n    def validate(self, data):\n        \"\"\"Validate the updated appointment data\"\"\"\n        instance = self.instance\n        appointment_date = data.get('appointment_date', instance.appointment_date)\n        start_time = data.get('start_time', instance.start_time)",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.scheduling.serializers",
        "description": "A_List_Home_Pros.server.scheduling.serializers",
        "peekOfCode": "User = get_user_model()\nclass AvailabilitySlotSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor availability slots\"\"\"\n    day_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AvailabilitySlot\n        fields = ['id', 'contractor', 'day_of_week', 'day_name', 'start_time', 'end_time', 'is_recurring']\n        read_only_fields = ['id']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']",
        "detail": "A_List_Home_Pros.server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.scheduling.urls",
        "description": "A_List_Home_Pros.server.scheduling.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'availability-slots', AvailabilitySlotViewSet, basename='availability-slot')\nrouter.register(r'unavailable-dates', UnavailableDateViewSet, basename='unavailable-date')\nrouter.register(r'appointments', AppointmentViewSet, basename='appointment')\n# Create a nested router for appointment notes\nappointment_router = routers.NestedDefaultRouter(router, r'appointments', lookup='appointment')\nappointment_router.register(r'notes', AppointmentNoteViewSet, basename='appointment-note')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),",
        "detail": "A_List_Home_Pros.server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "appointment_router",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.scheduling.urls",
        "description": "A_List_Home_Pros.server.scheduling.urls",
        "peekOfCode": "appointment_router = routers.NestedDefaultRouter(router, r'appointments', lookup='appointment')\nappointment_router.register(r'notes', AppointmentNoteViewSet, basename='appointment-note')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.scheduling.urls",
        "description": "A_List_Home_Pros.server.scheduling.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),\n]",
        "detail": "A_List_Home_Pros.server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "IsContractorOwnerOrAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.views",
        "description": "A_List_Home_Pros.server.scheduling.views",
        "peekOfCode": "class IsContractorOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of a contractor profile or admins to edit it\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # Check if user is admin\n        if request.user.is_admin:",
        "detail": "A_List_Home_Pros.server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.views",
        "description": "A_List_Home_Pros.server.scheduling.views",
        "peekOfCode": "class AvailabilitySlotViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing contractor availability slots\"\"\"\n    serializer_class = AvailabilitySlotSerializer\n    permission_classes = [permissions.IsAuthenticated, IsContractorOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['contractor', 'day_of_week', 'is_recurring']\n    ordering_fields = ['day_of_week', 'start_time']\n    ordering = ['day_of_week', 'start_time']\n    def get_queryset(self):\n        \"\"\"Return availability slots for contractors or all if admin\"\"\"",
        "detail": "A_List_Home_Pros.server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "UnavailableDateViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.views",
        "description": "A_List_Home_Pros.server.scheduling.views",
        "peekOfCode": "class UnavailableDateViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing contractor unavailable dates\"\"\"\n    serializer_class = UnavailableDateSerializer\n    permission_classes = [permissions.IsAuthenticated, IsContractorOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['contractor', 'date']\n    ordering_fields = ['date']\n    ordering = ['date']\n    def get_queryset(self):\n        \"\"\"Return unavailable dates for contractors or all if admin\"\"\"",
        "detail": "A_List_Home_Pros.server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.views",
        "description": "A_List_Home_Pros.server.scheduling.views",
        "peekOfCode": "class AppointmentViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing appointments\"\"\"\n    permission_classes = [permissions.IsAuthenticated, IsOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter, filters.SearchFilter]\n    filterset_fields = ['contractor', 'client', 'appointment_date', 'status']\n    ordering_fields = ['appointment_date', 'start_time', 'created_at']\n    ordering = ['appointment_date', 'start_time']\n    search_fields = ['notes', 'location']\n    def get_serializer_class(self):\n        \"\"\"Return appropriate serializer class\"\"\"",
        "detail": "A_List_Home_Pros.server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteViewSet",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.scheduling.views",
        "description": "A_List_Home_Pros.server.scheduling.views",
        "peekOfCode": "class AppointmentNoteViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing appointment notes\"\"\"\n    serializer_class = AppointmentNoteSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Return notes for an appointment\"\"\"\n        appointment_id = self.kwargs.get('appointment_pk')\n        # Filter by appointment if provided\n        if appointment_id:\n            queryset = AppointmentNote.objects.filter(appointment_id=appointment_id)",
        "detail": "A_List_Home_Pros.server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.migrations.0001_initial",
        "description": "A_List_Home_Pros.server.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "A_List_Home_Pros.server.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.migrations.0002_customuser_email_verified_and_more",
        "description": "A_List_Home_Pros.server.users.migrations.0002_customuser_email_verified_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customuser',\n            name='email_verified',\n            field=models.BooleanField(default=False, help_text='Designates whether this user has verified their email address.', verbose_name='email verified'),\n        ),",
        "detail": "A_List_Home_Pros.server.users.migrations.0002_customuser_email_verified_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.migrations.0003_alter_customuser_role",
        "description": "A_List_Home_Pros.server.users.migrations.0003_alter_customuser_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_customuser_email_verified_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='role',\n            field=models.CharField(choices=[('client', 'Client'), ('contractor', 'A-List Home Pro'), ('crew', 'Crew'), ('specialist', 'Specialist'), ('admin', 'Admin')], default='client', max_length=20),\n        ),",
        "detail": "A_List_Home_Pros.server.users.migrations.0003_alter_customuser_role",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.admin",
        "description": "A_List_Home_Pros.server.users.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    list_display = ('email', 'name', 'role', 'is_verified', 'is_staff', 'date_joined')\n    list_filter = ('role', 'is_verified', 'is_staff', 'is_superuser')\n    search_fields = ('email', 'name', 'phone_number')\n    ordering = ('email',)\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('name', 'phone_number')}),\n        ('Permissions', {'fields': ('role', 'is_verified', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),",
        "detail": "A_List_Home_Pros.server.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.apps",
        "description": "A_List_Home_Pros.server.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "A_List_Home_Pros.server.users.apps",
        "documentation": {}
    },
    {
        "label": "generate_verification_token",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.users.email_verification",
        "description": "A_List_Home_Pros.server.users.email_verification",
        "peekOfCode": "def generate_verification_token():\n    \"\"\"Generate a secure random token for email verification.\"\"\"\n    return secrets.token_urlsafe(32)\ndef send_verification_email(user):\n    \"\"\"\n    Send a verification email to the user.\n    Args:\n        user: The user to send the verification email to.\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.",
        "detail": "A_List_Home_Pros.server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.users.email_verification",
        "description": "A_List_Home_Pros.server.users.email_verification",
        "peekOfCode": "def send_verification_email(user):\n    \"\"\"\n    Send a verification email to the user.\n    Args:\n        user: The user to send the verification email to.\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.\n    \"\"\"\n    # Create or update verification token\n    verification, created = EmailVerification.objects.update_or_create(",
        "detail": "A_List_Home_Pros.server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "verify_email_token",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.users.email_verification",
        "description": "A_List_Home_Pros.server.users.email_verification",
        "peekOfCode": "def verify_email_token(token):\n    \"\"\"\n    Verify an email verification token.\n    Args:\n        token: The token to verify.\n    Returns:\n        user: The user associated with the token if valid, None otherwise.\n    \"\"\"\n    try:\n        verification = EmailVerification.objects.get(token=token)",
        "detail": "A_List_Home_Pros.server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.models",
        "description": "A_List_Home_Pros.server.users.models",
        "peekOfCode": "class UserRole(models.TextChoices):\n    CLIENT = 'client', _('Client')\n    CONTRACTOR = 'contractor', _('A-List Home Pro')\n    CREW = 'crew', _('Crew')\n    SPECIALIST = 'specialist', _('Specialist')\n    ADMIN = 'admin', _('Admin')\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, name, phone_number, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')",
        "detail": "A_List_Home_Pros.server.users.models",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.models",
        "description": "A_List_Home_Pros.server.users.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, name, phone_number, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, name=name, phone_number=phone_number, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, name, phone_number, password=None, **extra_fields):",
        "detail": "A_List_Home_Pros.server.users.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.models",
        "description": "A_List_Home_Pros.server.users.models",
        "peekOfCode": "class CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(_('email address'), unique=True)\n    name = models.CharField(_('full name'), max_length=150)\n    phone_number = models.CharField(_('phone number'), max_length=20, blank=True)\n    role = models.CharField(\n        max_length=20,\n        choices=UserRole.choices,\n        default=UserRole.CLIENT,\n    )\n    stripe_account_id = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "A_List_Home_Pros.server.users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.models",
        "description": "A_List_Home_Pros.server.users.models",
        "peekOfCode": "class EmailVerification(TimeStampedModel):\n    \"\"\"Model to store email verification tokens.\"\"\"\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='email_verification')\n    token = models.CharField(max_length=100, unique=True)\n    expires_at = models.DateTimeField()\n    def __str__(self):\n        return f\"Email verification for {self.user.email}\"\n    @property\n    def is_admin(self):\n        return self.role == UserRole.ADMIN",
        "detail": "A_List_Home_Pros.server.users.models",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsAdmin(permissions.BasePermission):\n    \"\"\"\n    Permission check for admin users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.ADMIN\nclass IsAListHomePro(permissions.BasePermission):\n    \"\"\"\n    Permission check for A-List Home Pro users.\n    Note: Internally still uses UserRole.CONTRACTOR for backward compatibility.",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsAListHomePro(permissions.BasePermission):\n    \"\"\"\n    Permission check for A-List Home Pro users.\n    Note: Internally still uses UserRole.CONTRACTOR for backward compatibility.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CONTRACTOR\nclass IsClient(permissions.BasePermission):\n    \"\"\"\n    Permission check for client users.",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsClient(permissions.BasePermission):\n    \"\"\"\n    Permission check for client users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CLIENT\nclass IsCrew(permissions.BasePermission):\n    \"\"\"\n    Permission check for crew users.\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsCrew",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsCrew(permissions.BasePermission):\n    \"\"\"\n    Permission check for crew users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CREW\nclass IsSpecialist(permissions.BasePermission):\n    \"\"\"\n    Permission check for specialist users.\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsSpecialist",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsSpecialist(permissions.BasePermission):\n    \"\"\"\n    Permission check for specialist users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.SPECIALIST\nclass IsOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object or admins to edit it.\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.permissions",
        "description": "A_List_Home_Pros.server.users.permissions",
        "peekOfCode": "class IsOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object or admins to edit it.\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        # Admin can edit any object\n        if request.user.role == UserRole.ADMIN:\n            return True\n        # Check if the object has a user attribute that matches the request user\n        if hasattr(obj, 'user'):",
        "detail": "A_List_Home_Pros.server.users.permissions",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the custom user model\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'name', 'phone_number', 'role', 'is_verified', 'date_joined')\n        read_only_fields = ('id', 'is_verified', 'date_joined')\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for user registration\n    \"\"\"\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])\n    password2 = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User\n        fields = ('email', 'name', 'phone_number', 'role', 'password', 'password2')\n        extra_kwargs = {",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordChangeSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "class PasswordChangeSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer for password change\n    \"\"\"\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True, validators=[validate_password])\n    new_password2 = serializers.CharField(required=True)\n    def validate(self, attrs):\n        if attrs['new_password'] != attrs['new_password2']:\n            raise serializers.ValidationError({\"new_password\": \"Password fields didn't match.\"})",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserUpdateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "class UserUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for updating user profile\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('name', 'phone_number')\n        extra_kwargs = {\n            'name': {'required': True},\n            'phone_number': {'required': True}",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "AdminUserUpdateSerializer",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "class AdminUserUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for admin to update user details including role\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('name', 'phone_number', 'role', 'is_verified', 'is_active')",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.users.serializers",
        "description": "A_List_Home_Pros.server.users.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the custom user model\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'name', 'phone_number', 'role', 'is_verified', 'date_joined')\n        read_only_fields = ('id', 'is_verified', 'date_joined')\nclass UserRegistrationSerializer(serializers.ModelSerializer):",
        "detail": "A_List_Home_Pros.server.users.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.users.urls",
        "description": "A_List_Home_Pros.server.users.urls",
        "peekOfCode": "urlpatterns = [\n    # Authentication endpoints\n    path('register/', RegisterView.as_view(), name='register'),\n    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    # User profile endpoints\n    path('me/', UserProfileView.as_view(), name='user_profile'),\n    path('change-password/', PasswordChangeView.as_view(), name='change_password'),\n    # Email verification\n    path('verify-email/<str:token>/<str:user_id>/', VerifyEmailView.as_view(), name='verify_email'),",
        "detail": "A_List_Home_Pros.server.users.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class RegisterView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        # Send verification email\n        send_verification_email(user)",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "VerifyEmailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class VerifyEmailView(APIView):\n    def get(self, request, *args, **kwargs):\n        token = kwargs.get('token')\n        user_id = kwargs.get('user_id')\n        if verify_email_token(token, user_id):\n            return Response({'message': 'Email verified successfully'}, status=status.HTTP_200_OK)\n        else:\n            return Response({'message': 'Invalid verification token'}, status=status.HTTP_400_BAD_REQUEST)\nclass UserProfileView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class UserProfileView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def get_serializer_class(self):\n        if self.request.method == 'PUT' or self.request.method == 'PATCH':\n            return UserUpdateSerializer\n        return UserSerializer\nclass PasswordChangeView(generics.GenericAPIView):",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "PasswordChangeView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class PasswordChangeView(generics.GenericAPIView):\n    serializer_class = PasswordChangeSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            user = request.user\n            if not user.check_password(serializer.validated_data['old_password']):\n                return Response({\"old_password\": [\"Wrong password.\"]}, status=status.HTTP_400_BAD_REQUEST)\n            user.set_password(serializer.validated_data['new_password'])",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "AdminUserListView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class AdminUserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAdmin]\nclass AdminUserDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = User.objects.all()\n    serializer_class = AdminUserUpdateSerializer\n    permission_classes = [IsAdmin]\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "AdminUserDetailView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class AdminUserDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = User.objects.all()\n    serializer_class = AdminUserUpdateSerializer\n    permission_classes = [IsAdmin]\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n        if response.status_code == 200:\n            # Add user info to response\n            user = User.objects.get(email=request.data['email'])",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n        if response.status_code == 200:\n            # Add user info to response\n            user = User.objects.get(email=request.data['email'])\n            user_data = UserSerializer(user).data\n            response.data['user'] = user_data\n        return response",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.users.views",
        "description": "A_List_Home_Pros.server.users.views",
        "peekOfCode": "User = get_user_model()\nclass RegisterView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        # Send verification email",
        "detail": "A_List_Home_Pros.server.users.views",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.check_passwords",
        "description": "A_List_Home_Pros.server.check_passwords",
        "peekOfCode": "def check_password(email, password):\n    \"\"\"Check if password is valid for a user\"\"\"\n    user = authenticate(email=email, password=password)\n    if user is not None:\n        return True\n    return False\ndef check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")\n    print(\"{:<30} {:<20} {:<15}\".format(\"Email\", \"Password\", \"Valid\"))",
        "detail": "A_List_Home_Pros.server.check_passwords",
        "documentation": {}
    },
    {
        "label": "check_all_passwords",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.check_passwords",
        "description": "A_List_Home_Pros.server.check_passwords",
        "peekOfCode": "def check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")\n    print(\"{:<30} {:<20} {:<15}\".format(\"Email\", \"Password\", \"Valid\"))\n    print(\"-\" * 65)\n    # List of users and their expected passwords\n    users_to_check = [\n        {\"email\": \"admin@alistpros.com\", \"password\": \"admin123\"},\n        {\"email\": \"client1@example.com\", \"password\": \"client123\"},\n        {\"email\": \"contractor1@example.com\", \"password\": \"contractor123\"},",
        "detail": "A_List_Home_Pros.server.check_passwords",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.check_passwords",
        "description": "A_List_Home_Pros.server.check_passwords",
        "peekOfCode": "User = get_user_model()\ndef check_password(email, password):\n    \"\"\"Check if password is valid for a user\"\"\"\n    user = authenticate(email=email, password=password)\n    if user is not None:\n        return True\n    return False\ndef check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")",
        "detail": "A_List_Home_Pros.server.check_passwords",
        "documentation": {}
    },
    {
        "label": "check_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.check_users",
        "description": "A_List_Home_Pros.server.check_users",
        "peekOfCode": "def check_users():\n    \"\"\"Check all users in the database\"\"\"\n    print(\"\\n=== Users in the Database ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<15}\".format(\"Email\", \"Name\", \"Role\", \"Is Active\"))\n    print(\"-\" * 80)\n    users = User.objects.all()\n    if not users.exists():\n        print(\"No users found in the database.\")\n        return\n    for user in users:",
        "detail": "A_List_Home_Pros.server.check_users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.check_users",
        "description": "A_List_Home_Pros.server.check_users",
        "peekOfCode": "User = get_user_model()\ndef check_users():\n    \"\"\"Check all users in the database\"\"\"\n    print(\"\\n=== Users in the Database ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<15}\".format(\"Email\", \"Name\", \"Role\", \"Is Active\"))\n    print(\"-\" * 80)\n    users = User.objects.all()\n    if not users.exists():\n        print(\"No users found in the database.\")\n        return",
        "detail": "A_List_Home_Pros.server.check_users",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def generate_random_string(length=10):\n    \"\"\"Generate a random string of letters and digits\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    created_categories = []\n    for category_name in categories:",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create users with different roles\"\"\"\n    print(\"\\n=== Creating Users ===\\n\")\n    # Create admin if it doesn't exist\n    try:\n        admin = User.objects.get(email=\"admin@alistpros.com\")\n        print(f\"Admin already exists: {admin.email}\")\n    except User.DoesNotExist:\n        admin = User.objects.create_user(\n            email=\"admin@alistpros.com\",",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_contractor_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_contractor_profiles(contractors, categories):\n    \"\"\"Create contractor profiles for contractor users\"\"\"\n    print(\"\\n=== Creating Contractor Profiles ===\\n\")\n    profiles = []\n    for i, contractor in enumerate(contractors):\n        try:\n            profile = ContractorProfile.objects.get(user=contractor)\n            print(f\"Contractor profile already exists for: {contractor.email}\")\n        except ContractorProfile.DoesNotExist:\n            profile = ContractorProfile.objects.create(",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_services",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_services(contractor_profiles, categories):\n    \"\"\"Create services offered by contractors - skipped for now\"\"\"\n    print(\"\\n=== Skipping Services Creation ===\\n\")\n    print(\"The Service model doesn't appear to be defined in the current system.\")\ndef create_portfolio_items(contractor_profiles):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for profile in contractor_profiles:\n        # Create 2-4 portfolio items per contractor\n        num_items = random.randint(2, 4)",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_portfolio_items",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_portfolio_items(contractor_profiles):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for profile in contractor_profiles:\n        # Create 2-4 portfolio items per contractor\n        num_items = random.randint(2, 4)\n        for i in range(num_items):\n            try:\n                item = ContractorPortfolio.objects.create(\n                    contractor=profile,",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_reviews(clients, contractor_profiles):\n    \"\"\"Create reviews for contractors\"\"\"\n    print(\"\\n=== Creating Reviews ===\\n\")\n    for profile in contractor_profiles:\n        # Create 1-3 reviews per contractor\n        num_reviews = random.randint(1, 3)\n        reviewers = random.sample(clients, min(num_reviews, len(clients)))\n        for i, client in enumerate(reviewers):\n            try:\n                rating = random.randint(3, 5)  # Mostly positive reviews (3-5 stars)",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_availability",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_availability(contractor_profiles):\n    \"\"\"Create availability schedules for contractors\"\"\"\n    print(\"\\n=== Creating Availability Schedules ===\\n\")\n    day_mapping = {\n        'monday': 0,\n        'tuesday': 1,\n        'wednesday': 2,\n        'thursday': 3,\n        'friday': 4,\n        'saturday': 5,",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_appointments",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_appointments(clients, contractor_profiles):\n    \"\"\"Create appointments between clients and contractors\"\"\"\n    print(\"\\n=== Creating Appointments ===\\n\")\n    statuses = [\n        AppointmentStatus.REQUESTED,\n        AppointmentStatus.CONFIRMED,\n        AppointmentStatus.COMPLETED,\n        AppointmentStatus.CANCELLED\n    ]\n    for profile in contractor_profiles:",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_conversations_and_messages",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_conversations_and_messages(clients, contractors):\n    \"\"\"Create conversations and messages between clients and contractors\"\"\"\n    print(\"\\n=== Creating Conversations and Messages ===\\n\")\n    for client in clients[:3]:  # Limit to first 3 clients\n        for contractor in contractors[:3]:  # Limit to first 3 contractors\n            try:\n                # Create conversation\n                conversation = Conversation.objects.create(\n                    title=f\"Conversation between {client.name} and {contractor.name}\"\n                )",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_notifications(users_dict):\n    \"\"\"Create notifications for users\"\"\"\n    print(\"\\n=== Creating Notifications ===\\n\")\n    all_users = []\n    all_users.extend(users_dict[\"clients\"])\n    all_users.extend(users_dict[\"contractors\"])\n    all_users.extend(users_dict[\"crew_members\"])\n    all_users.extend(users_dict[\"specialists\"])\n    notification_types = [\n        'MESSAGE',",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_email_verifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "def create_email_verifications(users_dict):\n    \"\"\"Create email verification tokens for users\"\"\"\n    print(\"\\n=== Creating Email Verification Tokens ===\\n\")\n    all_users = []\n    all_users.extend(users_dict[\"clients\"])\n    all_users.extend(users_dict[\"contractors\"])\n    all_users.extend(users_dict[\"crew_members\"])\n    all_users.extend(users_dict[\"specialists\"])\n    for user in all_users:\n        token = ''.join(random.choices(string.ascii_letters + string.digits, k=20))",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.create_fake_data",
        "description": "A_List_Home_Pros.server.create_fake_data",
        "peekOfCode": "User = get_user_model()\ndef generate_random_string(length=10):\n    \"\"\"Generate a random string of letters and digits\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", ",
        "detail": "A_List_Home_Pros.server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    for category_name in categories:\n        category, created = ServiceCategory.objects.get_or_create(name=category_name)",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create admin, clients, contractors, crew members, and specialists\"\"\"\n    print(\"\\n=== Creating Users ===\\n\")\n    # Admin user\n    admin_email = \"admin@alistpros.com\"\n    admin, created = User.objects.get_or_create(\n        email=admin_email,\n        defaults={\n            'name': 'Admin User',\n            'phone_number': '555-123-4567',",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_contractor_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_contractor_profiles(contractors):\n    \"\"\"Create contractor profiles for contractor users\"\"\"\n    print(\"\\n=== Creating Contractor Profiles ===\\n\")\n    categories = list(ServiceCategory.objects.all())\n    for contractor in contractors:\n        profile, created = ContractorProfile.objects.get_or_create(\n            user=contractor,\n            defaults={\n                'business_name': f\"{contractor.name}'s Services\",\n                'business_description': f\"Professional services provided by {contractor.name}. Quality work guaranteed.\",",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_portfolio_items",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_portfolio_items(contractors):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for contractor in contractors:\n        profile = ContractorProfile.objects.get(user=contractor)\n        # Create 2-3 portfolio items for each contractor\n        num_items = random.randint(2, 3)\n        for i in range(1, num_items + 1):\n            item, created = ContractorPortfolio.objects.get_or_create(\n                contractor=profile,",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_reviews(contractors):\n    \"\"\"Create reviews for contractors\"\"\"\n    print(\"\\n=== Creating Reviews ===\\n\")\n    clients = User.objects.filter(role=UserRole.CLIENT)\n    # Clear existing reviews to avoid duplicates\n    ContractorReview.objects.all().delete()\n    print(\"Cleared existing reviews\")\n    for contractor in contractors:\n        profile = ContractorProfile.objects.get(user=contractor)\n        # Create 2-3 reviews for each contractor",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_availability",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_availability(contractors):\n    \"\"\"Create availability schedules for contractors\"\"\"\n    print(\"\\n=== Creating Availability Schedules ===\\n\")\n    days_of_week = [0, 1, 2, 3, 4, 5, 6]  # Monday to Sunday\n    # Clear existing availability slots to avoid duplicates\n    AvailabilitySlot.objects.all().delete()\n    UnavailableDate.objects.all().delete()\n    print(\"Cleared existing availability data\")\n    for contractor in contractors:\n        # Get contractor profile",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create sample notifications for users\"\"\"\n    print(\"\\n=== Creating Notifications ===\\n\")\n    # Clear existing notifications to avoid duplicates\n    Notification.objects.all().delete()\n    SMSVerification.objects.all().delete()\n    print(\"Cleared existing notifications and SMS verifications\")\n    notification_types = [\n        'APPOINTMENT',\n        'MESSAGE',",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "def main():\n    \"\"\"Main function to create all initial data\"\"\"\n    print(\"A-List Home Pros Initial Data Creation\")\n    # Create service categories\n    create_service_categories()\n    # Create users\n    contractors = create_users()\n    # Create contractor profiles\n    create_contractor_profiles(contractors)\n    # Create portfolio items",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.create_initial_data",
        "description": "A_List_Home_Pros.server.create_initial_data",
        "peekOfCode": "User = get_user_model()\ndef create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    for category_name in categories:",
        "detail": "A_List_Home_Pros.server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create test users with different roles\"\"\"\n    print(\"Creating test users...\")\n    # Create admin user if it doesn't exist\n    if not User.objects.filter(email='admin@alistpros.com').exists():\n        admin = User.objects.create_superuser(\n            email='admin@alistpros.com',\n            name='Admin User',\n            phone_number='555-123-4567',\n            password='admin123',",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"Creating service categories...\")\n    categories = [\n        {'name': 'Plumbing', 'description': 'All plumbing services including repairs and installations'},\n        {'name': 'Electrical', 'description': 'Electrical installations, repairs, and maintenance'},\n        {'name': 'Carpentry', 'description': 'Custom woodworking, furniture, and structural repairs'},\n        {'name': 'Painting', 'description': 'Interior and exterior painting services'},\n        {'name': 'Landscaping', 'description': 'Garden design, maintenance, and outdoor structures'},\n        {'name': 'HVAC', 'description': 'Heating, ventilation, and air conditioning services'},",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_alistpro_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_alistpro_profiles(alistpro_users, categories):\n    \"\"\"Create A-List Home Pro profiles\"\"\"\n    print(\"Creating A-List Home Pro profiles...\")\n    profiles = []\n    for i, user in enumerate(alistpro_users):\n        # Select 2-3 random categories for each profile\n        selected_categories = random.sample(categories, random.randint(2, 3))\n        profile, created = AListHomeProProfile.objects.get_or_create(\n            user=user,\n            defaults={",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_portfolios",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_portfolios(profiles):\n    \"\"\"Create portfolio items for A-List Home Pro profiles\"\"\"\n    print(\"Creating portfolio items...\")\n    portfolio_items = []\n    for profile in profiles:\n        # Create 2-4 portfolio items for each profile\n        for i in range(random.randint(2, 4)):\n            item, created = AListHomeProPortfolio.objects.get_or_create(\n                alistpro=profile,\n                title=f\"Project {i+1}\",",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_reviews(profiles, client_users):\n    \"\"\"Create reviews for A-List Home Pro profiles\"\"\"\n    print(\"Creating reviews...\")\n    reviews = []\n    for profile in profiles:\n        # Create 1-3 reviews for each profile\n        for i in range(random.randint(1, 3)):\n            # Select a random client\n            client = random.choice(client_users)\n            review, created = AListHomeProReview.objects.get_or_create(",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_appointments",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_appointments(profiles, client_users):\n    \"\"\"Create appointments between clients and A-List Home Pros\"\"\"\n    print(\"Creating appointments...\")\n    appointments = []\n    for client in client_users:\n        # Create 1-2 appointments for each client\n        for i in range(random.randint(1, 2)):\n            # Select a random profile\n            profile = random.choice(profiles)\n            # Random date in the future",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create notifications for users\"\"\"\n    print(\"Creating notifications...\")\n    notifications = []\n    # Flatten users dict\n    all_users = [users['admin']] + users['clients'] + users['alistpros']\n    for user in all_users:\n        # Create 2-5 notifications for each user\n        for i in range(random.randint(2, 5)):\n            # Random notification type",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_conversations",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def create_conversations(client_users, alistpro_users):\n    \"\"\"Create conversations between clients and A-List Home Pros\"\"\"\n    print(\"Creating conversations...\")\n    conversations = []\n    for client in client_users:\n        # Create a conversation with 1-2 random A-List Home Pros\n        for alistpro in random.sample(alistpro_users, random.randint(1, min(2, len(alistpro_users)))):\n            conversation, created = Conversation.objects.get_or_create(\n                client=client,\n                contractor=alistpro",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "def main():\n    \"\"\"Main function to create all test data\"\"\"\n    print(\"=\" * 80)\n    print(\"Creating Test Data for A-List Home Pros Platform\".center(80))\n    print(\"=\" * 80)\n    # Create users\n    users = create_users()\n    # Create service categories\n    categories = create_service_categories()\n    # Create A-List Home Pro profiles",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.create_test_data",
        "description": "A_List_Home_Pros.server.create_test_data",
        "peekOfCode": "User = get_user_model()\ndef create_users():\n    \"\"\"Create test users with different roles\"\"\"\n    print(\"Creating test users...\")\n    # Create admin user if it doesn't exist\n    if not User.objects.filter(email='admin@alistpros.com').exists():\n        admin = User.objects.create_superuser(\n            email='admin@alistpros.com',\n            name='Admin User',\n            phone_number='555-123-4567',",
        "detail": "A_List_Home_Pros.server.create_test_data",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_users_and_tokens",
        "description": "A_List_Home_Pros.server.create_users_and_tokens",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients\n        {",
        "detail": "A_List_Home_Pros.server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_users_and_tokens",
        "description": "A_List_Home_Pros.server.create_users_and_tokens",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients\n        {\n            'email': 'client1@example.com',\n            'name': 'John Client',\n            'phone_number': '1234567890',",
        "detail": "A_List_Home_Pros.server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_users_and_tokens",
        "description": "A_List_Home_Pros.server.create_users_and_tokens",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "A_List_Home_Pros.server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.create_users_and_tokens",
        "description": "A_List_Home_Pros.server.create_users_and_tokens",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients",
        "detail": "A_List_Home_Pros.server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_table",
        "description": "A_List_Home_Pros.server.create_verification_table",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_verification_table():\n    \"\"\"Create email verification table if it doesn't exist\"\"\"\n    print(\"\\n=== Creating Email Verification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master ",
        "detail": "A_List_Home_Pros.server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "create_verification_table",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_table",
        "description": "A_List_Home_Pros.server.create_verification_table",
        "peekOfCode": "def create_verification_table():\n    \"\"\"Create email verification table if it doesn't exist\"\"\"\n    print(\"\\n=== Creating Email Verification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master \n            WHERE type='table' AND name='users_emailverification'\n        \"\"\")\n        if cursor.fetchone():",
        "detail": "A_List_Home_Pros.server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_table",
        "description": "A_List_Home_Pros.server.create_verification_table",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "A_List_Home_Pros.server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "show_all_verification_codes",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_table",
        "description": "A_List_Home_Pros.server.create_verification_table",
        "peekOfCode": "def show_all_verification_codes():\n    \"\"\"Show all verification codes\"\"\"\n    print(\"\\n=== All Verification Codes ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40} {:<20}\".format(\n        \"Email\", \"Name\", \"Role\", \"Verification Token\", \"Expires At\"\n    ))\n    print(\"-\" * 125)\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT u.email, u.name, u.role, v.token, v.expires_at",
        "detail": "A_List_Home_Pros.server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_tokens",
        "description": "A_List_Home_Pros.server.create_verification_tokens",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser \n            WHERE role != 'admin'",
        "detail": "A_List_Home_Pros.server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_tokens",
        "description": "A_List_Home_Pros.server.create_verification_tokens",
        "peekOfCode": "def get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser \n            WHERE role != 'admin'\n        \"\"\")\n        return cursor.fetchall()\ndef create_verification_tokens():",
        "detail": "A_List_Home_Pros.server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.create_verification_tokens",
        "description": "A_List_Home_Pros.server.create_verification_tokens",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = get_all_users()\n    if not users:\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "A_List_Home_Pros.server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.create_verification_tokens",
        "description": "A_List_Home_Pros.server.create_verification_tokens",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "A_List_Home_Pros.server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.fix_email_verification",
        "description": "A_List_Home_Pros.server.fix_email_verification",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master ",
        "detail": "A_List_Home_Pros.server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "fix_email_verification_table",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.fix_email_verification",
        "description": "A_List_Home_Pros.server.fix_email_verification",
        "peekOfCode": "def fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master \n            WHERE type='table' AND name='users_emailverification'\n        \"\"\")\n        if cursor.fetchone():",
        "detail": "A_List_Home_Pros.server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.fix_email_verification",
        "description": "A_List_Home_Pros.server.fix_email_verification",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users except admin\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users:\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "A_List_Home_Pros.server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.fix_email_verification",
        "description": "A_List_Home_Pros.server.fix_email_verification",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"",
        "detail": "A_List_Home_Pros.server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "fix_user_model",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.fix_user_model",
        "description": "A_List_Home_Pros.server.fix_user_model",
        "peekOfCode": "def fix_user_model():\n    \"\"\"Add email_verified column to users_customuser table if it doesn't exist\"\"\"\n    print(\"\\n=== Fixing User Model ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if email_verified column exists\n        cursor.execute(\"PRAGMA table_info(users_customuser)\")\n        columns = [column[1] for column in cursor.fetchall()]\n        if 'email_verified' in columns:\n            print(\"Column 'email_verified' already exists in users_customuser table.\")\n        else:",
        "detail": "A_List_Home_Pros.server.fix_user_model",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.get_verification_codes",
        "description": "A_List_Home_Pros.server.get_verification_codes",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)",
        "detail": "A_List_Home_Pros.server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "get_verification_codes",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.get_verification_codes",
        "description": "A_List_Home_Pros.server.get_verification_codes",
        "peekOfCode": "def get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "A_List_Home_Pros.server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.get_verification_codes",
        "description": "A_List_Home_Pros.server.get_verification_codes",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users if none exist\"\"\"\n    print(\"\\nCreating test users...\\n\")\n    # Check if admin exists\n    try:\n        admin = User.objects.get(email=\"admin@alistpros.com\")\n        print(f\"Admin user already exists: {admin.email}\")\n    except User.DoesNotExist:\n        # Create admin user\n        admin = User.objects.create_user(",
        "detail": "A_List_Home_Pros.server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.get_verification_codes",
        "description": "A_List_Home_Pros.server.get_verification_codes",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin",
        "detail": "A_List_Home_Pros.server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.manage",
        "description": "A_List_Home_Pros.server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'alistpros.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "A_List_Home_Pros.server.manage",
        "documentation": {}
    },
    {
        "label": "reset_passwords",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.reset_passwords",
        "description": "A_List_Home_Pros.server.reset_passwords",
        "peekOfCode": "def reset_passwords():\n    \"\"\"Reset passwords for all users based on their roles\"\"\"\n    print(\"\\n=== Resetting User Passwords ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"New Password\"))\n    print(\"-\" * 85)\n    # Password mapping by role\n    password_map = {\n        'admin': 'admin123',\n        'client': 'client123',\n        'contractor': 'contractor123',",
        "detail": "A_List_Home_Pros.server.reset_passwords",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.reset_passwords",
        "description": "A_List_Home_Pros.server.reset_passwords",
        "peekOfCode": "User = get_user_model()\ndef reset_passwords():\n    \"\"\"Reset passwords for all users based on their roles\"\"\"\n    print(\"\\n=== Resetting User Passwords ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"New Password\"))\n    print(\"-\" * 85)\n    # Password mapping by role\n    password_map = {\n        'admin': 'admin123',\n        'client': 'client123',",
        "detail": "A_List_Home_Pros.server.reset_passwords",
        "documentation": {}
    },
    {
        "label": "show_verification_codes",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.show_verification_codes",
        "description": "A_List_Home_Pros.server.show_verification_codes",
        "peekOfCode": "def show_verification_codes():\n    \"\"\"Show verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "A_List_Home_Pros.server.show_verification_codes",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.show_verification_codes",
        "description": "A_List_Home_Pros.server.show_verification_codes",
        "peekOfCode": "User = get_user_model()\ndef show_verification_codes():\n    \"\"\"Show verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")",
        "detail": "A_List_Home_Pros.server.show_verification_codes",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response: {response.text}\")\n    print(\"-------------------\")\ndef get_auth_token(credentials):",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "get_auth_token",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def get_auth_token(credentials):\n    \"\"\"Get JWT auth token for a user\"\"\"\n    url = f\"{BASE_URL}/users/token/\"\n    response = requests.post(url, json=credentials)\n    if response.status_code == 200:\n        data = response.json()\n        print_success(f\"Login successful for {credentials['email']}\")\n        return data.get(\"access\")\n    else:\n        print_error(f\"Login failed for {credentials['email']}\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_user_profile",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_user_profile(token):\n    \"\"\"Test getting user profile\"\"\"\n    url = f\"{BASE_URL}/users/me/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"User profile retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve user profile\")\n    print_response(response, \"User Profile\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_success(\"Retrieved A-List Home Pro profiles successfully\")\n        print_response(response, \"All A-List Home Pro Profiles\")\n        return True\n    else:",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profile_detail",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_alistpro_profile_detail(alistpro_id=1):\n    \"\"\"Test getting a specific A-List Home Pro profile\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/{alistpro_id}/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_success(f\"Retrieved A-List Home Pro profile {alistpro_id} successfully\")\n        print_response(response, f\"A-List Home Pro Profile {alistpro_id}\")\n        return True\n    else:",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_appointments",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_appointments(token):\n    \"\"\"Test getting appointments\"\"\"\n    url = f\"{BASE_URL}/scheduling/appointments/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Appointments retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve appointments\")\n    print_response(response, \"Appointments\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_conversations",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Conversations retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve conversations\")\n    print_response(response, \"Conversations\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Notifications retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve notifications\")\n    print_response(response, \"Notifications\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_stripe_dashboard_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Stripe dashboard link retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve Stripe dashboard link\")\n    print_response(response, \"Stripe Dashboard Link\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "def main():\n    \"\"\"Main function to run all tests\"\"\"\n    print_header(\"A-List Home Pros API Testing\")\n    print_info(\"Make sure the Django server is running on http://localhost:8000\")\n    results = {}\n    total_tests = 0\n    passed_tests = 0\n    # Authentication tests\n    print_header(\"Authentication Tests\")\n    admin_token = get_auth_token(ADMIN_USER)",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "ADMIN_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "ADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "ALISTPRO_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_api",
        "description": "A_List_Home_Pros.server.test_alistpros_api",
        "peekOfCode": "ALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):",
        "detail": "A_List_Home_Pros.server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user\n    admin_user, created = User.objects.get_or_create(\n        email=\"admin@alistpros.com\",\n        defaults={",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user\n    admin_user, created = User.objects.get_or_create(\n        email=\"admin@alistpros.com\",\n        defaults={\n            \"name\": \"Admin User\",\n            \"phone_number\": \"+1234567890\",\n            \"role\": UserRole.ADMIN,",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories for A-List Home Pros.\"\"\"\n    print_header(\"Creating Service Categories\")\n    categories = [\n        {\"name\": \"Plumbing\", \"description\": \"Water systems, pipes, fixtures\"},\n        {\"name\": \"Electrical\", \"description\": \"Wiring, lighting, electrical systems\"},\n        {\"name\": \"Carpentry\", \"description\": \"Woodworking, framing, cabinetry\"},\n        {\"name\": \"Painting\", \"description\": \"Interior and exterior painting\"},\n        {\"name\": \"Landscaping\", \"description\": \"Lawn care, gardening, outdoor spaces\"},\n    ]",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_alistpro_profile",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def create_alistpro_profile(user, categories):\n    \"\"\"Create an A-List Home Pro profile.\"\"\"\n    print_header(\"Creating A-List Home Pro Profile\")\n    profile, created = AListHomeProProfile.objects.get_or_create(\n        user=user,\n        defaults={\n            \"business_name\": \"Quality Home Services\",\n            \"business_description\": \"Professional home improvement and repair services\",\n            \"years_of_experience\": 10,\n            \"license_number\": \"LIC-12345\",",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def create_reviews(client_user, alistpro_profile):\n    \"\"\"Create reviews for an A-List Home Pro.\"\"\"\n    print_header(\"Creating Reviews\")\n    reviews = [\n        {\n            \"rating\": 5,\n            \"comment\": \"Excellent service! Very professional and completed the work on time.\",\n        },\n        {\n            \"rating\": 4,",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create notifications for users.\"\"\"\n    print_header(\"Creating Notifications\")\n    notifications = [\n        {\n            \"user\": users[\"admin\"],\n            \"type\": \"SYSTEM\",\n            \"title\": \"System Update\",\n            \"message\": \"The system has been updated with new features.\",\n        },",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_authentication_api",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def test_authentication_api():\n    \"\"\"Test authentication API endpoints.\"\"\"\n    print_header(\"Testing Authentication API\")\n    # Test login endpoint\n    users = [\n        {\"email\": \"admin@alistpros.com\", \"password\": \"admin123\", \"role\": \"admin\"},\n        {\"email\": \"client1@example.com\", \"password\": \"client123\", \"role\": \"client\"},\n        {\"email\": \"alistpro1@example.com\", \"password\": \"alistpro123\", \"role\": \"alistpro\"},\n    ]\n    for user in users:",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_alistpros_api",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def test_alistpros_api():\n    \"\"\"Test A-List Home Pros API endpoints.\"\"\"\n    print_header(\"Testing A-List Home Pros API\")\n    # Test list all A-List Home Pros\n    response = requests.get(f\"{BASE_URL}/alistpros/profiles/\")\n    if response.status_code == 200:\n        data = response.json()\n        print_success(f\"Retrieved {len(data)} A-List Home Pro profiles\")\n    else:\n        print_error(\"Failed to retrieve A-List Home Pro profiles\")",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_notifications_api",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def test_notifications_api():\n    \"\"\"Test notifications API endpoints.\"\"\"\n    print_header(\"Testing Notifications API\")\n    for role, token in tokens.items():\n        response = requests.get(\n            f\"{BASE_URL}/notifications/notifications/\",\n            headers={\"Authorization\": f\"Bearer {token['access']}\"}\n        )\n        if response.status_code == 200:\n            data = response.json()",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "def main():\n    \"\"\"Main function to run all tests.\"\"\"\n    print_header(\"A-List Home Pros Integration Test\")\n    try:\n        # Create test data\n        users = create_test_users()\n        categories = create_service_categories()\n        alistpro_profile = create_alistpro_profile(users[\"alistpro\"], categories)\n        create_reviews(users[\"client\"], alistpro_profile)\n        create_notifications(users)",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "User = get_user_model()\n# Test server URL\nBASE_URL = \"http://localhost:8000/api\"\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_alistpros_integration",
        "description": "A_List_Home_Pros.server.test_alistpros_integration",
        "peekOfCode": "tokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):",
        "detail": "A_List_Home_Pros.server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"\n    Generate a random verification code\n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"\n    Get verification codes for all users except admin\n    \"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "get_verification_codes",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def get_verification_codes():\n    \"\"\"\n    Get verification codes for all users except admin\n    \"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to run the tests\n    \"\"\"\n    # Get verification codes\n    get_verification_codes()\n# Run the script\nif __name__ == \"__main__\":\n    main()\nCONTRACTOR_USER = {",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def print_response(response, label):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response: {response.text}\")\n    print(\"-\" * 50)\n    return response.json() if response.status_code < 400 else None",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_register_users",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_register_users():\n    \"\"\"Test user registration for both client and contractor\"\"\"\n    print(\"\\n=== Testing User Registration ===\")\n    # Register client\n    response = requests.post(f\"{BASE_URL}/users/register/\", json=CLIENT_USER)\n    print_response(response, \"Client Registration\")\n    # Register contractor\n    response = requests.post(f\"{BASE_URL}/users/register/\", json=CONTRACTOR_USER)\n    print_response(response, \"Contractor Registration\")\n    return True",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_login",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_login():\n    \"\"\"Test login and JWT token acquisition\"\"\"\n    print(\"\\n=== Testing User Login ===\")\n    # Login as client\n    response = requests.post(f\"{BASE_URL}/users/token/\", json={\n        \"email\": CLIENT_USER[\"email\"],\n        \"password\": CLIENT_USER[\"password\"]\n    })\n    result = print_response(response, \"Client Login\")\n    if result:",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_service_category",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_create_service_category():\n    \"\"\"Test creating a service category (admin function)\"\"\"\n    print(\"\\n=== Testing Service Category Creation ===\")\n    # Use contractor token (normally admin would do this)\n    headers = {\"Authorization\": f\"Bearer {tokens['contractor']}\"}\n    response = requests.post(\n        f\"{BASE_URL}/contractors/service-categories/\",\n        json=SERVICE_CATEGORY,\n        headers=headers\n    )",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_contractor_profile",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_create_contractor_profile():\n    \"\"\"Test creating a contractor profile\"\"\"\n    print(\"\\n=== Testing Contractor Profile Creation ===\")\n    if not ids[\"service_category\"]:\n        print(\"Service category ID not available. Skipping profile creation.\")\n        return False\n    # Create profile data with service category\n    profile_data = CONTRACTOR_PROFILE.copy()\n    profile_data[\"service_categories\"] = [ids[\"service_category\"]]\n    headers = {\"Authorization\": f\"Bearer {tokens['contractor']}\"}",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_update_contractor_profile",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_update_contractor_profile():\n    \"\"\"Test updating a contractor profile\"\"\"\n    print(\"\\n=== Testing Contractor Profile Update ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping profile update.\")\n        return False\n    update_data = {\n        \"business_name\": \"Updated Construction LLC\",\n        \"description\": \"We are an updated test construction company\"\n    }",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_review",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_create_review():\n    \"\"\"Test creating a review for a contractor\"\"\"\n    print(\"\\n=== Testing Review Creation ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping review creation.\")\n        return False\n    review_data = REVIEW_DATA.copy()\n    review_data[\"contractor\"] = ids[\"contractor_profile\"]\n    headers = {\"Authorization\": f\"Bearer {tokens['client']}\"}\n    response = requests.post(",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_contractor_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_get_contractor_profiles():\n    \"\"\"Test getting all contractor profiles\"\"\"\n    print(\"\\n=== Testing Get All Contractor Profiles ===\")\n    response = requests.get(f\"{BASE_URL}/contractors/profiles/\")\n    print_response(response, \"Get All Contractor Profiles\")\n    return response.status_code == 200\ndef test_get_contractor_profile_detail():\n    \"\"\"Test getting a specific contractor profile\"\"\"\n    print(\"\\n=== Testing Get Contractor Profile Detail ===\")\n    if not ids[\"contractor_profile\"]:",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_contractor_profile_detail",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def test_get_contractor_profile_detail():\n    \"\"\"Test getting a specific contractor profile\"\"\"\n    print(\"\\n=== Testing Get Contractor Profile Detail ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping profile detail.\")\n        return False\n    response = requests.get(f\"{BASE_URL}/contractors/profiles/{ids['contractor_profile']}/\")\n    print_response(response, \"Get Contractor Profile Detail\")\n    return response.status_code == 200\ndef run_all_tests():",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "run_all_tests",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "def run_all_tests():\n    \"\"\"Run all API tests in sequence\"\"\"\n    tests = [\n        (\"User Registration\", test_register_users),\n        (\"User Login\", test_login),\n        (\"Service Category Creation\", test_create_service_category),\n        (\"Contractor Profile Creation\", test_create_contractor_profile),\n        (\"Contractor Profile Update\", test_update_contractor_profile),\n        (\"Review Creation\", test_create_review),\n        (\"Get All Contractor Profiles\", test_get_contractor_profiles),",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "User = get_user_model()\n# Base URL for API\nBASE_URL = \"http://localhost:8000/api\"\n# Test data\nCLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\n# Test data\nCLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"\n}\ndef generate_verification_code(length=20):",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"\n}\ndef generate_verification_code(length=20):\n    \"\"\"\n    Generate a random verification code",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "CONTRACTOR_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "CONTRACTOR_USER = {\n    \"email\": \"contractor@example.com\",\n    \"name\": \"Test Contractor\",\n    \"phone_number\": \"0987654321\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CONTRACTOR\"\n}\nCONTRACTOR_PROFILE = {\n    \"business_name\": \"Test Construction LLC\",\n    \"description\": \"We are a test construction company\",",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "CONTRACTOR_PROFILE",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "CONTRACTOR_PROFILE = {\n    \"business_name\": \"Test Construction LLC\",\n    \"description\": \"We are a test construction company\",\n    \"years_in_business\": 5,\n    \"license_number\": \"TEST-12345\",\n    \"insurance_info\": \"Fully insured\",\n    \"service_area\": \"Test City and surrounding areas\"\n}\nREVIEW_DATA = {\n    \"rating\": 4,",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "REVIEW_DATA",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "REVIEW_DATA = {\n    \"rating\": 4,\n    \"comment\": \"Great work, very professional!\",\n}\nSERVICE_CATEGORY = {\n    \"name\": \"Plumbing\",\n    \"description\": \"All plumbing services\"\n}\n# Store tokens and IDs\ntokens = {",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "SERVICE_CATEGORY",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "SERVICE_CATEGORY = {\n    \"name\": \"Plumbing\",\n    \"description\": \"All plumbing services\"\n}\n# Store tokens and IDs\ntokens = {\n    \"client\": None,\n    \"contractor\": None\n}\nids = {",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "tokens = {\n    \"client\": None,\n    \"contractor\": None\n}\nids = {\n    \"contractor_profile\": None,\n    \"service_category\": None,\n    \"review\": None\n}\ndef print_response(response, label):",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "ids",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api",
        "description": "A_List_Home_Pros.server.test_api",
        "peekOfCode": "ids = {\n    \"contractor_profile\": None,\n    \"service_category\": None,\n    \"review\": None\n}\ndef print_response(response, label):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:",
        "detail": "A_List_Home_Pros.server.test_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n=== {label} ===\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response JSON: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response Text: {response.text}\")\n    print(\"-\" * 80)\ndef get_auth_token(credentials):",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "get_auth_token",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def get_auth_token(credentials):\n    \"\"\"Get JWT auth token for a user\"\"\"\n    url = f\"{BASE_URL}/users/token/\"\n    response = requests.post(url, json=credentials)\n    if response.status_code == 200:\n        return response.json().get('access')\n    else:\n        print_response(response, \"Auth Token Error\")\n        return None\ndef test_user_profile(token):",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_user_profile",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_user_profile(token):\n    \"\"\"Test getting user profile\"\"\"\n    url = f\"{BASE_URL}/users/me/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"User Profile\")\n    return response.status_code == 200\ndef test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profiles",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_response(response, \"All A-List Home Pro Profiles\")\n        return True\n    else:\n        # Fall back to the old endpoint for backward compatibility",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profile_detail",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_alistpro_profile_detail(alistpro_id=1):\n    \"\"\"Test getting a specific A-List Home Pro profile\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/{alistpro_id}/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_response(response, f\"A-List Home Pro Profile {alistpro_id}\")\n        return True\n    else:\n        # Fall back to the old endpoint for backward compatibility",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_appointments",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_appointments(token):\n    \"\"\"Test getting appointments\"\"\"\n    url = f\"{BASE_URL}/scheduling/appointments/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Appointments\")\n    return response.status_code == 200\ndef test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_conversations",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Conversations\")\n    return response.status_code == 200\ndef test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_notifications",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Notifications\")\n    return response.status_code == 200\ndef test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_stripe_dashboard_link",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Stripe Dashboard Link\")\n    return response.status_code == 200\ndef run_all_tests():\n    \"\"\"Run all API tests\"\"\"\n    results = {}",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "run_all_tests",
        "kind": 2,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "def run_all_tests():\n    \"\"\"Run all API tests\"\"\"\n    results = {}\n    total_tests = 0\n    passed_tests = 0\n    # Authentication tests\n    print(\"\\n=== Authentication Tests ===\")\n    admin_token = get_auth_token(ADMIN_USER)\n    results[\"Admin Login\"] = admin_token is not None\n    total_tests += 1",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "ADMIN_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "ADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "ALISTPRO_USER",
        "kind": 5,
        "importPath": "A_List_Home_Pros.server.test_api_endpoints",
        "description": "A_List_Home_Pros.server.test_api_endpoints",
        "peekOfCode": "ALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n=== {label} ===\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response JSON: {json.dumps(response.json(), indent=2)}\")",
        "detail": "A_List_Home_Pros.server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.alistpros.asgi",
        "description": "server.alistpros.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.alistpros.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', default='django-insecure-z0yk!o2h=81=di$agvixrz4x*3_=4c7b3s8%1cl-5we_m$i*=n')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY', default='django-insecure-z0yk!o2h=81=di$agvixrz4x*3_=4c7b3s8%1cl-5we_m$i*=n')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "DEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "ROOT_URLCONF = 'alistpros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "WSGI_APPLICATION = 'alistpros.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n# Database configuration\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n# Use DATABASE_URL from .env file\nDATABASE_URL = config('DATABASE_URL', default='sqlite:///db.sqlite3')\nif DATABASE_URL.startswith('postgres'):\n    import dj_database_url\n    DATABASES = {",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "DATABASE_URL = config('DATABASE_URL', default='sqlite:///db.sqlite3')\nif DATABASE_URL.startswith('postgres'):\n    import dj_database_url\n    DATABASES = {\n        'default': dj_database_url.config(\n            default=DATABASE_URL,\n            conn_max_age=600,\n            conn_health_checks=True,\n        )\n    }",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / 'static']\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@alistpros.com')\nSITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "SITE_URL = config('SITE_URL', default='http://localhost:8000')\nFRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "FRONTEND_URL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.CustomUser'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n}",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Stripe settings\nSTRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Stripe settings\nSTRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_PUBLISHABLE_KEY",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')\nSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_WEBHOOK_SECRET",
        "kind": 5,
        "importPath": "server.alistpros.settings",
        "description": "server.alistpros.settings",
        "peekOfCode": "STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')",
        "detail": "server.alistpros.settings",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.alistpros.urls",
        "description": "server.alistpros.urls",
        "peekOfCode": "router = routers.DefaultRouter()\n# Register routes\n# router.register(r'users', UserViewSet)  # UserViewSet is not defined in users.views\nrouter.register(r'alistpros/profiles', AListHomeProProfileViewSet)\n# ServiceCategoryListView is a ListAPIView, not a ModelViewSet, so it can't be registered with router\n# router.register(r'alistpros/categories', ServiceCategoryViewSet)\n# We don't have a ReviewViewSet, we have AListHomeProReviewCreateView which is a CreateAPIView\n# router.register(r'alistpros/reviews', ReviewViewSet)\nrouter.register(r'scheduling/appointments', AppointmentViewSet, basename='appointment')\n# TimeSlotViewSet doesn't exist in scheduling.views",
        "detail": "server.alistpros.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "server.alistpros.urls",
        "description": "server.alistpros.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"A-List Home Pros API\",\n        default_version='v1',\n        description=\"API for A-List Home Pros - connecting homeowners with qualified contractors\",\n        terms_of_service=\"https://www.alistpros.com/terms/\",\n        contact=openapi.Contact(email=\"osamaeldeghadey@gmail.com\"),\n        license=openapi.License(name=\"Proprietary License\"),\n    ),\n    public=True,",
        "detail": "server.alistpros.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.alistpros.urls",
        "description": "server.alistpros.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    # API root\n    path('api/', include(router.urls)),\n    # Swagger/OpenAPI documentation\n    path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    # Authentication endpoints\n    path('api/users/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),",
        "detail": "server.alistpros.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.alistpros.wsgi",
        "description": "server.alistpros.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.alistpros.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.alistpros_profiles.migrations.0001_initial",
        "description": "server.alistpros_profiles.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ServiceCategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.alistpros_profiles.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioInline",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProPortfolioInline(admin.TabularInline):\n    model = AListHomeProPortfolio\n    extra = 0\n    readonly_fields = ['image_preview', 'created_at', 'updated_at']\n    fields = ('title', 'description', 'image', 'image_preview', 'completion_date')\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe(f'<img src=\"{obj.image.url}\" width=\"100\" />')\n        return \"No Image\"\n    image_preview.short_description = 'Preview'",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewInline",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProReviewInline(admin.TabularInline):\n    model = AListHomeProReview\n    extra = 0\n    readonly_fields = ['created_at', 'updated_at']\n    fields = ('client', 'rating', 'comment', 'is_verified', 'created_at')\n    can_delete = False\n@admin.register(ServiceCategory)\nclass ServiceCategoryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'get_pro_count', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryAdmin",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class ServiceCategoryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'get_pro_count', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['name', 'description']\n    readonly_fields = ['created_at', 'updated_at']\n    def get_pro_count(self, obj):\n        return obj.alistpros.count()\n    get_pro_count.short_description = 'Professionals'\n@admin.register(AListHomeProProfile)\nclass AListHomeProProfileAdmin(admin.ModelAdmin):",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileAdmin",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProProfileAdmin(admin.ModelAdmin):\n    list_display = ['id', 'business_name', 'user_email', 'years_of_experience', 'is_onboarded',\n                   'service_radius', 'get_categories', 'profile_image_preview', 'created_at']\n    list_filter = ['is_onboarded', 'years_of_experience', 'service_categories', 'created_at', 'updated_at']\n    search_fields = ['business_name', 'business_description', 'user__email', 'user__name', 'license_number']\n    readonly_fields = ['profile_image_preview', 'created_at', 'updated_at']\n    filter_horizontal = ['service_categories']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('user', 'business_name', 'business_description', 'years_of_experience', 'is_onboarded')",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewAdmin",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProReviewAdmin(admin.ModelAdmin):\n    list_display = ['id', 'alistpro_name', 'client_name', 'rating', 'is_verified', 'created_at']\n    list_filter = ['rating', 'is_verified', 'created_at']\n    search_fields = ['comment', 'client__name', 'client__email', 'alistpro__business_name']\n    readonly_fields = ['created_at', 'updated_at']\n    list_editable = ['is_verified']\n    def alistpro_name(self, obj):\n        return obj.alistpro.business_name\n    alistpro_name.short_description = 'Professional'\n    def client_name(self, obj):",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioAdmin",
        "kind": 6,
        "importPath": "server.alistpros_profiles.admin",
        "description": "server.alistpros_profiles.admin",
        "peekOfCode": "class AListHomeProPortfolioAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'alistpro_name', 'image_preview', 'completion_date', 'created_at']\n    list_filter = ['completion_date', 'created_at']\n    search_fields = ['title', 'description', 'alistpro__business_name']\n    readonly_fields = ['image_preview', 'created_at', 'updated_at']\n    def alistpro_name(self, obj):\n        return obj.alistpro.business_name\n    alistpro_name.short_description = 'Professional'\n    def image_preview(self, obj):\n        if obj.image:",
        "detail": "server.alistpros_profiles.admin",
        "documentation": {}
    },
    {
        "label": "AlistprosProfilesConfig",
        "kind": 6,
        "importPath": "server.alistpros_profiles.apps",
        "description": "server.alistpros_profiles.apps",
        "peekOfCode": "class AlistprosProfilesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'alistpros_profiles'",
        "detail": "server.alistpros_profiles.apps",
        "documentation": {}
    },
    {
        "label": "AListHomeProFilter",
        "kind": 6,
        "importPath": "server.alistpros_profiles.filters",
        "description": "server.alistpros_profiles.filters",
        "peekOfCode": "class AListHomeProFilter(django_filters.FilterSet):\n    \"\"\"\n    Filter for A-List Home Pro profiles\n    \"\"\"\n    business_name = django_filters.CharFilter(lookup_expr='icontains')\n    min_years_experience = django_filters.NumberFilter(field_name='years_of_experience', lookup_expr='gte')\n    service_category = django_filters.NumberFilter(field_name='service_categories', lookup_expr='exact')\n    service_radius = django_filters.NumberFilter(field_name='service_radius', lookup_expr='gte')\n    is_onboarded = django_filters.BooleanFilter()\n    class Meta:",
        "detail": "server.alistpros_profiles.filters",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "kind": 6,
        "importPath": "server.alistpros_profiles.models",
        "description": "server.alistpros_profiles.models",
        "peekOfCode": "class ServiceCategory(TimeStampedModel):\n    \"\"\"\n    Categories of services offered by A-List Home Pros\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = 'Service Categories'",
        "detail": "server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfile",
        "kind": 6,
        "importPath": "server.alistpros_profiles.models",
        "description": "server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProProfile(TimeStampedModel):\n    \"\"\"\n    Extended profile information for A-List Home Pros\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_profile')\n    business_name = models.CharField(max_length=255)\n    business_description = models.TextField(blank=True)\n    years_of_experience = models.PositiveIntegerField(default=0)\n    license_number = models.CharField(max_length=100, blank=True)\n    insurance_info = models.CharField(max_length=255, blank=True)",
        "detail": "server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolio",
        "kind": 6,
        "importPath": "server.alistpros_profiles.models",
        "description": "server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProPortfolio(TimeStampedModel):\n    \"\"\"\n    Portfolio items for A-List Home Pros to showcase their work\n    \"\"\"\n    alistpro = models.ForeignKey(AListHomeProProfile, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    image = models.ImageField(upload_to='alistpro_portfolio/')\n    completion_date = models.DateField(null=True, blank=True)\n    def __str__(self):",
        "detail": "server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProReview",
        "kind": 6,
        "importPath": "server.alistpros_profiles.models",
        "description": "server.alistpros_profiles.models",
        "peekOfCode": "class AListHomeProReview(TimeStampedModel):\n    \"\"\"\n    Reviews for A-List Home Pros left by clients\n    \"\"\"\n    alistpro = models.ForeignKey(AListHomeProProfile, on_delete=models.CASCADE, related_name='reviews')\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_reviews_given')\n    rating = models.PositiveSmallIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])\n    comment = models.TextField()\n    is_verified = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "server.alistpros_profiles.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "kind": 6,
        "importPath": "server.alistpros_profiles.serializers",
        "description": "server.alistpros_profiles.serializers",
        "peekOfCode": "class ServiceCategorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for service categories\n    \"\"\"\n    class Meta:\n        model = ServiceCategory\n        fields = ('id', 'name', 'description', 'created_at')\n        ref_name = \"AListHomeProServiceCategory\"\nclass AListHomeProPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioSerializer",
        "kind": 6,
        "importPath": "server.alistpros_profiles.serializers",
        "description": "server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro portfolio items\n    \"\"\"\n    class Meta:\n        model = AListHomeProPortfolio\n        fields = ('id', 'title', 'description', 'image', 'completion_date', 'created_at')\n        read_only_fields = ('created_at',)\nclass AListHomeProReviewSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewSerializer",
        "kind": 6,
        "importPath": "server.alistpros_profiles.serializers",
        "description": "server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProReviewSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro reviews\n    \"\"\"\n    client_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AListHomeProReview\n        fields = ('id', 'client', 'client_name', 'rating', 'comment', 'is_verified', 'created_at')\n        read_only_fields = ('client', 'is_verified', 'created_at')\n    def get_client_name(self, obj):",
        "detail": "server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileSerializer",
        "kind": 6,
        "importPath": "server.alistpros_profiles.serializers",
        "description": "server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProProfileSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for A-List Home Pro profiles\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    service_categories = ServiceCategorySerializer(many=True, read_only=True)\n    portfolio_items = AListHomeProPortfolioSerializer(many=True, read_only=True)\n    reviews = AListHomeProReviewSerializer(many=True, read_only=True)\n    average_rating = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileCreateUpdateSerializer",
        "kind": 6,
        "importPath": "server.alistpros_profiles.serializers",
        "description": "server.alistpros_profiles.serializers",
        "peekOfCode": "class AListHomeProProfileCreateUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating and updating A-List Home Pro profiles\n    \"\"\"\n    service_category_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        write_only=True,\n        required=False\n    )\n    class Meta:",
        "detail": "server.alistpros_profiles.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.alistpros_profiles.urls",
        "description": "server.alistpros_profiles.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'profiles', views.AListHomeProProfileViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    path('profile-detail/<int:pk>/', views.AListHomeProProfileDetailView.as_view(), name='alistpro-profile-detail'),\n    path('profiles/create/', views.AListHomeProProfileCreateView.as_view(), name='alistpro-profile-create'),\n    path('profiles/update/', views.AListHomeProProfileUpdateView.as_view(), name='alistpro-profile-update'),\n    path('portfolio/', views.AListHomeProPortfolioListCreateView.as_view(), name='alistpro-portfolio-list-create'),\n    path('portfolio/<int:pk>/', views.AListHomeProPortfolioDetailView.as_view(), name='alistpro-portfolio-detail'),",
        "detail": "server.alistpros_profiles.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.alistpros_profiles.urls",
        "description": "server.alistpros_profiles.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    path('profile-detail/<int:pk>/', views.AListHomeProProfileDetailView.as_view(), name='alistpro-profile-detail'),\n    path('profiles/create/', views.AListHomeProProfileCreateView.as_view(), name='alistpro-profile-create'),\n    path('profiles/update/', views.AListHomeProProfileUpdateView.as_view(), name='alistpro-profile-update'),\n    path('portfolio/', views.AListHomeProPortfolioListCreateView.as_view(), name='alistpro-portfolio-list-create'),\n    path('portfolio/<int:pk>/', views.AListHomeProPortfolioDetailView.as_view(), name='alistpro-portfolio-detail'),\n    path('profiles/<int:alistpro_id>/reviews/', views.AListHomeProReviewCreateView.as_view(), name='alistpro-review-create'),\n    path('admin/pending/', views.AdminPendingAListHomeProsView.as_view(), name='admin-pending-alistpros'),",
        "detail": "server.alistpros_profiles.urls",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class ServiceCategoryListView(generics.ListAPIView):\n    \"\"\"\n    List all service categories\n    \"\"\"\n    queryset = ServiceCategory.objects.all()\n    serializer_class = ServiceCategorySerializer\n    permission_classes = [permissions.AllowAny]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['name', 'description']\nclass AListHomeProProfileViewSet(viewsets.ModelViewSet):",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileViewSet",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for A-List Home Pro profiles with advanced filtering\"\"\"\n    queryset = AListHomeProProfile.objects.all()\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = AListHomeProFilter\n    search_fields = ['business_name', 'business_description', 'user__name', 'service_categories__name']\n    ordering_fields = ['business_name', 'years_of_experience', 'created_at']\n    ordering = ['business_name']",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileDetailView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve an A-List Home Pro profile\n    \"\"\"\n    queryset = AListHomeProProfile.objects.all()\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [permissions.AllowAny]\nclass AListHomeProProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create an A-List Home Pro profile (A-List Home Pros only)",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileCreateView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create an A-List Home Pro profile (A-List Home Pros only)\n    \"\"\"\n    serializer_class = AListHomeProProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def perform_create(self, serializer):\n        # Ensure the profile is linked to the current user\n        serializer.save(user=self.request.user)\nclass AListHomeProProfileUpdateView(generics.UpdateAPIView):",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProProfileUpdateView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProProfileUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    Update an A-List Home Pro profile (owner only)\n    \"\"\"\n    serializer_class = AListHomeProProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def get_object(self):\n        return get_object_or_404(AListHomeProProfile, user=self.request.user)\nclass AListHomeProPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioListCreateView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    List and create portfolio items for an A-List Home Pro\n    \"\"\"\n    serializer_class = AListHomeProPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        if self.request.user.role == UserRole.ADMIN:\n            return AListHomeProPortfolio.objects.all()\n        try:",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProPortfolioDetailView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProPortfolioDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    Retrieve, update or delete a portfolio item\n    \"\"\"\n    serializer_class = AListHomeProPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # للحماية من أخطاء Swagger\n        if getattr(self, 'swagger_fake_view', False):\n            return AListHomeProPortfolio.objects.none()",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AListHomeProReviewCreateView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AListHomeProReviewCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a review for an A-List Home Pro (clients only)\n    \"\"\"\n    serializer_class = AListHomeProReviewSerializer\n    permission_classes = [IsClient]\n    def perform_create(self, serializer):\n        alistpro_id = self.kwargs.get('alistpro_id')\n        alistpro_profile = get_object_or_404(AListHomeProProfile, id=alistpro_id)\n        # Check if the client has already reviewed this A-List Home Pro",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "AdminPendingAListHomeProsView",
        "kind": 6,
        "importPath": "server.alistpros_profiles.views",
        "description": "server.alistpros_profiles.views",
        "peekOfCode": "class AdminPendingAListHomeProsView(generics.ListAPIView):\n    \"\"\"\n    List A-List Home Pros that are not yet verified (admin only)\n    \"\"\"\n    serializer_class = AListHomeProProfileSerializer\n    permission_classes = [IsAdmin]\n    def get_queryset(self):\n        return AListHomeProProfile.objects.filter(is_onboarded=False)",
        "detail": "server.alistpros_profiles.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.analytics.migrations.0001_initial",
        "description": "server.analytics.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DashboardStat',\n            fields=[",
        "detail": "server.analytics.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DashboardStatAdmin",
        "kind": 6,
        "importPath": "server.analytics.admin",
        "description": "server.analytics.admin",
        "peekOfCode": "class DashboardStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'date', 'new_users', 'new_contractors', 'new_appointments', 'completed_appointments', 'total_payment_volume']\n    list_filter = ['date']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(ContractorStat)\nclass ContractorStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'profile_views', 'appointment_requests', 'completed_appointments', 'total_earnings', 'average_rating']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'contractor__user__name']\n    readonly_fields = ['created_at', 'updated_at']",
        "detail": "server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "ContractorStatAdmin",
        "kind": 6,
        "importPath": "server.analytics.admin",
        "description": "server.analytics.admin",
        "peekOfCode": "class ContractorStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'profile_views', 'appointment_requests', 'completed_appointments', 'total_earnings', 'average_rating']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'contractor__user__name']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(ServiceCategoryStat)\nclass ServiceCategoryStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'service_category', 'date', 'contractor_count', 'appointment_count', 'average_price']\n    list_filter = ['date', 'service_category']\n    search_fields = ['service_category__name']",
        "detail": "server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStatAdmin",
        "kind": 6,
        "importPath": "server.analytics.admin",
        "description": "server.analytics.admin",
        "peekOfCode": "class ServiceCategoryStatAdmin(admin.ModelAdmin):\n    list_display = ['id', 'service_category', 'date', 'contractor_count', 'appointment_count', 'average_price']\n    list_filter = ['date', 'service_category']\n    search_fields = ['service_category__name']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(UserActivity)\nclass UserActivityAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'activity_type', 'description_preview', 'ip_address', 'created_at']\n    list_filter = ['activity_type', 'created_at']\n    search_fields = ['user__email', 'user__name', 'description', 'ip_address']",
        "detail": "server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "UserActivityAdmin",
        "kind": 6,
        "importPath": "server.analytics.admin",
        "description": "server.analytics.admin",
        "peekOfCode": "class UserActivityAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'activity_type', 'description_preview', 'ip_address', 'created_at']\n    list_filter = ['activity_type', 'created_at']\n    search_fields = ['user__email', 'user__name', 'description', 'ip_address']\n    readonly_fields = ['created_at', 'updated_at']\n    def description_preview(self, obj):\n        return obj.description[:50] + '...' if len(obj.description) > 50 else obj.description\n    description_preview.short_description = 'Description'\n@admin.register(SearchQuery)\nclass SearchQueryAdmin(admin.ModelAdmin):",
        "detail": "server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "SearchQueryAdmin",
        "kind": 6,
        "importPath": "server.analytics.admin",
        "description": "server.analytics.admin",
        "peekOfCode": "class SearchQueryAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'query_preview', 'results_count', 'created_at']\n    list_filter = ['created_at', 'results_count']\n    search_fields = ['user__email', 'user__name', 'query']\n    readonly_fields = ['created_at', 'updated_at']\n    def query_preview(self, obj):\n        return obj.query[:50] + '...' if len(obj.query) > 50 else obj.query\n    query_preview.short_description = 'Query'",
        "detail": "server.analytics.admin",
        "documentation": {}
    },
    {
        "label": "DashboardStat",
        "kind": 6,
        "importPath": "server.analytics.models",
        "description": "server.analytics.models",
        "peekOfCode": "class DashboardStat(TimeStampedModel):\n    \"\"\"Statistics for dashboard display\"\"\"\n    date = models.DateField()\n    new_users = models.IntegerField(default=0)\n    new_contractors = models.IntegerField(default=0)\n    new_appointments = models.IntegerField(default=0)\n    completed_appointments = models.IntegerField(default=0)\n    total_payment_volume = models.DecimalField(max_digits=12, decimal_places=2, default=0)\n    class Meta:\n        ordering = ['-date']",
        "detail": "server.analytics.models",
        "documentation": {}
    },
    {
        "label": "ContractorStat",
        "kind": 6,
        "importPath": "server.analytics.models",
        "description": "server.analytics.models",
        "peekOfCode": "class ContractorStat(TimeStampedModel):\n    \"\"\"Statistics for individual contractors\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='stats'\n    )\n    date = models.DateField()\n    profile_views = models.IntegerField(default=0)\n    appointment_requests = models.IntegerField(default=0)",
        "detail": "server.analytics.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStat",
        "kind": 6,
        "importPath": "server.analytics.models",
        "description": "server.analytics.models",
        "peekOfCode": "class ServiceCategoryStat(TimeStampedModel):\n    \"\"\"Statistics for service categories\"\"\"\n    service_category = models.ForeignKey(\n        ServiceCategory,\n        on_delete=models.CASCADE,\n        related_name='stats'\n    )\n    date = models.DateField()\n    contractor_count = models.IntegerField(default=0)\n    appointment_count = models.IntegerField(default=0)",
        "detail": "server.analytics.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "server.analytics.models",
        "description": "server.analytics.models",
        "peekOfCode": "class UserActivity(TimeStampedModel):\n    \"\"\"Track user activity on the platform\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='activities'\n    )\n    activity_type = models.CharField(max_length=50)\n    description = models.TextField(blank=True)\n    ip_address = models.GenericIPAddressField(null=True, blank=True)",
        "detail": "server.analytics.models",
        "documentation": {}
    },
    {
        "label": "SearchQuery",
        "kind": 6,
        "importPath": "server.analytics.models",
        "description": "server.analytics.models",
        "peekOfCode": "class SearchQuery(TimeStampedModel):\n    \"\"\"Track search queries on the platform\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='search_queries'\n    )\n    query = models.TextField()",
        "detail": "server.analytics.models",
        "documentation": {}
    },
    {
        "label": "DashboardStatSerializer",
        "kind": 6,
        "importPath": "server.analytics.serializers",
        "description": "server.analytics.serializers",
        "peekOfCode": "class DashboardStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for dashboard statistics\"\"\"\n    class Meta:\n        model = DashboardStat\n        fields = [\n            'id', 'date', 'new_users', 'new_contractors', 'new_appointments',\n            'completed_appointments', 'total_payment_volume', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass ContractorStatSerializer(serializers.ModelSerializer):",
        "detail": "server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorStatSerializer",
        "kind": 6,
        "importPath": "server.analytics.serializers",
        "description": "server.analytics.serializers",
        "peekOfCode": "class ContractorStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor statistics\"\"\"\n    class Meta:\n        model = ContractorStat\n        fields = [\n            'id', 'contractor', 'date', 'profile_views', 'appointment_requests',\n            'completed_appointments', 'cancelled_appointments', 'total_earnings',\n            'average_rating', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryStatSerializer",
        "kind": 6,
        "importPath": "server.analytics.serializers",
        "description": "server.analytics.serializers",
        "peekOfCode": "class ServiceCategoryStatSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for service category statistics\"\"\"\n    class Meta:\n        model = ServiceCategoryStat\n        fields = [\n            'id', 'service_category', 'date', 'contractor_count',\n            'appointment_count', 'average_price', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass UserActivitySerializer(serializers.ModelSerializer):",
        "detail": "server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "UserActivitySerializer",
        "kind": 6,
        "importPath": "server.analytics.serializers",
        "description": "server.analytics.serializers",
        "peekOfCode": "class UserActivitySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user activity\"\"\"\n    class Meta:\n        model = UserActivity\n        fields = [\n            'id', 'user', 'activity_type', 'description',\n            'ip_address', 'user_agent', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\nclass SearchQuerySerializer(serializers.ModelSerializer):",
        "detail": "server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "SearchQuerySerializer",
        "kind": 6,
        "importPath": "server.analytics.serializers",
        "description": "server.analytics.serializers",
        "peekOfCode": "class SearchQuerySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for search queries\"\"\"\n    class Meta:\n        model = SearchQuery\n        fields = [\n            'id', 'user', 'query', 'filters', 'results_count', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.analytics.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.analytics.urls",
        "description": "server.analytics.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'dashboard', AnalyticsDashboardViewSet, basename='analytics-dashboard')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "server.analytics.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.analytics.urls",
        "description": "server.analytics.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "server.analytics.urls",
        "documentation": {}
    },
    {
        "label": "AnalyticsDashboardViewSet",
        "kind": 6,
        "importPath": "server.analytics.views",
        "description": "server.analytics.views",
        "peekOfCode": "class AnalyticsDashboardViewSet(viewsets.ViewSet):\n    \"\"\"ViewSet for analytics dashboard data\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=False, methods=['get'])\n    def platform_overview(self, request):\n        \"\"\"Get platform-wide statistics\"\"\"\n        # Only admins can see platform-wide stats\n        if not request.user.is_admin:\n            return Response(\n                {'detail': 'You do not have permission to view platform statistics.'},",
        "detail": "server.analytics.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.analytics.views",
        "description": "server.analytics.views",
        "peekOfCode": "User = get_user_model()\nclass AnalyticsDashboardViewSet(viewsets.ViewSet):\n    \"\"\"ViewSet for analytics dashboard data\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=False, methods=['get'])\n    def platform_overview(self, request):\n        \"\"\"Get platform-wide statistics\"\"\"\n        # Only admins can see platform-wide stats\n        if not request.user.is_admin:\n            return Response(",
        "detail": "server.analytics.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contractors.migrations.0001_initial",
        "description": "server.contractors.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContractorPortfolio',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "server.contractors.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.contractors.migrations.0002_initial",
        "description": "server.contractors.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='contractorprofile',\n            name='user',",
        "detail": "server.contractors.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryAdmin",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ServiceCategoryAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ServiceCategory model\n    واجهة الإدارة لفئات الخدمات\n    \"\"\"\n    list_display = ('name', 'description', 'created_at', 'updated_at', 'contractor_count')\n    search_fields = ('name', 'description')\n    list_filter = ('created_at', 'updated_at')\n    readonly_fields = ('created_at', 'updated_at')\n    def contractor_count(self, obj):",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioInline",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ContractorPortfolioInline(admin.TabularInline):\n    \"\"\"\n    Inline admin for ContractorPortfolio\n    واجهة إدارة مضمنة لمعرض أعمال المقاول\n    \"\"\"\n    model = ContractorPortfolio\n    extra = 1\n    fields = ('title', 'description', 'image', 'completion_date')\nclass ContractorReviewInline(admin.TabularInline):\n    \"\"\"",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorReviewInline",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ContractorReviewInline(admin.TabularInline):\n    \"\"\"\n    Inline admin for ContractorReview\n    واجهة إدارة مضمنة لتقييمات المقاول\n    \"\"\"\n    model = ContractorReview\n    extra = 0\n    fields = ('client', 'rating', 'comment', 'is_verified', 'created_at')\n    readonly_fields = ('created_at',)\n@admin.register(ContractorProfile)",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorProfileAdmin",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ContractorProfileAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorProfile model\n    واجهة الإدارة لملفات المقاولين\n    \"\"\"\n    list_display = ('business_name', 'user_email', 'years_of_experience', \n                   'service_radius', 'is_onboarded', 'profile_image_preview', 'created_at')\n    list_filter = ('is_onboarded', 'years_of_experience', 'service_categories', 'created_at')\n    search_fields = ('business_name', 'business_description', 'user__email', 'license_number')\n    readonly_fields = ('created_at', 'updated_at', 'profile_image_preview')",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioAdmin",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ContractorPortfolioAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorPortfolio model\n    واجهة الإدارة لمعرض أعمال المقاولين\n    \"\"\"\n    list_display = ('title', 'contractor_name', 'image_preview', 'completion_date', 'created_at')\n    list_filter = ('completion_date', 'created_at')\n    search_fields = ('title', 'description', 'contractor__business_name')\n    readonly_fields = ('created_at', 'updated_at', 'image_preview')\n    fieldsets = (",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorReviewAdmin",
        "kind": 6,
        "importPath": "server.contractors.admin",
        "description": "server.contractors.admin",
        "peekOfCode": "class ContractorReviewAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin interface for ContractorReview model\n    واجهة الإدارة لتقييمات المقاولين\n    \"\"\"\n    list_display = ('contractor_name', 'client_name', 'rating_stars', 'comment_excerpt', 'is_verified', 'created_at')\n    list_filter = ('rating', 'is_verified', 'created_at')\n    search_fields = ('comment', 'contractor__business_name', 'client__email')\n    readonly_fields = ('created_at', 'updated_at')\n    list_editable = ('is_verified',)",
        "detail": "server.contractors.admin",
        "documentation": {}
    },
    {
        "label": "ContractorsConfig",
        "kind": 6,
        "importPath": "server.contractors.apps",
        "description": "server.contractors.apps",
        "peekOfCode": "class ContractorsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contractors'",
        "detail": "server.contractors.apps",
        "documentation": {}
    },
    {
        "label": "ContractorFilter",
        "kind": 6,
        "importPath": "server.contractors.filters",
        "description": "server.contractors.filters",
        "peekOfCode": "class ContractorFilter(django_filters.FilterSet):\n    \"\"\"Advanced filter for contractors\"\"\"\n    service_category = django_filters.ModelMultipleChoiceFilter(\n        field_name='service_categories',\n        queryset=ServiceCategory.objects.all(),\n        label='Service Category'\n    )\n    location = django_filters.CharFilter(\n        method='filter_location',\n        label='Location'",
        "detail": "server.contractors.filters",
        "documentation": {}
    },
    {
        "label": "ServiceCategory",
        "kind": 6,
        "importPath": "server.contractors.models",
        "description": "server.contractors.models",
        "peekOfCode": "class ServiceCategory(TimeStampedModel):\n    \"\"\"\n    Categories of services offered by contractors\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = 'Service Categories'",
        "detail": "server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorProfile",
        "kind": 6,
        "importPath": "server.contractors.models",
        "description": "server.contractors.models",
        "peekOfCode": "class ContractorProfile(TimeStampedModel):\n    \"\"\"\n    Extended profile information for contractors\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='contractor_profile')\n    business_name = models.CharField(max_length=255)\n    business_description = models.TextField(blank=True)\n    years_of_experience = models.PositiveIntegerField(default=0)\n    license_number = models.CharField(max_length=100, blank=True)\n    insurance_info = models.CharField(max_length=255, blank=True)",
        "detail": "server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolio",
        "kind": 6,
        "importPath": "server.contractors.models",
        "description": "server.contractors.models",
        "peekOfCode": "class ContractorPortfolio(TimeStampedModel):\n    \"\"\"\n    Portfolio items for contractors to showcase their work\n    \"\"\"\n    contractor = models.ForeignKey(ContractorProfile, on_delete=models.CASCADE, related_name='portfolio_items')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    image = models.ImageField(upload_to='contractor_portfolio/')\n    completion_date = models.DateField(null=True, blank=True)\n    def __str__(self):",
        "detail": "server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ContractorReview",
        "kind": 6,
        "importPath": "server.contractors.models",
        "description": "server.contractors.models",
        "peekOfCode": "class ContractorReview(TimeStampedModel):\n    \"\"\"\n    Reviews for contractors left by clients\n    \"\"\"\n    contractor = models.ForeignKey(ContractorProfile, on_delete=models.CASCADE, related_name='reviews')\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reviews_given')\n    rating = models.PositiveSmallIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])\n    comment = models.TextField()\n    is_verified = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "server.contractors.models",
        "documentation": {}
    },
    {
        "label": "ServiceCategorySerializer",
        "kind": 6,
        "importPath": "server.contractors.serializers",
        "description": "server.contractors.serializers",
        "peekOfCode": "class ServiceCategorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for service categories\n    \"\"\"\n    class Meta:\n        model = ServiceCategory\n        fields = ('id', 'name', 'description', 'created_at')\n        ref_name = \"ContractorServiceCategory\"\nclass ContractorPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioSerializer",
        "kind": 6,
        "importPath": "server.contractors.serializers",
        "description": "server.contractors.serializers",
        "peekOfCode": "class ContractorPortfolioSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor portfolio items\n    \"\"\"\n    class Meta:\n        model = ContractorPortfolio\n        fields = ('id', 'title', 'description', 'image', 'completion_date', 'created_at')\n        read_only_fields = ('created_at',)\nclass ContractorReviewSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorReviewSerializer",
        "kind": 6,
        "importPath": "server.contractors.serializers",
        "description": "server.contractors.serializers",
        "peekOfCode": "class ContractorReviewSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor reviews\n    \"\"\"\n    client_name = serializers.SerializerMethodField()\n    class Meta:\n        model = ContractorReview\n        fields = ('id', 'client', 'client_name', 'rating', 'comment', 'is_verified', 'created_at')\n        read_only_fields = ('client', 'is_verified', 'created_at')\n    def get_client_name(self, obj):",
        "detail": "server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileSerializer",
        "kind": 6,
        "importPath": "server.contractors.serializers",
        "description": "server.contractors.serializers",
        "peekOfCode": "class ContractorProfileSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for contractor profiles\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    service_categories = ServiceCategorySerializer(many=True, read_only=True)\n    portfolio_items = ContractorPortfolioSerializer(many=True, read_only=True)\n    reviews = ContractorReviewSerializer(many=True, read_only=True)\n    average_rating = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "ContractorProfileCreateUpdateSerializer",
        "kind": 6,
        "importPath": "server.contractors.serializers",
        "description": "server.contractors.serializers",
        "peekOfCode": "class ContractorProfileCreateUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating and updating contractor profiles\n    \"\"\"\n    service_category_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        write_only=True,\n        required=False\n    )\n    class Meta:",
        "detail": "server.contractors.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.contractors.urls",
        "description": "server.contractors.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'profiles', views.ContractorProfileViewSet)\nurlpatterns = [\n    # Include router URLs\n    path('', include(router.urls)),\n    # Service categories\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    # Legacy contractor profile endpoints\n    path('profile-detail/<int:pk>/', views.ContractorProfileDetailView.as_view(), name='contractor-profile-detail'),\n    path('profiles/create/', views.ContractorProfileCreateView.as_view(), name='contractor-profile-create'),",
        "detail": "server.contractors.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.contractors.urls",
        "description": "server.contractors.urls",
        "peekOfCode": "urlpatterns = [\n    # Include router URLs\n    path('', include(router.urls)),\n    # Service categories\n    path('services/', views.ServiceCategoryListView.as_view(), name='service-categories'),\n    # Legacy contractor profile endpoints\n    path('profile-detail/<int:pk>/', views.ContractorProfileDetailView.as_view(), name='contractor-profile-detail'),\n    path('profiles/create/', views.ContractorProfileCreateView.as_view(), name='contractor-profile-create'),\n    path('profiles/update/', views.ContractorProfileUpdateView.as_view(), name='contractor-profile-update'),\n    # Portfolio items",
        "detail": "server.contractors.urls",
        "documentation": {}
    },
    {
        "label": "ServiceCategoryListView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ServiceCategoryListView(generics.ListAPIView):\n    \"\"\"\n    List all service categories\n    \"\"\"\n    queryset = ServiceCategory.objects.all()\n    serializer_class = ServiceCategorySerializer\n    permission_classes = [permissions.AllowAny]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['name', 'description']\nclass ContractorProfileViewSet(viewsets.ModelViewSet):",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileViewSet",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorProfileViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for contractor profiles with advanced filtering\"\"\"\n    queryset = ContractorProfile.objects.all()\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = ContractorFilter\n    search_fields = ['business_name', 'description', 'user__name', 'service_categories__name']\n    ordering_fields = ['business_name', 'years_in_business', 'created_at']\n    ordering = ['business_name']",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileDetailView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorProfileDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve a contractor profile\n    \"\"\"\n    queryset = ContractorProfile.objects.all()\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [permissions.AllowAny]\nclass ContractorProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a contractor profile (for contractors only)",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileCreateView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorProfileCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a contractor profile (for contractors only)\n    \"\"\"\n    serializer_class = ContractorProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def perform_create(self, serializer):\n        # Check if user already has a contractor profile\n        if hasattr(self.request.user, 'contractor_profile'):\n            raise serializers.ValidationError({\"detail\": \"You already have a contractor profile\"})",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorProfileUpdateView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorProfileUpdateView(generics.UpdateAPIView):\n    \"\"\"\n    Update a contractor profile (owner only)\n    \"\"\"\n    serializer_class = ContractorProfileCreateUpdateSerializer\n    permission_classes = [IsAListHomePro]\n    def get_object(self):\n        return get_object_or_404(ContractorProfile, user=self.request.user)\nclass ContractorPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioListCreateView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorPortfolioListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    List and create portfolio items for a contractor\n    \"\"\"\n    serializer_class = ContractorPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        contractor_id = self.kwargs.get('contractor_id')\n        return ContractorPortfolio.objects.filter(contractor_id=contractor_id)\n    def perform_create(self, serializer):",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorPortfolioDetailView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorPortfolioDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    Retrieve, update or delete a portfolio item\n    \"\"\"\n    serializer_class = ContractorPortfolioSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        return ContractorPortfolio.objects.all()\n    def check_object_permissions(self, request, obj):\n        # Allow only the contractor who owns this portfolio item or an admin",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "ContractorReviewCreateView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class ContractorReviewCreateView(generics.CreateAPIView):\n    \"\"\"\n    Create a review for a contractor (clients only)\n    \"\"\"\n    serializer_class = ContractorReviewSerializer\n    permission_classes = [IsClient]\n    def perform_create(self, serializer):\n        contractor_id = self.kwargs.get('contractor_id')\n        contractor = get_object_or_404(ContractorProfile, id=contractor_id)\n        # Check if the client has already reviewed this contractor",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "AdminPendingContractorsView",
        "kind": 6,
        "importPath": "server.contractors.views",
        "description": "server.contractors.views",
        "peekOfCode": "class AdminPendingContractorsView(generics.ListAPIView):\n    \"\"\"\n    List contractors that are not yet verified (admin only)\n    \"\"\"\n    serializer_class = ContractorProfileSerializer\n    permission_classes = [IsAdmin]\n    def get_queryset(self):\n        return ContractorProfile.objects.filter(user__is_verified=False)",
        "detail": "server.contractors.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.core.management.commands.create_test_data",
        "description": "server.core.management.commands.create_test_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'\n        )\n        parser.add_argument(",
        "detail": "server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.core.management.commands.create_test_data",
        "description": "server.core.management.commands.create_test_data",
        "peekOfCode": "User = get_user_model()\nfake = Faker()\nclass Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'",
        "detail": "server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "server.core.management.commands.create_test_data",
        "description": "server.core.management.commands.create_test_data",
        "peekOfCode": "fake = Faker()\nclass Command(BaseCommand):\n    help = 'Creates test data for development and testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clients',\n            type=int,\n            default=10,\n            help='Number of client users to create'\n        )",
        "detail": "server.core.management.commands.create_test_data",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.core.migrations.0001_initial",
        "description": "server.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "server.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.core.migrations.0002_initial",
        "description": "server.core.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('core', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='address',\n            name='user',",
        "detail": "server.core.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "server.core.apps",
        "description": "server.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "server.core.apps",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "kind": 6,
        "importPath": "server.core.models",
        "description": "server.core.models",
        "peekOfCode": "class TimeStampedModel(models.Model):\n    \"\"\"\n    An abstract base class model that provides self-updating\n    created and modified fields.\n    \"\"\"\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass Address(TimeStampedModel):",
        "detail": "server.core.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "server.core.models",
        "description": "server.core.models",
        "peekOfCode": "class Address(TimeStampedModel):\n    \"\"\"\n    Model for storing address information\n    \"\"\"\n    street_address = models.CharField(max_length=255)\n    city = models.CharField(max_length=100)\n    state = models.CharField(max_length=100)\n    zip_code = models.CharField(max_length=20)\n    country = models.CharField(max_length=100, default='United States')\n    is_primary = models.BooleanField(default=False)",
        "detail": "server.core.models",
        "documentation": {}
    },
    {
        "label": "LeadsConfig",
        "kind": 6,
        "importPath": "server.leads.apps",
        "description": "server.leads.apps",
        "peekOfCode": "class LeadsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'leads'",
        "detail": "server.leads.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.messaging.migrations.0001_initial",
        "description": "server.messaging.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Conversation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.messaging.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MessageInline",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageInline(admin.TabularInline):\n    model = Message\n    extra = 0\n    readonly_fields = ['sender', 'content', 'created_at', 'updated_at']\n    can_delete = False\n    def has_add_permission(self, request, obj=None):\n        return False\n@admin.register(Conversation)\nclass ConversationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'get_participants', 'created_at', 'updated_at']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "ConversationAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class ConversationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'get_participants', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['title', 'participants__email', 'participants__name']\n    readonly_fields = ['created_at', 'updated_at']\n    filter_horizontal = ['participants']\n    inlines = [MessageInline]\n    def get_participants(self, obj):\n        return \", \".join([user.email for user in obj.participants.all()])\n    get_participants.short_description = 'Participants'",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n    list_display = ['id', 'conversation', 'sender', 'content_preview', 'created_at', 'is_read']\n    list_filter = ['created_at', 'sender']\n    search_fields = ['content', 'sender__email', 'sender__name']\n    readonly_fields = ['created_at', 'updated_at']\n    filter_horizontal = ['read_by']\n    def content_preview(self, obj):\n        return obj.content[:50] + '...' if len(obj.content) > 50 else obj.content\n    content_preview.short_description = 'Content Preview'\n@admin.register(Notification)",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "server.messaging.admin",
        "description": "server.messaging.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'notification_type', 'title', 'read', 'created_at']\n    list_filter = ['notification_type', 'read', 'created_at']\n    search_fields = ['title', 'content', 'user__email', 'user__name']\n    readonly_fields = ['created_at', 'updated_at']\n    list_editable = ['read']",
        "detail": "server.messaging.admin",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class Conversation(TimeStampedModel):\n    \"\"\"A conversation between two users\"\"\"\n    participants = models.ManyToManyField(\n        settings.AUTH_USER_MODEL,\n        related_name='conversations'\n    )\n    title = models.CharField(max_length=255, blank=True)\n    class Meta:\n        ordering = ['-updated_at']\n    def __str__(self):",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class Message(TimeStampedModel):\n    \"\"\"A message within a conversation\"\"\"\n    conversation = models.ForeignKey(\n        Conversation,\n        on_delete=models.CASCADE,\n        related_name='messages'\n    )\n    sender = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "server.messaging.models",
        "description": "server.messaging.models",
        "peekOfCode": "class Notification(TimeStampedModel):\n    \"\"\"System notification for a user\"\"\"\n    NOTIFICATION_TYPES = (\n        ('MESSAGE', 'New Message'),\n        ('REVIEW', 'New Review'),\n        ('PAYMENT', 'Payment Update'),\n        ('SYSTEM', 'System Notification'),\n    )\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,",
        "detail": "server.messaging.models",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Simplified user serializer for messaging\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'name', 'role']\nclass MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)\n    class Meta:",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)\n    class Meta:\n        model = Message\n        fields = ['id', 'sender', 'content', 'created_at', 'is_read']\n        read_only_fields = ['created_at']\nclass ConversationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for conversations\"\"\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for conversations\"\"\"\n    participants = UserBasicSerializer(many=True, read_only=True)\n    last_message = MessageSerializer(read_only=True)\n    unread_count = serializers.SerializerMethodField()\n    class Meta:\n        model = Conversation\n        fields = ['id', 'participants', 'title', 'created_at', 'updated_at', 'last_message', 'unread_count']\n        read_only_fields = ['created_at', 'updated_at']\n    def get_unread_count(self, obj):",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "ConversationCreateSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class ConversationCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating a new conversation\"\"\"\n    participants = serializers.PrimaryKeyRelatedField(\n        queryset=User.objects.all(),\n        many=True,\n        write_only=True\n    )\n    initial_message = serializers.CharField(write_only=True)\n    class Meta:\n        model = Conversation",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "MessageCreateSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class MessageCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating a new message\"\"\"\n    class Meta:\n        model = Message\n        fields = ['id', 'conversation', 'content']\n    def validate_conversation(self, conversation):\n        \"\"\"Ensure user is a participant in the conversation\"\"\"\n        user = self.context['request'].user\n        if user not in conversation.participants.all():\n            raise serializers.ValidationError(\"You are not a participant in this conversation\")",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for notifications\"\"\"\n    class Meta:\n        model = Notification\n        fields = ['id', 'notification_type', 'title', 'content', 'created_at', 'read', \n                  'related_object_id', 'related_object_type']\n        read_only_fields = ['created_at']\n        ref_name = \"MessagingNotification\"",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.messaging.serializers",
        "description": "server.messaging.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Simplified user serializer for messaging\"\"\"\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'name', 'role']\nclass MessageSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for messages\"\"\"\n    sender = UserBasicSerializer(read_only=True)\n    is_read = serializers.BooleanField(read_only=True)",
        "detail": "server.messaging.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.messaging.urls",
        "description": "server.messaging.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'conversations', ConversationViewSet, basename='conversation')\nrouter.register(r'notifications', NotificationViewSet, basename='notification')\n# Create a nested router for messages within conversations\nconversation_router = routers.NestedDefaultRouter(router, r'conversations', lookup='conversation')\nconversation_router.register(r'messages', MessageViewSet, basename='conversation-message')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "conversation_router",
        "kind": 5,
        "importPath": "server.messaging.urls",
        "description": "server.messaging.urls",
        "peekOfCode": "conversation_router = routers.NestedDefaultRouter(router, r'conversations', lookup='conversation')\nconversation_router.register(r'messages', MessageViewSet, basename='conversation-message')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.messaging.urls",
        "description": "server.messaging.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('', include(conversation_router.urls)),\n]",
        "detail": "server.messaging.urls",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class ConversationViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing conversations\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'participants__name', 'participants__email']\n    ordering_fields = ['updated_at', 'created_at']\n    ordering = ['-updated_at']\n    def get_queryset(self):\n        \"\"\"Return only conversations where user is a participant\"\"\"",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "MessageViewSet",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class MessageViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing messages\"\"\"\n    serializer_class = MessageSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Return only messages from conversations user is part of\"\"\"\n        user = self.request.user\n        if user.is_anonymous:\n            return Message.objects.none()\n        conversation_id = self.kwargs.get('conversation_pk')",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "class NotificationViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"ViewSet for managing notifications\"\"\"\n    serializer_class = NotificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = ['created_at']\n    ordering = ['-created_at']\n    def get_queryset(self):\n        \"\"\"Return only user's notifications\"\"\"\n        user = self.request.user",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.messaging.views",
        "description": "server.messaging.views",
        "peekOfCode": "User = get_user_model()\nclass ConversationViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing conversations\"\"\"\n    serializer_class = ConversationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['title', 'participants__name', 'participants__email']\n    ordering_fields = ['updated_at', 'created_at']\n    ordering = ['-updated_at']\n    def get_queryset(self):",
        "detail": "server.messaging.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.notifications.migrations.0001_initial",
        "description": "server.notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NotificationTemplate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.notifications.migrations.0002_alter_notification_notification_type",
        "description": "server.notifications.migrations.0002_alter_notification_notification_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='notification',\n            name='notification_type',\n            field=models.CharField(choices=[('MESSAGE', 'New Message'), ('APPOINTMENT', 'Appointment Update'), ('PAYMENT', 'Payment Update'), ('SYSTEM', 'System Notification'), ('MARKETING', 'Marketing'), ('REGISTRATION', 'User Registration'), ('PROFILE_UPDATE', 'Profile Update'), ('ALISTPRO_ONBOARDING', 'A-List Home Pro Onboarding'), ('ALISTPRO_VERIFICATION', 'A-List Home Pro Verification'), ('REVIEW', 'New Review')], max_length=25),\n        ),",
        "detail": "server.notifications.migrations.0002_alter_notification_notification_type",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateAdmin",
        "kind": 6,
        "importPath": "server.notifications.admin",
        "description": "server.notifications.admin",
        "peekOfCode": "class NotificationTemplateAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'subject', 'email_preview', 'sms_preview', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['name', 'subject', 'description', 'email_body', 'sms_body', 'push_body']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('name', 'description', 'subject')\n        }),\n        ('Message Content', {",
        "detail": "server.notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationSettingAdmin",
        "kind": 6,
        "importPath": "server.notifications.admin",
        "description": "server.notifications.admin",
        "peekOfCode": "class NotificationSettingAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'email_status', 'sms_status', 'push_status', 'created_at', 'updated_at']\n    list_filter = ['email_enabled', 'sms_enabled', 'push_enabled', 'marketing_email', 'created_at']\n    search_fields = ['user__email', 'user__name']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('User', {\n            'fields': ('user',)\n        }),\n        ('Global Settings', {",
        "detail": "server.notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "server.notifications.admin",
        "description": "server.notifications.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'notification_type_badge', 'title', 'message_preview', 'read', 'read_status', 'created_at']\n    list_filter = ['notification_type', 'read', 'email_status', 'sms_status', 'push_status', 'created_at']\n    search_fields = ['user__email', 'user__name', 'title', 'message']\n    readonly_fields = ['created_at', 'updated_at', 'read_at']\n    list_editable = ['read']\n    actions = ['mark_as_read', 'mark_as_unread']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('user', 'notification_type', 'title', 'message')",
        "detail": "server.notifications.admin",
        "documentation": {}
    },
    {
        "label": "SMSVerificationAdmin",
        "kind": 6,
        "importPath": "server.notifications.admin",
        "description": "server.notifications.admin",
        "peekOfCode": "class SMSVerificationAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'phone_number', 'verification_code', 'is_verified', 'expires_at', 'status', 'created_at']\n    list_filter = ['is_verified', 'created_at']\n    search_fields = ['user__email', 'user__name', 'phone_number', 'verification_code']\n    readonly_fields = ['created_at', 'updated_at']\n    def user_email(self, obj):\n        return obj.user.email\n    user_email.short_description = 'User'\n    def status(self, obj):\n        if obj.is_verified:",
        "detail": "server.notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "kind": 6,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "class NotificationTemplate(TimeStampedModel):\n    \"\"\"Template for notifications\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    subject = models.CharField(max_length=255)\n    email_body = models.TextField()\n    sms_body = models.TextField(blank=True)\n    push_body = models.TextField(blank=True)\n    class Meta:\n        ordering = ['name']",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSetting",
        "kind": 6,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "class NotificationSetting(TimeStampedModel):\n    \"\"\"User notification preferences\"\"\"\n    user = models.OneToOneField(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='notification_settings'\n    )\n    email_enabled = models.BooleanField(default=True)\n    sms_enabled = models.BooleanField(default=False)\n    push_enabled = models.BooleanField(default=True)",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "class Notification(TimeStampedModel):\n    \"\"\"System notification record\"\"\"\n    NOTIFICATION_TYPES = (\n        ('MESSAGE', 'New Message'),\n        ('APPOINTMENT', 'Appointment Update'),\n        ('PAYMENT', 'Payment Update'),\n        ('SYSTEM', 'System Notification'),\n        ('MARKETING', 'Marketing'),\n        ('REGISTRATION', 'User Registration'),\n        ('PROFILE_UPDATE', 'Profile Update'),",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "SMSVerification",
        "kind": 6,
        "importPath": "server.notifications.models",
        "description": "server.notifications.models",
        "peekOfCode": "class SMSVerification(TimeStampedModel):\n    \"\"\"SMS verification codes\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='sms_verifications'\n    )\n    phone_number = models.CharField(max_length=20)\n    verification_code = models.CharField(max_length=10)\n    is_verified = models.BooleanField(default=False)",
        "detail": "server.notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationTemplateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for notification templates\"\"\"\n    class Meta:\n        model = NotificationTemplate\n        fields = [\n            'id', 'name', 'description', 'subject', \n            'email_body', 'sms_body', 'push_body',\n            'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationSettingSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationSettingSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user notification settings\"\"\"\n    class Meta:\n        model = NotificationSetting\n        fields = [\n            'id', 'user', 'email_enabled', 'sms_enabled', 'push_enabled',\n            'new_message_email', 'new_message_sms', 'new_message_push',\n            'appointment_reminder_email', 'appointment_reminder_sms', 'appointment_reminder_push',\n            'appointment_status_change_email', 'appointment_status_change_sms', 'appointment_status_change_push',\n            'payment_email', 'payment_sms', 'payment_push',",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for notifications\"\"\"\n    class Meta:\n        model = Notification\n        fields = [\n            'id', 'user', 'notification_type', 'title', 'message',\n            'read', 'read_at', 'related_object_type', 'related_object_id',\n            'email_status', 'sms_status', 'push_status',\n            'created_at', 'updated_at'\n        ]",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "SMSVerificationSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class SMSVerificationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for SMS verification\"\"\"\n    class Meta:\n        model = SMSVerification\n        fields = [\n            'id', 'user', 'phone_number', 'verification_code',\n            'is_verified', 'expires_at', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'expires_at', 'created_at', 'updated_at']\n        extra_kwargs = {",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "VerifyPhoneNumberSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class VerifyPhoneNumberSerializer(serializers.Serializer):\n    \"\"\"Serializer for verifying phone number\"\"\"\n    phone_number = serializers.CharField(max_length=20)\n    verification_code = serializers.CharField(max_length=10)\nclass NotificationBulkMarkReadSerializer(serializers.Serializer):\n    \"\"\"Serializer for marking multiple notifications as read\"\"\"\n    notification_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        min_length=1\n    )",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationBulkMarkReadSerializer",
        "kind": 6,
        "importPath": "server.notifications.serializers",
        "description": "server.notifications.serializers",
        "peekOfCode": "class NotificationBulkMarkReadSerializer(serializers.Serializer):\n    \"\"\"Serializer for marking multiple notifications as read\"\"\"\n    notification_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        min_length=1\n    )",
        "detail": "server.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.notifications.urls",
        "description": "server.notifications.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'templates', NotificationTemplateViewSet, basename='notification-template')\nrouter.register(r'settings', NotificationSettingViewSet, basename='notification-setting')\nrouter.register(r'notifications', NotificationViewSet, basename='notification')\nrouter.register(r'sms', SMSVerificationViewSet, basename='sms-verification')\nurlpatterns = [\n    path('', include(router.urls)),\n    # Test and trigger endpoints\n    path('test/', create_test_notification, name='test-notification'),\n    path('trigger/registration/', trigger_registration_notification, name='trigger-registration-notification'),",
        "detail": "server.notifications.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.notifications.urls",
        "description": "server.notifications.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    # Test and trigger endpoints\n    path('test/', create_test_notification, name='test-notification'),\n    path('trigger/registration/', trigger_registration_notification, name='trigger-registration-notification'),\n    path('trigger/alistpro-onboarding/', trigger_alistpro_onboarding_notification, name='trigger-alistpro-onboarding-notification'),\n    path('trigger/profile-update/', trigger_profile_update_notification, name='trigger-profile-update-notification'),\n    path('trigger/alistpro-verification/', trigger_alistpro_verification_notification, name='trigger-alistpro-verification-notification'),\n]",
        "detail": "server.notifications.urls",
        "documentation": {}
    },
    {
        "label": "create_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_notification(user, notification_type, title, message, related_object_type=None, related_object_id=None):\n    \"\"\"\n    Create a new notification for a user\n    Args:\n        user: The user to notify\n        notification_type: Type of notification (from Notification.NOTIFICATION_TYPES)\n        title: Notification title\n        message: Notification message\n        related_object_type: Optional related object type (e.g., 'appointment', 'message')\n        related_object_id: Optional related object ID",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "create_registration_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_registration_notification(user):\n    \"\"\"Create a notification for a new user registration\"\"\"\n    return create_notification(\n        user=user,\n        notification_type='REGISTRATION',\n        title='Welcome to A-List Home Pros!',\n        message=f'Thank you for registering, {user.name}! Your account has been created successfully.'\n    )\ndef create_alistpro_onboarding_notification(user):\n    \"\"\"Create a notification for A-List Home Pro onboarding\"\"\"",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "create_alistpro_onboarding_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_alistpro_onboarding_notification(user):\n    \"\"\"Create a notification for A-List Home Pro onboarding\"\"\"\n    return create_notification(\n        user=user,\n        notification_type='ALISTPRO_ONBOARDING',\n        title='Start Your A-List Home Pro Onboarding',\n        message='Welcome to A-List Home Pros! Please complete your profile to start receiving job requests.'\n    )\ndef create_profile_update_notification(user):\n    \"\"\"Create a notification for profile updates\"\"\"",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "create_profile_update_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_profile_update_notification(user):\n    \"\"\"Create a notification for profile updates\"\"\"\n    return create_notification(\n        user=user,\n        notification_type='PROFILE_UPDATE',\n        title='Profile Updated',\n        message='Your profile has been updated successfully.'\n    )\ndef create_alistpro_verification_notification(user, verified=False):\n    \"\"\"Create a notification for A-List Home Pro verification status\"\"\"",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "create_alistpro_verification_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_alistpro_verification_notification(user, verified=False):\n    \"\"\"Create a notification for A-List Home Pro verification status\"\"\"\n    if verified:\n        title = 'Profile Verified!'\n        message = 'Congratulations! Your A-List Home Pro profile has been verified. You can now receive job requests.'\n    else:\n        title = 'Profile Verification Update'\n        message = 'Your A-List Home Pro profile verification is in progress. We will notify you once it is complete.'\n    return create_notification(\n        user=user,",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "create_new_review_notification",
        "kind": 2,
        "importPath": "server.notifications.utils",
        "description": "server.notifications.utils",
        "peekOfCode": "def create_new_review_notification(user, reviewer_name, rating):\n    \"\"\"Create a notification for a new review\"\"\"\n    return create_notification(\n        user=user,\n        notification_type='REVIEW',\n        title='New Review Received',\n        message=f'You received a new {rating}-star review from {reviewer_name}.'\n    )",
        "detail": "server.notifications.utils",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateViewSet",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationTemplateViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for notification templates (admin only)\"\"\"\n    queryset = NotificationTemplate.objects.all()\n    serializer_class = NotificationTemplateSerializer\n    permission_classes = [IsAdmin]\nclass NotificationSettingViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for user notification settings\"\"\"\n    serializer_class = NotificationSettingSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationSettingViewSet",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationSettingViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for user notification settings\"\"\"\n    serializer_class = NotificationSettingSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Return notification settings for current user only\"\"\"\n        if getattr(self, 'swagger_fake_view', False):\n            return NotificationSetting.objects.none()\n        return NotificationSetting.objects.filter(user=self.request.user)\n    def get_object(self):",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class NotificationViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    API endpoint for managing user notifications.\n    \"\"\"\n    serializer_class = NotificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"\n        Return notifications for the current user.\n        \"\"\"",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "SMSVerificationViewSet",
        "kind": 6,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "class SMSVerificationViewSet(viewsets.GenericViewSet):\n    \"\"\"ViewSet for SMS verification\"\"\"\n    serializer_class = SMSVerificationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=False, methods=['post'])\n    def send_verification(self, request):\n        \"\"\"Send SMS verification code\"\"\"\n        phone_number = request.data.get('phone_number')\n        if not phone_number:\n            return Response(",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "create_test_notification",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def create_test_notification(request):\n    \"\"\"Create a test notification for the current user\"\"\"\n    notification = create_notification(\n        user=request.user,\n        notification_type='SYSTEM',\n        title='Test Notification',\n        message='This is a test notification created at ' + timezone.now().strftime('%Y-%m-%d %H:%M:%S')\n    )\n    return Response({\n        'status': 'success',",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "trigger_registration_notification",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def trigger_registration_notification(request):\n    \"\"\"Trigger a registration notification for the current user\"\"\"\n    notification = create_registration_notification(request.user)\n    return Response({\n        'status': 'success',\n        'notification_id': notification.id\n    })\n@api_view(['POST'])\n@permission_classes([IsAListHomePro])\ndef trigger_alistpro_onboarding_notification(request):",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "trigger_alistpro_onboarding_notification",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def trigger_alistpro_onboarding_notification(request):\n    \"\"\"Trigger an A-List Home Pro onboarding notification for the current user\"\"\"\n    notification = create_alistpro_onboarding_notification(request.user)\n    return Response({\n        'status': 'success',\n        'notification_id': notification.id\n    })\n@api_view(['POST'])\n@permission_classes([permissions.IsAuthenticated])\ndef trigger_profile_update_notification(request):",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "trigger_profile_update_notification",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def trigger_profile_update_notification(request):\n    \"\"\"Trigger a profile update notification for the current user\"\"\"\n    notification = create_profile_update_notification(request.user)\n    return Response({\n        'status': 'success',\n        'notification_id': notification.id\n    })\n@api_view(['POST'])\n@permission_classes([IsAdmin])\ndef trigger_alistpro_verification_notification(request):",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "trigger_alistpro_verification_notification",
        "kind": 2,
        "importPath": "server.notifications.views",
        "description": "server.notifications.views",
        "peekOfCode": "def trigger_alistpro_verification_notification(request):\n    \"\"\"Trigger an A-List Home Pro verification notification\"\"\"\n    alistpro_id = request.data.get('alistpro_id')\n    is_verified = request.data.get('is_verified', False)\n    if not alistpro_id:\n        return Response(\n            {'detail': 'A-List Home Pro ID is required'},\n            status=status.HTTP_400_BAD_REQUEST\n        )\n    try:",
        "detail": "server.notifications.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.payments.migrations.0001_initial",
        "description": "server.payments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "server.payments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.payments.migrations.0002_initial",
        "description": "server.payments.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        ('payments', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',",
        "detail": "server.payments.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "description": "server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('alistpros_profiles', '0001_initial'),\n        ('contractors', '0002_initial'),\n        ('payments', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',",
        "detail": "server.payments.migrations.0003_payment_alistpro_alter_payment_contractor_and_more",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client_name', 'pro_name', 'amount_display', 'status_badge', 'description_preview', 'created_at', 'completed_at']\n    list_filter = ['status', 'created_at', 'completed_at']\n    search_fields = ['client__email', 'client__name', 'description', 'stripe_payment_intent_id', 'stripe_transfer_id']\n    readonly_fields = ['created_at', 'updated_at', 'stripe_payment_intent_id', 'stripe_transfer_id']\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('client', 'alistpro', 'contractor', 'amount', 'description', 'status')\n        }),\n        ('Stripe Information', {",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccountAdmin",
        "kind": 6,
        "importPath": "server.payments.admin",
        "description": "server.payments.admin",
        "peekOfCode": "class AListHomeProStripeAccountAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'stripe_account_id', 'onboarding_status', 'is_charges_enabled', 'is_payouts_enabled', 'onboarding_started_at', 'onboarding_completed_at']\n    list_filter = ['is_details_submitted', 'is_charges_enabled', 'is_payouts_enabled', 'onboarding_complete']\n    search_fields = ['user__email', 'user__name', 'stripe_account_id']\n    readonly_fields = ['last_webhook_received_at', 'last_webhook_type', 'onboarding_started_at', 'onboarding_completed_at']\n    fieldsets = (\n        ('User Information', {\n            'fields': ('user', 'stripe_account_id')\n        }),\n        ('Account Status', {",
        "detail": "server.payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentsConfig",
        "kind": 6,
        "importPath": "server.payments.apps",
        "description": "server.payments.apps",
        "peekOfCode": "class PaymentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'payments'",
        "detail": "server.payments.apps",
        "documentation": {}
    },
    {
        "label": "PaymentStatus",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class PaymentStatus(models.TextChoices):\n    PENDING = 'pending', 'Pending'\n    PROCESSING = 'processing', 'Processing'\n    COMPLETED = 'completed', 'Completed'\n    FAILED = 'failed', 'Failed'\n    REFUNDED = 'refunded', 'Refunded'\nclass Payment(TimeStampedModel):\n    \"\"\"\n    Model to track payments between clients and A-List Home Pros\n    \"\"\"",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class Payment(TimeStampedModel):\n    \"\"\"\n    Model to track payments between clients and A-List Home Pros\n    \"\"\"\n    client = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='payments_made')\n    # Use a string reference to avoid circular import issues\n    alistpro = models.ForeignKey('alistpros_profiles.AListHomeProProfile', on_delete=models.CASCADE, \n                                 related_name='payments_received', null=True, blank=True)\n    # Keep contractor field for backward compatibility\n    contractor = models.ForeignKey('contractors.ContractorProfile', on_delete=models.CASCADE, ",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "AListHomeProStripeAccount",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class AListHomeProStripeAccount(TimeStampedModel):\n    \"\"\"\n    Model to track Stripe Connect Express accounts for A-List Home Pros\n    \"\"\"\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='alistpro_stripe_account')\n    stripe_account_id = models.CharField(max_length=255)\n    is_details_submitted = models.BooleanField(default=False)\n    is_charges_enabled = models.BooleanField(default=False)\n    is_payouts_enabled = models.BooleanField(default=False)\n    onboarding_url = models.TextField(blank=True, null=True)",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "StripeAccount",
        "kind": 6,
        "importPath": "server.payments.models",
        "description": "server.payments.models",
        "peekOfCode": "class StripeAccount(AListHomeProStripeAccount):\n    class Meta:\n        proxy = True",
        "detail": "server.payments.models",
        "documentation": {}
    },
    {
        "label": "StripeAccountSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class StripeAccountSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Stripe Connect accounts\n    \"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = StripeAccount\n        fields = (\n            'id', 'user', 'stripe_account_id', 'is_details_submitted',\n            'is_charges_enabled', 'is_payouts_enabled', 'onboarding_url',",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for payments\n    \"\"\"\n    client = UserSerializer(read_only=True)\n    contractor = ContractorProfileSerializer(read_only=True)\n    class Meta:\n        model = Payment\n        fields = (\n            'id', 'client', 'contractor', 'amount', 'description',",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentCreateSerializer",
        "kind": 6,
        "importPath": "server.payments.serializers",
        "description": "server.payments.serializers",
        "peekOfCode": "class PaymentCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating payments\n    \"\"\"\n    contractor_id = serializers.IntegerField(write_only=True)\n    client_secret = serializers.CharField(read_only=True)\n    class Meta:\n        model = Payment\n        fields = ('contractor_id', 'amount', 'description', 'client_secret')\n    def validate_amount(self, value):",
        "detail": "server.payments.serializers",
        "documentation": {}
    },
    {
        "label": "create_stripe_account",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for a user\n    \"\"\"\n    try:\n        # Create the account\n        account = stripe.Account.create(\n            type=\"express\",\n            country=\"US\",\n            email=user.email,",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "generate_account_link",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def generate_account_link(stripe_account, request=None):\n    \"\"\"\n    Generate an account link for onboarding\n    \"\"\"\n    try:\n        # Generate a return URL\n        base_url = \"https://www.alistpros.com\"\n        if request:\n            base_url = f\"{request.scheme}://{request.get_host()}\"\n        refresh_url = f\"{base_url}/onboarding/refresh\"",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "check_account_status",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def check_account_status(stripe_account):\n    \"\"\"\n    Check the status of a Stripe account\n    \"\"\"\n    try:\n        account = stripe.Account.retrieve(stripe_account.stripe_account_id)\n        # Update the account status in our database\n        stripe_account.is_details_submitted = account.details_submitted\n        stripe_account.is_charges_enabled = account.charges_enabled\n        stripe_account.is_payouts_enabled = account.payouts_enabled",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "create_payment_intent",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def create_payment_intent(client, contractor, amount, description):\n    \"\"\"\n    Create a payment intent for a client to pay a contractor\n    \"\"\"\n    try:\n        # Check if the contractor has a Stripe account\n        if not hasattr(contractor.user, 'stripe_account'):\n            raise ValueError(\"Contractor does not have a Stripe account\")\n        stripe_account = contractor.user.stripe_account\n        # Check if the contractor's Stripe account is ready to accept payments",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "handle_payment_intent_succeeded",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def handle_payment_intent_succeeded(event):\n    \"\"\"\n    Handle the payment_intent.succeeded webhook event\n    \"\"\"\n    payment_intent = event.data.object\n    try:\n        # Find the payment in our database\n        payment = Payment.objects.get(stripe_payment_intent_id=payment_intent.id)\n        # Update the payment status\n        payment.status = PaymentStatus.COMPLETED",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "handle_account_updated",
        "kind": 2,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "def handle_account_updated(event):\n    \"\"\"\n    Handle the account.updated webhook event\n    \"\"\"\n    account = event.data.object\n    try:\n        # Find the Stripe account in our database\n        stripe_account = StripeAccount.objects.get(stripe_account_id=account.id)\n        # Update the account status\n        stripe_account.is_details_submitted = account.details_submitted",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "server.payments.stripe_utils",
        "description": "server.payments.stripe_utils",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for a user\n    \"\"\"\n    try:\n        # Create the account\n        account = stripe.Account.create(\n            type=\"express\",\n            country=\"US\",",
        "detail": "server.payments.stripe_utils",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.payments.urls",
        "description": "server.payments.urls",
        "peekOfCode": "urlpatterns = [\n    # Stripe Connect onboarding for A-List Home Pros\n    path('onboard/', StripeOnboardingView.as_view(), name='stripe-onboarding'),\n    path('status/', StripeAccountStatusView.as_view(), name='stripe-account-status'),\n    path('dashboard-link/', stripe_dashboard_link, name='stripe-dashboard-link'),\n    # Payments\n    path('create/', PaymentCreateView.as_view(), name='payment-create'),\n    path('', PaymentListView.as_view(), name='payment-list'),\n    path('<int:pk>/', PaymentDetailView.as_view(), name='payment-detail'),\n    # Webhook",
        "detail": "server.payments.urls",
        "documentation": {}
    },
    {
        "label": "create_stripe_account",
        "kind": 2,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "def create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance\n    \"\"\"\n    try:\n        # Check if the user already has a Stripe account",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "generate_account_link",
        "kind": 2,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "def generate_account_link(stripe_account, refresh_url, return_url):\n    \"\"\"\n    Generate an account link for onboarding a Stripe Connect Express account\n    Args:\n        stripe_account: The AListHomeProStripeAccount instance\n        refresh_url: URL to redirect to if the link expires\n        return_url: URL to redirect to after onboarding\n    Returns:\n        The account link URL\n    \"\"\"",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "handle_account_updated_webhook",
        "kind": 2,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "def handle_account_updated_webhook(event_data):\n    \"\"\"\n    Handle the account.updated webhook event from Stripe\n    Args:\n        event_data: The webhook event data\n    Returns:\n        The updated AListHomeProStripeAccount instance or None\n    \"\"\"\n    try:\n        account = event_data['data']['object']",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "create_payment_intent",
        "kind": 2,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "def create_payment_intent(client, alistpro, amount, description):\n    \"\"\"\n    Create a payment intent for a client to pay an A-List Home Pro\n    Args:\n        client: The client user\n        alistpro: The A-List Home Pro profile\n        amount: The payment amount in dollars\n        description: The payment description\n    Returns:\n        The created payment intent",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "get_stripe_dashboard_link",
        "kind": 2,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "def get_stripe_dashboard_link(stripe_account_id):\n    \"\"\"\n    Generate a link to the Stripe dashboard for an A-List Home Pro\n    Args:\n        stripe_account_id: The Stripe account ID\n    Returns:\n        The dashboard link URL\n    \"\"\"\n    try:\n        # Create a login link for the connected account",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Configure Stripe with the API key\nstripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "server.payments.utils",
        "description": "server.payments.utils",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\ndef create_stripe_account(user):\n    \"\"\"\n    Create a Stripe Connect Express account for an A-List Home Pro\n    Args:\n        user: The user to create the account for\n    Returns:\n        The created AListHomeProStripeAccount instance\n    \"\"\"\n    try:",
        "detail": "server.payments.utils",
        "documentation": {}
    },
    {
        "label": "StripeOnboardingView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user\n        try:\n            # Create or get Stripe account\n            stripe_account = create_stripe_account(user)",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "StripeAccountStatusView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class StripeAccountStatusView(APIView):\n    \"\"\"\n    Check the status of a Stripe Connect account\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        try:\n            # Get Stripe account\n            try:",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentCreateView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentCreateView(APIView):\n    \"\"\"\n    Create a payment from a client to an A-List Home Pro\n    \"\"\"\n    permission_classes = [IsClient]\n    def post(self, request):\n        serializer = PaymentCreateSerializer(data=request.data)\n        if not serializer.is_valid():\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n        pro_id = serializer.validated_data.get('alistpro_id') or serializer.validated_data.get('contractor_id')",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentListView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentListView(generics.ListAPIView):\n    \"\"\"\n    List payments for the authenticated user\n    \"\"\"\n    serializer_class = PaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        # For clients, show payments they've made\n        if user.role == 'client':",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentDetailView",
        "kind": 6,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "class PaymentDetailView(generics.RetrieveAPIView):\n    \"\"\"\n    Retrieve a payment\n    \"\"\"\n    serializer_class = PaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        # للحماية من أخطاء Swagger\n        if getattr(self, 'swagger_fake_view', False):\n            return Payment.objects.none()",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_webhook",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def stripe_webhook(request):\n    \"\"\"\n    Handle Stripe webhook events\n    \"\"\"\n    payload = request.body\n    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')\n    try:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n        )",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_dashboard_link",
        "kind": 2,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "def stripe_dashboard_link(request):\n    \"\"\"\n    Generate a link to the Stripe Express dashboard for an A-List Home Pro\n    \"\"\"\n    user = request.user\n    try:\n        # Get Stripe account\n        try:\n            stripe_account = AListHomeProStripeAccount.objects.get(user=user)\n        except AListHomeProStripeAccount.DoesNotExist:",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Configure Stripe with the API key\nstripe.api_key = settings.STRIPE_SECRET_KEY\nclass StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "server.payments.views",
        "description": "server.payments.views",
        "peekOfCode": "stripe.api_key = settings.STRIPE_SECRET_KEY\nclass StripeOnboardingView(APIView):\n    \"\"\"\n    Initiate Stripe Connect onboarding for A-List Home Pros\n    \"\"\"\n    permission_classes = [IsAListHomePro]\n    def post(self, request):\n        user = request.user\n        try:\n            # Create or get Stripe account",
        "detail": "server.payments.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.scheduling.migrations.0001_initial",
        "description": "server.scheduling.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contractors', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[",
        "detail": "server.scheduling.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteInline",
        "kind": 6,
        "importPath": "server.scheduling.admin",
        "description": "server.scheduling.admin",
        "peekOfCode": "class AppointmentNoteInline(admin.TabularInline):\n    model = AppointmentNote\n    extra = 0\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(AvailabilitySlot)\nclass AvailabilitySlotAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'get_day_name', 'start_time', 'end_time', 'is_recurring']\n    list_filter = ['day_of_week', 'is_recurring', 'contractor']\n    search_fields = ['contractor__business_name']\n    readonly_fields = ['created_at', 'updated_at']",
        "detail": "server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotAdmin",
        "kind": 6,
        "importPath": "server.scheduling.admin",
        "description": "server.scheduling.admin",
        "peekOfCode": "class AvailabilitySlotAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'get_day_name', 'start_time', 'end_time', 'is_recurring']\n    list_filter = ['day_of_week', 'is_recurring', 'contractor']\n    search_fields = ['contractor__business_name']\n    readonly_fields = ['created_at', 'updated_at']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        return day_names[obj.day_of_week]\n    get_day_name.short_description = 'Day'\n@admin.register(UnavailableDate)",
        "detail": "server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "UnavailableDateAdmin",
        "kind": 6,
        "importPath": "server.scheduling.admin",
        "description": "server.scheduling.admin",
        "peekOfCode": "class UnavailableDateAdmin(admin.ModelAdmin):\n    list_display = ['id', 'contractor', 'date', 'reason']\n    list_filter = ['date', 'contractor']\n    search_fields = ['contractor__business_name', 'reason']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(Appointment)\nclass AppointmentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client', 'contractor', 'appointment_date', 'start_time', 'end_time', 'status']\n    list_filter = ['status', 'appointment_date', 'contractor']\n    search_fields = ['client__name', 'contractor__business_name', 'location', 'notes']",
        "detail": "server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "server.scheduling.admin",
        "description": "server.scheduling.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ['id', 'client', 'contractor', 'appointment_date', 'start_time', 'end_time', 'status']\n    list_filter = ['status', 'appointment_date', 'contractor']\n    search_fields = ['client__name', 'contractor__business_name', 'location', 'notes']\n    readonly_fields = ['created_at', 'updated_at']\n    inlines = [AppointmentNoteInline]\n    list_editable = ['status']\n@admin.register(AppointmentNote)\nclass AppointmentNoteAdmin(admin.ModelAdmin):\n    list_display = ['id', 'appointment', 'user', 'note_preview', 'is_private', 'created_at']",
        "detail": "server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteAdmin",
        "kind": 6,
        "importPath": "server.scheduling.admin",
        "description": "server.scheduling.admin",
        "peekOfCode": "class AppointmentNoteAdmin(admin.ModelAdmin):\n    list_display = ['id', 'appointment', 'user', 'note_preview', 'is_private', 'created_at']\n    list_filter = ['is_private', 'created_at', 'user']\n    search_fields = ['note', 'user__name', 'appointment__client__name']\n    readonly_fields = ['created_at', 'updated_at']\n    def note_preview(self, obj):\n        return obj.note[:50] + '...' if len(obj.note) > 50 else obj.note\n    note_preview.short_description = 'Note Preview'",
        "detail": "server.scheduling.admin",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlot",
        "kind": 6,
        "importPath": "server.scheduling.models",
        "description": "server.scheduling.models",
        "peekOfCode": "class AvailabilitySlot(TimeStampedModel):\n    \"\"\"Time slots when a contractor is available for appointments\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='availability_slots'\n    )\n    day_of_week = models.IntegerField(\n        choices=[\n            (0, 'Monday'),",
        "detail": "server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "UnavailableDate",
        "kind": 6,
        "importPath": "server.scheduling.models",
        "description": "server.scheduling.models",
        "peekOfCode": "class UnavailableDate(TimeStampedModel):\n    \"\"\"Specific dates when a contractor is unavailable\"\"\"\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,\n        related_name='unavailable_dates'\n    )\n    date = models.DateField()\n    reason = models.CharField(max_length=255, blank=True)\n    class Meta:",
        "detail": "server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "kind": 6,
        "importPath": "server.scheduling.models",
        "description": "server.scheduling.models",
        "peekOfCode": "class AppointmentStatus(models.TextChoices):\n    REQUESTED = 'REQUESTED', 'Requested'\n    CONFIRMED = 'CONFIRMED', 'Confirmed'\n    COMPLETED = 'COMPLETED', 'Completed'\n    CANCELLED = 'CANCELLED', 'Cancelled'\n    RESCHEDULED = 'RESCHEDULED', 'Rescheduled'\nclass Appointment(TimeStampedModel):\n    \"\"\"Appointment between a client and contractor\"\"\"\n    client = models.ForeignKey(\n        settings.AUTH_USER_MODEL,",
        "detail": "server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "server.scheduling.models",
        "description": "server.scheduling.models",
        "peekOfCode": "class Appointment(TimeStampedModel):\n    \"\"\"Appointment between a client and contractor\"\"\"\n    client = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='appointments'\n    )\n    contractor = models.ForeignKey(\n        ContractorProfile,\n        on_delete=models.CASCADE,",
        "detail": "server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AppointmentNote",
        "kind": 6,
        "importPath": "server.scheduling.models",
        "description": "server.scheduling.models",
        "peekOfCode": "class AppointmentNote(TimeStampedModel):\n    \"\"\"Notes related to an appointment\"\"\"\n    appointment = models.ForeignKey(\n        Appointment,\n        on_delete=models.CASCADE,\n        related_name='appointment_notes'\n    )\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,",
        "detail": "server.scheduling.models",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class AvailabilitySlotSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor availability slots\"\"\"\n    day_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AvailabilitySlot\n        fields = ['id', 'contractor', 'day_of_week', 'day_name', 'start_time', 'end_time', 'is_recurring']\n        read_only_fields = ['id']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        return day_names[obj.day_of_week]",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "UnavailableDateSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class UnavailableDateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor unavailable dates\"\"\"\n    class Meta:\n        model = UnavailableDate\n        fields = ['id', 'contractor', 'date', 'reason']\n        read_only_fields = ['id']\nclass AppointmentNoteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointment notes\"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class AppointmentNoteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointment notes\"\"\"\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = AppointmentNote\n        fields = ['id', 'appointment', 'user', 'note', 'is_private', 'created_at']\n        read_only_fields = ['id', 'created_at', 'user']\n    def create(self, validated_data):\n        \"\"\"Create a new appointment note with the current user\"\"\"\n        validated_data['user'] = self.context['request'].user",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for appointments\"\"\"\n    client = UserSerializer(read_only=True)\n    contractor = ContractorProfileSerializer(read_only=True)\n    service_category = ServiceCategorySerializer(read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    notes = AppointmentNoteSerializer(source='appointment_notes', many=True, read_only=True)\n    class Meta:\n        model = Appointment\n        fields = [",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentCreateSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class AppointmentCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating appointments\"\"\"\n    class Meta:\n        model = Appointment\n        fields = [\n            'contractor', 'service_category', 'appointment_date', \n            'start_time', 'end_time', 'notes', 'location', 'estimated_cost'\n        ]\n    def validate(self, data):\n        \"\"\"",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentUpdateSerializer",
        "kind": 6,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "class AppointmentUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for updating appointments\"\"\"\n    class Meta:\n        model = Appointment\n        fields = ['status', 'appointment_date', 'start_time', 'end_time', 'notes', 'location', 'estimated_cost']\n    def validate(self, data):\n        \"\"\"Validate the updated appointment data\"\"\"\n        instance = self.instance\n        appointment_date = data.get('appointment_date', instance.appointment_date)\n        start_time = data.get('start_time', instance.start_time)",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.scheduling.serializers",
        "description": "server.scheduling.serializers",
        "peekOfCode": "User = get_user_model()\nclass AvailabilitySlotSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for contractor availability slots\"\"\"\n    day_name = serializers.SerializerMethodField()\n    class Meta:\n        model = AvailabilitySlot\n        fields = ['id', 'contractor', 'day_of_week', 'day_name', 'start_time', 'end_time', 'is_recurring']\n        read_only_fields = ['id']\n    def get_day_name(self, obj):\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']",
        "detail": "server.scheduling.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.scheduling.urls",
        "description": "server.scheduling.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'availability-slots', AvailabilitySlotViewSet, basename='availability-slot')\nrouter.register(r'unavailable-dates', UnavailableDateViewSet, basename='unavailable-date')\nrouter.register(r'appointments', AppointmentViewSet, basename='appointment')\n# Create a nested router for appointment notes\nappointment_router = routers.NestedDefaultRouter(router, r'appointments', lookup='appointment')\nappointment_router.register(r'notes', AppointmentNoteViewSet, basename='appointment-note')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),",
        "detail": "server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "appointment_router",
        "kind": 5,
        "importPath": "server.scheduling.urls",
        "description": "server.scheduling.urls",
        "peekOfCode": "appointment_router = routers.NestedDefaultRouter(router, r'appointments', lookup='appointment')\nappointment_router.register(r'notes', AppointmentNoteViewSet, basename='appointment-note')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),\n]",
        "detail": "server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.scheduling.urls",
        "description": "server.scheduling.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('', include(appointment_router.urls)),\n]",
        "detail": "server.scheduling.urls",
        "documentation": {}
    },
    {
        "label": "IsContractorOwnerOrAdmin",
        "kind": 6,
        "importPath": "server.scheduling.views",
        "description": "server.scheduling.views",
        "peekOfCode": "class IsContractorOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of a contractor profile or admins to edit it\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # Check if user is admin\n        if request.user.is_admin:",
        "detail": "server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AvailabilitySlotViewSet",
        "kind": 6,
        "importPath": "server.scheduling.views",
        "description": "server.scheduling.views",
        "peekOfCode": "class AvailabilitySlotViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing contractor availability slots\"\"\"\n    serializer_class = AvailabilitySlotSerializer\n    permission_classes = [permissions.IsAuthenticated, IsContractorOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['contractor', 'day_of_week', 'is_recurring']\n    ordering_fields = ['day_of_week', 'start_time']\n    ordering = ['day_of_week', 'start_time']\n    def get_queryset(self):\n        \"\"\"Return availability slots for contractors or all if admin\"\"\"",
        "detail": "server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "UnavailableDateViewSet",
        "kind": 6,
        "importPath": "server.scheduling.views",
        "description": "server.scheduling.views",
        "peekOfCode": "class UnavailableDateViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing contractor unavailable dates\"\"\"\n    serializer_class = UnavailableDateSerializer\n    permission_classes = [permissions.IsAuthenticated, IsContractorOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['contractor', 'date']\n    ordering_fields = ['date']\n    ordering = ['date']\n    def get_queryset(self):\n        \"\"\"Return unavailable dates for contractors or all if admin\"\"\"",
        "detail": "server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "kind": 6,
        "importPath": "server.scheduling.views",
        "description": "server.scheduling.views",
        "peekOfCode": "class AppointmentViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing appointments\"\"\"\n    permission_classes = [permissions.IsAuthenticated, IsOwnerOrAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter, filters.SearchFilter]\n    filterset_fields = ['contractor', 'client', 'appointment_date', 'status']\n    ordering_fields = ['appointment_date', 'start_time', 'created_at']\n    ordering = ['appointment_date', 'start_time']\n    search_fields = ['notes', 'location']\n    def get_serializer_class(self):\n        \"\"\"Return appropriate serializer class\"\"\"",
        "detail": "server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "AppointmentNoteViewSet",
        "kind": 6,
        "importPath": "server.scheduling.views",
        "description": "server.scheduling.views",
        "peekOfCode": "class AppointmentNoteViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing appointment notes\"\"\"\n    serializer_class = AppointmentNoteSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Return notes for an appointment\"\"\"\n        # للحماية من أخطاء Swagger\n        if getattr(self, 'swagger_fake_view', False):\n            return AppointmentNote.objects.none()\n        appointment_id = self.kwargs.get('appointment_pk')",
        "detail": "server.scheduling.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.users.migrations.0001_initial",
        "description": "server.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.users.migrations.0002_customuser_email_verified_and_more",
        "description": "server.users.migrations.0002_customuser_email_verified_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customuser',\n            name='email_verified',\n            field=models.BooleanField(default=False, help_text='Designates whether this user has verified their email address.', verbose_name='email verified'),\n        ),",
        "detail": "server.users.migrations.0002_customuser_email_verified_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.users.migrations.0003_alter_customuser_role",
        "description": "server.users.migrations.0003_alter_customuser_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_customuser_email_verified_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='role',\n            field=models.CharField(choices=[('client', 'Client'), ('contractor', 'A-List Home Pro'), ('crew', 'Crew'), ('specialist', 'Specialist'), ('admin', 'Admin')], default='client', max_length=20),\n        ),",
        "detail": "server.users.migrations.0003_alter_customuser_role",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "server.users.admin",
        "description": "server.users.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    list_display = ('email', 'name', 'role', 'is_verified', 'is_staff', 'date_joined')\n    list_filter = ('role', 'is_verified', 'is_staff', 'is_superuser')\n    search_fields = ('email', 'name', 'phone_number')\n    ordering = ('email',)\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('name', 'phone_number')}),\n        ('Permissions', {'fields': ('role', 'is_verified', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),",
        "detail": "server.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "server.users.apps",
        "description": "server.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "server.users.apps",
        "documentation": {}
    },
    {
        "label": "generate_verification_token",
        "kind": 2,
        "importPath": "server.users.email_verification",
        "description": "server.users.email_verification",
        "peekOfCode": "def generate_verification_token():\n    \"\"\"Generate a secure random token for email verification.\"\"\"\n    return secrets.token_urlsafe(32)\ndef send_verification_email(user):\n    \"\"\"\n    Send a verification email to the user.\n    Args:\n        user: The user to send the verification email to.\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.",
        "detail": "server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "kind": 2,
        "importPath": "server.users.email_verification",
        "description": "server.users.email_verification",
        "peekOfCode": "def send_verification_email(user):\n    \"\"\"\n    Send a verification email to the user.\n    Args:\n        user: The user to send the verification email to.\n    Returns:\n        bool: True if the email was sent successfully, False otherwise.\n    \"\"\"\n    # Create or update verification token\n    verification, created = EmailVerification.objects.update_or_create(",
        "detail": "server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "verify_email_token",
        "kind": 2,
        "importPath": "server.users.email_verification",
        "description": "server.users.email_verification",
        "peekOfCode": "def verify_email_token(token):\n    \"\"\"\n    Verify an email verification token.\n    Args:\n        token: The token to verify.\n    Returns:\n        user: The user associated with the token if valid, None otherwise.\n    \"\"\"\n    try:\n        verification = EmailVerification.objects.get(token=token)",
        "detail": "server.users.email_verification",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "server.users.models",
        "description": "server.users.models",
        "peekOfCode": "class UserRole(models.TextChoices):\n    CLIENT = 'client', _('Client')\n    CONTRACTOR = 'contractor', _('A-List Home Pro')\n    CREW = 'crew', _('Crew')\n    SPECIALIST = 'specialist', _('Specialist')\n    ADMIN = 'admin', _('Admin')\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, name, phone_number, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')",
        "detail": "server.users.models",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "server.users.models",
        "description": "server.users.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, name, phone_number, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, name=name, phone_number=phone_number, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, name, phone_number, password=None, **extra_fields):",
        "detail": "server.users.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "server.users.models",
        "description": "server.users.models",
        "peekOfCode": "class CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(_('email address'), unique=True)\n    name = models.CharField(_('full name'), max_length=150)\n    phone_number = models.CharField(_('phone number'), max_length=20, blank=True)\n    role = models.CharField(\n        max_length=20,\n        choices=UserRole.choices,\n        default=UserRole.CLIENT,\n    )\n    stripe_account_id = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "server.users.models",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "kind": 6,
        "importPath": "server.users.models",
        "description": "server.users.models",
        "peekOfCode": "class EmailVerification(TimeStampedModel):\n    \"\"\"Model to store email verification tokens.\"\"\"\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='email_verification')\n    token = models.CharField(max_length=100, unique=True)\n    expires_at = models.DateTimeField()\n    def __str__(self):\n        return f\"Email verification for {self.user.email}\"\n    @property\n    def is_admin(self):\n        return self.role == UserRole.ADMIN",
        "detail": "server.users.models",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsAdmin(permissions.BasePermission):\n    \"\"\"\n    Permission check for admin users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.ADMIN\nclass IsAListHomePro(permissions.BasePermission):\n    \"\"\"\n    Permission check for A-List Home Pro users.\n    Note: Internally still uses UserRole.CONTRACTOR for backward compatibility.",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsAListHomePro",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsAListHomePro(permissions.BasePermission):\n    \"\"\"\n    Permission check for A-List Home Pro users.\n    Note: Internally still uses UserRole.CONTRACTOR for backward compatibility.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CONTRACTOR\nclass IsClient(permissions.BasePermission):\n    \"\"\"\n    Permission check for client users.",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsClient",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsClient(permissions.BasePermission):\n    \"\"\"\n    Permission check for client users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CLIENT\nclass IsCrew(permissions.BasePermission):\n    \"\"\"\n    Permission check for crew users.\n    \"\"\"",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsCrew",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsCrew(permissions.BasePermission):\n    \"\"\"\n    Permission check for crew users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.CREW\nclass IsSpecialist(permissions.BasePermission):\n    \"\"\"\n    Permission check for specialist users.\n    \"\"\"",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsSpecialist",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsSpecialist(permissions.BasePermission):\n    \"\"\"\n    Permission check for specialist users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and request.user.role == UserRole.SPECIALIST\nclass IsOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object or admins to edit it.\n    \"\"\"",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "kind": 6,
        "importPath": "server.users.permissions",
        "description": "server.users.permissions",
        "peekOfCode": "class IsOwnerOrAdmin(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object or admins to edit it.\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        # Admin can edit any object\n        if request.user.role == UserRole.ADMIN:\n            return True\n        # Check if the object has a user attribute that matches the request user\n        if hasattr(obj, 'user'):",
        "detail": "server.users.permissions",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the custom user model\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'name', 'phone_number', 'role', 'is_verified', 'date_joined')\n        read_only_fields = ('id', 'is_verified', 'date_joined')\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    \"\"\"",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for user registration\n    \"\"\"\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])\n    password2 = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User\n        fields = ('email', 'name', 'phone_number', 'role', 'password', 'password2')\n        extra_kwargs = {",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordChangeSerializer",
        "kind": 6,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "class PasswordChangeSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer for password change\n    \"\"\"\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True, validators=[validate_password])\n    new_password2 = serializers.CharField(required=True)\n    def validate(self, attrs):\n        if attrs['new_password'] != attrs['new_password2']:\n            raise serializers.ValidationError({\"new_password\": \"Password fields didn't match.\"})",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserUpdateSerializer",
        "kind": 6,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "class UserUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for updating user profile\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('name', 'phone_number')\n        extra_kwargs = {\n            'name': {'required': True},\n            'phone_number': {'required': True}",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "AdminUserUpdateSerializer",
        "kind": 6,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "class AdminUserUpdateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for admin to update user details including role\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('name', 'phone_number', 'role', 'is_verified', 'is_active')",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.users.serializers",
        "description": "server.users.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the custom user model\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'name', 'phone_number', 'role', 'is_verified', 'date_joined')\n        read_only_fields = ('id', 'is_verified', 'date_joined')\nclass UserRegistrationSerializer(serializers.ModelSerializer):",
        "detail": "server.users.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.users.urls",
        "description": "server.users.urls",
        "peekOfCode": "urlpatterns = [\n    # Authentication endpoints\n    path('register/', RegisterView.as_view(), name='register'),\n    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    # User profile endpoints\n    path('me/', UserProfileView.as_view(), name='user_profile'),\n    path('change-password/', PasswordChangeView.as_view(), name='change_password'),\n    # Email verification\n    path('verify-email/<str:token>/<str:user_id>/', VerifyEmailView.as_view(), name='verify_email'),",
        "detail": "server.users.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class RegisterView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        # Send verification email\n        send_verification_email(user)",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "VerifyEmailView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class VerifyEmailView(APIView):\n    def get(self, request, *args, **kwargs):\n        token = kwargs.get('token')\n        user_id = kwargs.get('user_id')\n        if verify_email_token(token, user_id):\n            return Response({'message': 'Email verified successfully'}, status=status.HTTP_200_OK)\n        else:\n            return Response({'message': 'Invalid verification token'}, status=status.HTTP_400_BAD_REQUEST)\nclass UserProfileView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class UserProfileView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def get_serializer_class(self):\n        if self.request.method == 'PUT' or self.request.method == 'PATCH':\n            return UserUpdateSerializer\n        return UserSerializer\nclass PasswordChangeView(generics.GenericAPIView):",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "PasswordChangeView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class PasswordChangeView(generics.GenericAPIView):\n    serializer_class = PasswordChangeSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            user = request.user\n            if not user.check_password(serializer.validated_data['old_password']):\n                return Response({\"old_password\": [\"Wrong password.\"]}, status=status.HTTP_400_BAD_REQUEST)\n            user.set_password(serializer.validated_data['new_password'])",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "AdminUserListView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class AdminUserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAdmin]\nclass AdminUserDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = User.objects.all()\n    serializer_class = AdminUserUpdateSerializer\n    permission_classes = [IsAdmin]\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "AdminUserDetailView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class AdminUserDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = User.objects.all()\n    serializer_class = AdminUserUpdateSerializer\n    permission_classes = [IsAdmin]\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n        if response.status_code == 200:\n            # Add user info to response\n            user = User.objects.get(email=request.data['email'])",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n        if response.status_code == 200:\n            # Add user info to response\n            user = User.objects.get(email=request.data['email'])\n            user_data = UserSerializer(user).data\n            response.data['user'] = user_data\n        return response",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.users.views",
        "description": "server.users.views",
        "peekOfCode": "User = get_user_model()\nclass RegisterView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        # Send verification email",
        "detail": "server.users.views",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "server.check_passwords",
        "description": "server.check_passwords",
        "peekOfCode": "def check_password(email, password):\n    \"\"\"Check if password is valid for a user\"\"\"\n    user = authenticate(email=email, password=password)\n    if user is not None:\n        return True\n    return False\ndef check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")\n    print(\"{:<30} {:<20} {:<15}\".format(\"Email\", \"Password\", \"Valid\"))",
        "detail": "server.check_passwords",
        "documentation": {}
    },
    {
        "label": "check_all_passwords",
        "kind": 2,
        "importPath": "server.check_passwords",
        "description": "server.check_passwords",
        "peekOfCode": "def check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")\n    print(\"{:<30} {:<20} {:<15}\".format(\"Email\", \"Password\", \"Valid\"))\n    print(\"-\" * 65)\n    # List of users and their expected passwords\n    users_to_check = [\n        {\"email\": \"admin@alistpros.com\", \"password\": \"admin123\"},\n        {\"email\": \"client1@example.com\", \"password\": \"client123\"},\n        {\"email\": \"contractor1@example.com\", \"password\": \"contractor123\"},",
        "detail": "server.check_passwords",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.check_passwords",
        "description": "server.check_passwords",
        "peekOfCode": "User = get_user_model()\ndef check_password(email, password):\n    \"\"\"Check if password is valid for a user\"\"\"\n    user = authenticate(email=email, password=password)\n    if user is not None:\n        return True\n    return False\ndef check_all_passwords():\n    \"\"\"Check passwords for predefined users\"\"\"\n    print(\"\\n=== Password Check ===\\n\")",
        "detail": "server.check_passwords",
        "documentation": {}
    },
    {
        "label": "check_users",
        "kind": 2,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "def check_users():\n    \"\"\"Check all users in the database\"\"\"\n    print(\"\\n=== Users in the Database ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<15}\".format(\"Email\", \"Name\", \"Role\", \"Is Active\"))\n    print(\"-\" * 80)\n    users = User.objects.all()\n    if not users.exists():\n        print(\"No users found in the database.\")\n        return\n    for user in users:",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.check_users",
        "description": "server.check_users",
        "peekOfCode": "User = get_user_model()\ndef check_users():\n    \"\"\"Check all users in the database\"\"\"\n    print(\"\\n=== Users in the Database ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<15}\".format(\"Email\", \"Name\", \"Role\", \"Is Active\"))\n    print(\"-\" * 80)\n    users = User.objects.all()\n    if not users.exists():\n        print(\"No users found in the database.\")\n        return",
        "detail": "server.check_users",
        "documentation": {}
    },
    {
        "label": "create_demo_profile",
        "kind": 2,
        "importPath": "server.create_demo_profile",
        "description": "server.create_demo_profile",
        "peekOfCode": "def create_demo_profile():\n    \"\"\"Create a demo AListHomeProProfile for API testing\"\"\"\n    try:\n        # Create or get a test user\n        try:\n            user = CustomUser.objects.get(email='testpro@example.com')\n            print(f\"Found existing user: {user.email}\")\n        except CustomUser.DoesNotExist:\n            # Create a new user with CONTRACTOR role (not ALISTPRO)\n            user = CustomUser.objects.create_user(",
        "detail": "server.create_demo_profile",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_demo_profile",
        "description": "server.create_demo_profile",
        "peekOfCode": "User = get_user_model()\ndef create_demo_profile():\n    \"\"\"Create a demo AListHomeProProfile for API testing\"\"\"\n    try:\n        # Create or get a test user\n        try:\n            user = CustomUser.objects.get(email='testpro@example.com')\n            print(f\"Found existing user: {user.email}\")\n        except CustomUser.DoesNotExist:\n            # Create a new user with CONTRACTOR role (not ALISTPRO)",
        "detail": "server.create_demo_profile",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def generate_random_string(length=10):\n    \"\"\"Generate a random string of letters and digits\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    created_categories = []\n    for category_name in categories:",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create users with different roles\"\"\"\n    print(\"\\n=== Creating Users ===\\n\")\n    # Create admin if it doesn't exist\n    try:\n        admin = User.objects.get(email=\"admin@alistpros.com\")\n        print(f\"Admin already exists: {admin.email}\")\n    except User.DoesNotExist:\n        admin = User.objects.create_user(\n            email=\"admin@alistpros.com\",",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_contractor_profiles",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_contractor_profiles(contractors, categories):\n    \"\"\"Create contractor profiles for contractor users\"\"\"\n    print(\"\\n=== Creating Contractor Profiles ===\\n\")\n    profiles = []\n    for i, contractor in enumerate(contractors):\n        try:\n            profile = ContractorProfile.objects.get(user=contractor)\n            print(f\"Contractor profile already exists for: {contractor.email}\")\n        except ContractorProfile.DoesNotExist:\n            profile = ContractorProfile.objects.create(",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_services",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_services(contractor_profiles, categories):\n    \"\"\"Create services offered by contractors - skipped for now\"\"\"\n    print(\"\\n=== Skipping Services Creation ===\\n\")\n    print(\"The Service model doesn't appear to be defined in the current system.\")\ndef create_portfolio_items(contractor_profiles):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for profile in contractor_profiles:\n        # Create 2-4 portfolio items per contractor\n        num_items = random.randint(2, 4)",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_portfolio_items",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_portfolio_items(contractor_profiles):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for profile in contractor_profiles:\n        # Create 2-4 portfolio items per contractor\n        num_items = random.randint(2, 4)\n        for i in range(num_items):\n            try:\n                item = ContractorPortfolio.objects.create(\n                    contractor=profile,",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_reviews(clients, contractor_profiles):\n    \"\"\"Create reviews for contractors\"\"\"\n    print(\"\\n=== Creating Reviews ===\\n\")\n    for profile in contractor_profiles:\n        # Create 1-3 reviews per contractor\n        num_reviews = random.randint(1, 3)\n        reviewers = random.sample(clients, min(num_reviews, len(clients)))\n        for i, client in enumerate(reviewers):\n            try:\n                rating = random.randint(3, 5)  # Mostly positive reviews (3-5 stars)",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_availability",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_availability(contractor_profiles):\n    \"\"\"Create availability schedules for contractors\"\"\"\n    print(\"\\n=== Creating Availability Schedules ===\\n\")\n    day_mapping = {\n        'monday': 0,\n        'tuesday': 1,\n        'wednesday': 2,\n        'thursday': 3,\n        'friday': 4,\n        'saturday': 5,",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_appointments",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_appointments(clients, contractor_profiles):\n    \"\"\"Create appointments between clients and contractors\"\"\"\n    print(\"\\n=== Creating Appointments ===\\n\")\n    statuses = [\n        AppointmentStatus.REQUESTED,\n        AppointmentStatus.CONFIRMED,\n        AppointmentStatus.COMPLETED,\n        AppointmentStatus.CANCELLED\n    ]\n    for profile in contractor_profiles:",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_conversations_and_messages",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_conversations_and_messages(clients, contractors):\n    \"\"\"Create conversations and messages between clients and contractors\"\"\"\n    print(\"\\n=== Creating Conversations and Messages ===\\n\")\n    for client in clients[:3]:  # Limit to first 3 clients\n        for contractor in contractors[:3]:  # Limit to first 3 contractors\n            try:\n                # Create conversation\n                conversation = Conversation.objects.create(\n                    title=f\"Conversation between {client.name} and {contractor.name}\"\n                )",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_notifications(users_dict):\n    \"\"\"Create notifications for users\"\"\"\n    print(\"\\n=== Creating Notifications ===\\n\")\n    all_users = []\n    all_users.extend(users_dict[\"clients\"])\n    all_users.extend(users_dict[\"contractors\"])\n    all_users.extend(users_dict[\"crew_members\"])\n    all_users.extend(users_dict[\"specialists\"])\n    notification_types = [\n        'MESSAGE',",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_email_verifications",
        "kind": 2,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "def create_email_verifications(users_dict):\n    \"\"\"Create email verification tokens for users\"\"\"\n    print(\"\\n=== Creating Email Verification Tokens ===\\n\")\n    all_users = []\n    all_users.extend(users_dict[\"clients\"])\n    all_users.extend(users_dict[\"contractors\"])\n    all_users.extend(users_dict[\"crew_members\"])\n    all_users.extend(users_dict[\"specialists\"])\n    for user in all_users:\n        token = ''.join(random.choices(string.ascii_letters + string.digits, k=20))",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_fake_data",
        "description": "server.create_fake_data",
        "peekOfCode": "User = get_user_model()\ndef generate_random_string(length=10):\n    \"\"\"Generate a random string of letters and digits\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_service_categories():\n    \"\"\"Create service categories if they don't exist\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", ",
        "detail": "server.create_fake_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    for category_name in categories:\n        category, created = ServiceCategory.objects.get_or_create(name=category_name)",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create admin, clients, contractors, crew members, and specialists\"\"\"\n    print(\"\\n=== Creating Users ===\\n\")\n    # Admin user\n    admin_email = \"admin@alistpros.com\"\n    admin, created = User.objects.get_or_create(\n        email=admin_email,\n        defaults={\n            'name': 'Admin User',\n            'phone_number': '555-123-4567',",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_contractor_profiles",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_contractor_profiles(contractors):\n    \"\"\"Create contractor profiles for contractor users\"\"\"\n    print(\"\\n=== Creating Contractor Profiles ===\\n\")\n    categories = list(ServiceCategory.objects.all())\n    for contractor in contractors:\n        profile, created = ContractorProfile.objects.get_or_create(\n            user=contractor,\n            defaults={\n                'business_name': f\"{contractor.name}'s Services\",\n                'business_description': f\"Professional services provided by {contractor.name}. Quality work guaranteed.\",",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_portfolio_items",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_portfolio_items(contractors):\n    \"\"\"Create portfolio items for contractors\"\"\"\n    print(\"\\n=== Creating Portfolio Items ===\\n\")\n    for contractor in contractors:\n        profile = ContractorProfile.objects.get(user=contractor)\n        # Create 2-3 portfolio items for each contractor\n        num_items = random.randint(2, 3)\n        for i in range(1, num_items + 1):\n            item, created = ContractorPortfolio.objects.get_or_create(\n                contractor=profile,",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_reviews(contractors):\n    \"\"\"Create reviews for contractors\"\"\"\n    print(\"\\n=== Creating Reviews ===\\n\")\n    clients = User.objects.filter(role=UserRole.CLIENT)\n    # Clear existing reviews to avoid duplicates\n    ContractorReview.objects.all().delete()\n    print(\"Cleared existing reviews\")\n    for contractor in contractors:\n        profile = ContractorProfile.objects.get(user=contractor)\n        # Create 2-3 reviews for each contractor",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_availability",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_availability(contractors):\n    \"\"\"Create availability schedules for contractors\"\"\"\n    print(\"\\n=== Creating Availability Schedules ===\\n\")\n    days_of_week = [0, 1, 2, 3, 4, 5, 6]  # Monday to Sunday\n    # Clear existing availability slots to avoid duplicates\n    AvailabilitySlot.objects.all().delete()\n    UnavailableDate.objects.all().delete()\n    print(\"Cleared existing availability data\")\n    for contractor in contractors:\n        # Get contractor profile",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create sample notifications for users\"\"\"\n    print(\"\\n=== Creating Notifications ===\\n\")\n    # Clear existing notifications to avoid duplicates\n    Notification.objects.all().delete()\n    SMSVerification.objects.all().delete()\n    print(\"Cleared existing notifications and SMS verifications\")\n    notification_types = [\n        'APPOINTMENT',\n        'MESSAGE',",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "def main():\n    \"\"\"Main function to create all initial data\"\"\"\n    print(\"A-List Home Pros Initial Data Creation\")\n    # Create service categories\n    create_service_categories()\n    # Create users\n    contractors = create_users()\n    # Create contractor profiles\n    create_contractor_profiles(contractors)\n    # Create portfolio items",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_initial_data",
        "description": "server.create_initial_data",
        "peekOfCode": "User = get_user_model()\ndef create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"\\n=== Creating Service Categories ===\\n\")\n    categories = [\n        \"Plumbing\", \"Electrical\", \"HVAC\", \"Carpentry\", \"Painting\", \n        \"Landscaping\", \"Cleaning\", \"Roofing\", \"Flooring\", \n        \"General Contracting\", \"Handyman\", \"Appliance Repair\"\n    ]\n    for category_name in categories:",
        "detail": "server.create_initial_data",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_users():\n    \"\"\"Create test users with different roles\"\"\"\n    print(\"Creating test users...\")\n    # Create admin user if it doesn't exist\n    if not User.objects.filter(email='admin@alistpros.com').exists():\n        admin = User.objects.create_superuser(\n            email='admin@alistpros.com',\n            name='Admin User',\n            phone_number='555-123-4567',\n            password='admin123',",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories\"\"\"\n    print(\"Creating service categories...\")\n    categories = [\n        {'name': 'Plumbing', 'description': 'All plumbing services including repairs and installations'},\n        {'name': 'Electrical', 'description': 'Electrical installations, repairs, and maintenance'},\n        {'name': 'Carpentry', 'description': 'Custom woodworking, furniture, and structural repairs'},\n        {'name': 'Painting', 'description': 'Interior and exterior painting services'},\n        {'name': 'Landscaping', 'description': 'Garden design, maintenance, and outdoor structures'},\n        {'name': 'HVAC', 'description': 'Heating, ventilation, and air conditioning services'},",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_alistpro_profiles",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_alistpro_profiles(alistpro_users, categories):\n    \"\"\"Create A-List Home Pro profiles\"\"\"\n    print(\"Creating A-List Home Pro profiles...\")\n    profiles = []\n    for i, user in enumerate(alistpro_users):\n        # Select 2-3 random categories for each profile\n        selected_categories = random.sample(categories, random.randint(2, 3))\n        profile, created = AListHomeProProfile.objects.get_or_create(\n            user=user,\n            defaults={",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_portfolios",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_portfolios(profiles):\n    \"\"\"Create portfolio items for A-List Home Pro profiles\"\"\"\n    print(\"Creating portfolio items...\")\n    portfolio_items = []\n    for profile in profiles:\n        # Create 2-4 portfolio items for each profile\n        for i in range(random.randint(2, 4)):\n            item, created = AListHomeProPortfolio.objects.get_or_create(\n                alistpro=profile,\n                title=f\"Project {i+1}\",",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_reviews(profiles, client_users):\n    \"\"\"Create reviews for A-List Home Pro profiles\"\"\"\n    print(\"Creating reviews...\")\n    reviews = []\n    for profile in profiles:\n        # Create 1-3 reviews for each profile\n        for i in range(random.randint(1, 3)):\n            # Select a random client\n            client = random.choice(client_users)\n            review, created = AListHomeProReview.objects.get_or_create(",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create notifications for users\"\"\"\n    print(\"Creating notifications...\")\n    notifications = []\n    # Flatten users dict\n    all_users = [users['admin']] + users['clients'] + users['alistpros']\n    for user in all_users:\n        # Create 2-5 notifications for each user\n        for i in range(random.randint(2, 5)):\n            # Random notification type",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_conversations",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_conversations(client_users, alistpro_users):\n    \"\"\"Create conversations between clients and A-List Home Pros\"\"\"\n    print(\"Creating conversations...\")\n    conversations = []\n    for client in client_users:\n        # Create a conversation with 1-2 random A-List Home Pros\n        for alistpro in random.sample(alistpro_users, random.randint(1, min(2, len(alistpro_users)))):\n            try:\n                # Create conversation with both users as participants\n                conversation = Conversation.objects.create(",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "create_appointments",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def create_appointments(profiles, client_users):\n    \"\"\"Create appointments between clients and A-List Home Pros\"\"\"\n    print(\"Creating appointments...\")\n    appointments = []\n    # First, get the actual ContractorProfile objects from the database\n    contractor_profiles = {}\n    for profile in profiles:\n        try:\n            # Try to find the contractor profile in the database\n            contractor = ContractorProfile.objects.get(user=profile.user)",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "def main():\n    \"\"\"Main function to create all test data\"\"\"\n    print(\"=\" * 80)\n    print(\"Creating Test Data for A-List Home Pros Platform\".center(80))\n    print(\"=\" * 80)\n    # Create users\n    users = create_users()\n    # Create service categories\n    categories = create_service_categories()\n    # Create A-List Home Pro profiles",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_test_data",
        "description": "server.create_test_data",
        "peekOfCode": "User = get_user_model()\ndef create_users():\n    \"\"\"Create test users with different roles\"\"\"\n    print(\"Creating test users...\")\n    # Create admin user if it doesn't exist\n    if not User.objects.filter(email='admin@alistpros.com').exists():\n        admin = User.objects.create_superuser(\n            email='admin@alistpros.com',\n            name='Admin User',\n            phone_number='555-123-4567',",
        "detail": "server.create_test_data",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.create_users_and_tokens",
        "description": "server.create_users_and_tokens",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients\n        {",
        "detail": "server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "server.create_users_and_tokens",
        "description": "server.create_users_and_tokens",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients\n        {\n            'email': 'client1@example.com',\n            'name': 'John Client',\n            'phone_number': '1234567890',",
        "detail": "server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "server.create_users_and_tokens",
        "description": "server.create_users_and_tokens",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_users_and_tokens",
        "description": "server.create_users_and_tokens",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_test_users():\n    \"\"\"Create test users directly using SQL to avoid model field issues\"\"\"\n    print(\"\\n=== Creating Test Users ===\\n\")\n    # Test user data\n    users = [\n        # Clients",
        "detail": "server.create_users_and_tokens",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.create_verification_table",
        "description": "server.create_verification_table",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef create_verification_table():\n    \"\"\"Create email verification table if it doesn't exist\"\"\"\n    print(\"\\n=== Creating Email Verification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master ",
        "detail": "server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "create_verification_table",
        "kind": 2,
        "importPath": "server.create_verification_table",
        "description": "server.create_verification_table",
        "peekOfCode": "def create_verification_table():\n    \"\"\"Create email verification table if it doesn't exist\"\"\"\n    print(\"\\n=== Creating Email Verification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master \n            WHERE type='table' AND name='users_emailverification'\n        \"\"\")\n        if cursor.fetchone():",
        "detail": "server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "server.create_verification_table",
        "description": "server.create_verification_table",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "show_all_verification_codes",
        "kind": 2,
        "importPath": "server.create_verification_table",
        "description": "server.create_verification_table",
        "peekOfCode": "def show_all_verification_codes():\n    \"\"\"Show all verification codes\"\"\"\n    print(\"\\n=== All Verification Codes ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40} {:<20}\".format(\n        \"Email\", \"Name\", \"Role\", \"Verification Token\", \"Expires At\"\n    ))\n    print(\"-\" * 125)\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT u.email, u.name, u.role, v.token, v.expires_at",
        "detail": "server.create_verification_table",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.create_verification_tokens",
        "description": "server.create_verification_tokens",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser \n            WHERE role != 'admin'",
        "detail": "server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "kind": 2,
        "importPath": "server.create_verification_tokens",
        "description": "server.create_verification_tokens",
        "peekOfCode": "def get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser \n            WHERE role != 'admin'\n        \"\"\")\n        return cursor.fetchall()\ndef create_verification_tokens():",
        "detail": "server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "server.create_verification_tokens",
        "description": "server.create_verification_tokens",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = get_all_users()\n    if not users:\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.create_verification_tokens",
        "description": "server.create_verification_tokens",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_all_users():\n    \"\"\"Get all users directly from the database to avoid model field issues\"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"\"\"\n            SELECT id, email, name, role \n            FROM users_customuser ",
        "detail": "server.create_verification_tokens",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.fix_email_verification",
        "description": "server.fix_email_verification",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master ",
        "detail": "server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "fix_email_verification_table",
        "kind": 2,
        "importPath": "server.fix_email_verification",
        "description": "server.fix_email_verification",
        "peekOfCode": "def fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master \n            WHERE type='table' AND name='users_emailverification'\n        \"\"\")\n        if cursor.fetchone():",
        "detail": "server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "create_verification_tokens",
        "kind": 2,
        "importPath": "server.fix_email_verification",
        "description": "server.fix_email_verification",
        "peekOfCode": "def create_verification_tokens():\n    \"\"\"Create verification tokens for all users except admin\"\"\"\n    print(\"\\n=== Creating Verification Tokens for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Token\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users:\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.fix_email_verification",
        "description": "server.fix_email_verification",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef fix_email_verification_table():\n    \"\"\"Fix the EmailVerification table structure and create verification codes for users\"\"\"\n    print(\"\\n=== Fixing EmailVerification Table ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if table exists\n        cursor.execute(\"\"\"",
        "detail": "server.fix_email_verification",
        "documentation": {}
    },
    {
        "label": "fix_user_model",
        "kind": 2,
        "importPath": "server.fix_user_model",
        "description": "server.fix_user_model",
        "peekOfCode": "def fix_user_model():\n    \"\"\"Add email_verified column to users_customuser table if it doesn't exist\"\"\"\n    print(\"\\n=== Fixing User Model ===\\n\")\n    with connection.cursor() as cursor:\n        # Check if email_verified column exists\n        cursor.execute(\"PRAGMA table_info(users_customuser)\")\n        columns = [column[1] for column in cursor.fetchall()]\n        if 'email_verified' in columns:\n            print(\"Column 'email_verified' already exists in users_customuser table.\")\n        else:",
        "detail": "server.fix_user_model",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.get_verification_codes",
        "description": "server.get_verification_codes",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)",
        "detail": "server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "get_verification_codes",
        "kind": 2,
        "importPath": "server.get_verification_codes",
        "description": "server.get_verification_codes",
        "peekOfCode": "def get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "server.get_verification_codes",
        "description": "server.get_verification_codes",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users if none exist\"\"\"\n    print(\"\\nCreating test users...\\n\")\n    # Check if admin exists\n    try:\n        admin = User.objects.get(email=\"admin@alistpros.com\")\n        print(f\"Admin user already exists: {admin.email}\")\n    except User.DoesNotExist:\n        # Create admin user\n        admin = User.objects.create_user(",
        "detail": "server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.get_verification_codes",
        "description": "server.get_verification_codes",
        "peekOfCode": "User = get_user_model()\ndef generate_verification_code(length=20):\n    \"\"\"Generate a random verification code\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"Get verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin",
        "detail": "server.get_verification_codes",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'alistpros.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "server.manage",
        "documentation": {}
    },
    {
        "label": "reset_passwords",
        "kind": 2,
        "importPath": "server.reset_passwords",
        "description": "server.reset_passwords",
        "peekOfCode": "def reset_passwords():\n    \"\"\"Reset passwords for all users based on their roles\"\"\"\n    print(\"\\n=== Resetting User Passwords ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"New Password\"))\n    print(\"-\" * 85)\n    # Password mapping by role\n    password_map = {\n        'admin': 'admin123',\n        'client': 'client123',\n        'contractor': 'contractor123',",
        "detail": "server.reset_passwords",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.reset_passwords",
        "description": "server.reset_passwords",
        "peekOfCode": "User = get_user_model()\ndef reset_passwords():\n    \"\"\"Reset passwords for all users based on their roles\"\"\"\n    print(\"\\n=== Resetting User Passwords ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"New Password\"))\n    print(\"-\" * 85)\n    # Password mapping by role\n    password_map = {\n        'admin': 'admin123',\n        'client': 'client123',",
        "detail": "server.reset_passwords",
        "documentation": {}
    },
    {
        "label": "show_verification_codes",
        "kind": 2,
        "importPath": "server.show_verification_codes",
        "description": "server.show_verification_codes",
        "peekOfCode": "def show_verification_codes():\n    \"\"\"Show verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")\n        return",
        "detail": "server.show_verification_codes",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.show_verification_codes",
        "description": "server.show_verification_codes",
        "peekOfCode": "User = get_user_model()\ndef show_verification_codes():\n    \"\"\"Show verification codes for all users except admin\"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<15} {:<40}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 105)\n    # Get all non-admin users\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():\n        print(\"No users found in the database (excluding admin).\")",
        "detail": "server.show_verification_codes",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response: {response.text}\")\n    print(\"-------------------\")\ndef get_auth_token(credentials):",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "get_auth_token",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def get_auth_token(credentials):\n    \"\"\"Get JWT auth token for a user\"\"\"\n    url = f\"{BASE_URL}/users/token/\"\n    response = requests.post(url, json=credentials)\n    if response.status_code == 200:\n        data = response.json()\n        print_success(f\"Login successful for {credentials['email']}\")\n        return data.get(\"access\")\n    else:\n        print_error(f\"Login failed for {credentials['email']}\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_user_profile",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_user_profile(token):\n    \"\"\"Test getting user profile\"\"\"\n    url = f\"{BASE_URL}/users/me/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"User profile retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve user profile\")\n    print_response(response, \"User Profile\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profiles",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_success(\"Retrieved A-List Home Pro profiles successfully\")\n        print_response(response, \"All A-List Home Pro Profiles\")\n        return True\n    else:",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profile_detail",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_alistpro_profile_detail(alistpro_id=1):\n    \"\"\"Test getting a specific A-List Home Pro profile\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/{alistpro_id}/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_success(f\"Retrieved A-List Home Pro profile {alistpro_id} successfully\")\n        print_response(response, f\"A-List Home Pro Profile {alistpro_id}\")\n        return True\n    else:",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_appointments",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_appointments(token):\n    \"\"\"Test getting appointments\"\"\"\n    url = f\"{BASE_URL}/scheduling/appointments/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Appointments retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve appointments\")\n    print_response(response, \"Appointments\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_conversations",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Conversations retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve conversations\")\n    print_response(response, \"Conversations\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_notifications",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Notifications retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve notifications\")\n    print_response(response, \"Notifications\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "test_stripe_dashboard_link",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        print_success(\"Stripe dashboard link retrieved successfully\")\n    else:\n        print_error(\"Failed to retrieve Stripe dashboard link\")\n    print_response(response, \"Stripe Dashboard Link\")",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "def main():\n    \"\"\"Main function to run all tests\"\"\"\n    print_header(\"A-List Home Pros API Testing\")\n    print_info(\"Make sure the Django server is running on http://localhost:8000\")\n    results = {}\n    total_tests = 0\n    passed_tests = 0\n    # Authentication tests\n    print_header(\"Authentication Tests\")\n    admin_token = get_auth_token(ADMIN_USER)",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "API_HOST",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "API_HOST = config('API_HOST', default='localhost')\nAPI_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "API_PORT",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "API_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "API_PROTOCOL",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "API_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "BASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "ADMIN_USER",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "ADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "ALISTPRO_USER",
        "kind": 5,
        "importPath": "server.test_alistpros_api",
        "description": "server.test_alistpros_api",
        "peekOfCode": "ALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):",
        "detail": "server.test_alistpros_api",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message.\"\"\"\n    print(f\"❌ {message}\")\ndef print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def print_info(message):\n    \"\"\"Print an info message.\"\"\"\n    print(f\"ℹ️ {message}\")\ndef create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user\n    admin_user, created = User.objects.get_or_create(\n        email=\"admin@alistpros.com\",\n        defaults={",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_test_users",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def create_test_users():\n    \"\"\"Create test users with different roles.\"\"\"\n    print_header(\"Creating Test Users\")\n    # Create admin user\n    admin_user, created = User.objects.get_or_create(\n        email=\"admin@alistpros.com\",\n        defaults={\n            \"name\": \"Admin User\",\n            \"phone_number\": \"+1234567890\",\n            \"role\": UserRole.ADMIN,",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_service_categories",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def create_service_categories():\n    \"\"\"Create service categories for A-List Home Pros.\"\"\"\n    print_header(\"Creating Service Categories\")\n    categories = [\n        {\"name\": \"Plumbing\", \"description\": \"Water systems, pipes, fixtures\"},\n        {\"name\": \"Electrical\", \"description\": \"Wiring, lighting, electrical systems\"},\n        {\"name\": \"Carpentry\", \"description\": \"Woodworking, framing, cabinetry\"},\n        {\"name\": \"Painting\", \"description\": \"Interior and exterior painting\"},\n        {\"name\": \"Landscaping\", \"description\": \"Lawn care, gardening, outdoor spaces\"},\n    ]",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_alistpro_profile",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def create_alistpro_profile(user, categories):\n    \"\"\"Create an A-List Home Pro profile.\"\"\"\n    print_header(\"Creating A-List Home Pro Profile\")\n    profile, created = AListHomeProProfile.objects.get_or_create(\n        user=user,\n        defaults={\n            \"business_name\": \"Quality Home Services\",\n            \"business_description\": \"Professional home improvement and repair services\",\n            \"years_of_experience\": 10,\n            \"license_number\": \"LIC-12345\",",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_reviews",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def create_reviews(client_user, alistpro_profile):\n    \"\"\"Create reviews for an A-List Home Pro.\"\"\"\n    print_header(\"Creating Reviews\")\n    reviews = [\n        {\n            \"rating\": 5,\n            \"comment\": \"Excellent service! Very professional and completed the work on time.\",\n        },\n        {\n            \"rating\": 4,",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def create_notifications(users):\n    \"\"\"Create notifications for users.\"\"\"\n    print_header(\"Creating Notifications\")\n    notifications = [\n        {\n            \"user\": users[\"admin\"],\n            \"notification_type\": \"SYSTEM\",\n            \"title\": \"System Update\",\n            \"message\": \"The system has been updated with new features.\",\n        },",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_authentication_api",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def test_authentication_api():\n    \"\"\"Test authentication API endpoints.\"\"\"\n    print_header(\"Testing Authentication API\")\n    # Test login endpoint\n    users = [\n        {\"email\": \"admin@alistpros.com\", \"password\": \"admin123\", \"role\": \"admin\"},\n        {\"email\": \"client1@example.com\", \"password\": \"client123\", \"role\": \"client\"},\n        {\"email\": \"alistpro1@example.com\", \"password\": \"alistpro123\", \"role\": \"alistpro\"},\n    ]\n    for user in users:",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_alistpros_api",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def test_alistpros_api():\n    \"\"\"Test A-List Home Pros API endpoints.\"\"\"\n    print_header(\"Testing A-List Home Pros API\")\n    # Test list all A-List Home Pros\n    response = requests.get(f\"{BASE_URL}/alistpros/profiles/\")\n    if response.status_code == 200:\n        data = response.json()\n        print_success(f\"Retrieved {len(data)} A-List Home Pro profiles\")\n    else:\n        print_error(\"Failed to retrieve A-List Home Pro profiles\")",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "test_notifications_api",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def test_notifications_api():\n    \"\"\"Test notifications API endpoints.\"\"\"\n    print_header(\"Testing Notifications API\")\n    for role, token in tokens.items():\n        response = requests.get(\n            f\"{BASE_URL}/notifications/notifications/\",\n            headers={\"Authorization\": f\"Bearer {token['access']}\"}\n        )\n        if response.status_code == 200:\n            data = response.json()",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "def main():\n    \"\"\"Main function to run all tests.\"\"\"\n    print_header(\"A-List Home Pros Integration Test\")\n    try:\n        # Create test data\n        users = create_test_users()\n        categories = create_service_categories()\n        alistpro_profile = create_alistpro_profile(users[\"alistpro\"], categories)\n        create_reviews(users[\"client\"], alistpro_profile)\n        create_notifications(users)",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "User = get_user_model()\n# Test server URL from environment variables\nAPI_HOST = config('API_HOST', default='localhost')\nAPI_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Store tokens\ntokens = {}",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "API_HOST",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "API_HOST = config('API_HOST', default='localhost')\nAPI_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "API_PORT",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "API_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "API_PROTOCOL",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "API_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "BASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Store tokens\ntokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "server.test_alistpros_integration",
        "description": "server.test_alistpros_integration",
        "peekOfCode": "tokens = {}\ndef print_header(title):\n    \"\"\"Print a formatted header.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(f\" {title} \".center(80, \"=\"))\n    print(\"=\" * 80)\ndef print_success(message):\n    \"\"\"Print a success message.\"\"\"\n    print(f\"✅ {message}\")\ndef print_error(message):",
        "detail": "server.test_alistpros_integration",
        "documentation": {}
    },
    {
        "label": "generate_verification_code",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def generate_verification_code(length=20):\n    \"\"\"\n    Generate a random verification code\n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\ndef get_verification_codes():\n    \"\"\"\n    Get verification codes for all users except admin\n    \"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "get_verification_codes",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def get_verification_codes():\n    \"\"\"\n    Get verification codes for all users except admin\n    \"\"\"\n    print(\"\\n=== Verification Codes for All Users (except Admin) ===\\n\")\n    print(\"{:<30} {:<20} {:<30} {:<20}\".format(\"Email\", \"Name\", \"Role\", \"Verification Code\"))\n    print(\"-\" * 100)\n    # Get all users except admin\n    users = User.objects.exclude(role=UserRole.ADMIN)\n    if not users.exists():",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to run the tests\n    \"\"\"\n    # Get verification codes\n    get_verification_codes()\n# Run the script\nif __name__ == \"__main__\":\n    main()\nCONTRACTOR_USER = {",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def print_response(response, label):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response: {response.text}\")\n    print(\"-\" * 50)\n    return response.json() if response.status_code < 400 else None",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_register_users",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_register_users():\n    \"\"\"Test user registration for both client and contractor\"\"\"\n    print(\"\\n=== Testing User Registration ===\")\n    # Register client\n    response = requests.post(f\"{BASE_URL}/users/register/\", json=CLIENT_USER)\n    print_response(response, \"Client Registration\")\n    # Register contractor\n    response = requests.post(f\"{BASE_URL}/users/register/\", json=CONTRACTOR_USER)\n    print_response(response, \"Contractor Registration\")\n    return True",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_login",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_login():\n    \"\"\"Test login and JWT token acquisition\"\"\"\n    print(\"\\n=== Testing User Login ===\")\n    # Login as client\n    response = requests.post(f\"{BASE_URL}/users/token/\", json={\n        \"email\": CLIENT_USER[\"email\"],\n        \"password\": CLIENT_USER[\"password\"]\n    })\n    result = print_response(response, \"Client Login\")\n    if result:",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_service_category",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_create_service_category():\n    \"\"\"Test creating a service category (admin function)\"\"\"\n    print(\"\\n=== Testing Service Category Creation ===\")\n    # Use contractor token (normally admin would do this)\n    headers = {\"Authorization\": f\"Bearer {tokens['contractor']}\"}\n    response = requests.post(\n        f\"{BASE_URL}/contractors/service-categories/\",\n        json=SERVICE_CATEGORY,\n        headers=headers\n    )",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_contractor_profile",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_create_contractor_profile():\n    \"\"\"Test creating a contractor profile\"\"\"\n    print(\"\\n=== Testing Contractor Profile Creation ===\")\n    if not ids[\"service_category\"]:\n        print(\"Service category ID not available. Skipping profile creation.\")\n        return False\n    # Create profile data with service category\n    profile_data = CONTRACTOR_PROFILE.copy()\n    profile_data[\"service_categories\"] = [ids[\"service_category\"]]\n    headers = {\"Authorization\": f\"Bearer {tokens['contractor']}\"}",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_update_contractor_profile",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_update_contractor_profile():\n    \"\"\"Test updating a contractor profile\"\"\"\n    print(\"\\n=== Testing Contractor Profile Update ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping profile update.\")\n        return False\n    update_data = {\n        \"business_name\": \"Updated Construction LLC\",\n        \"description\": \"We are an updated test construction company\"\n    }",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_create_review",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_create_review():\n    \"\"\"Test creating a review for a contractor\"\"\"\n    print(\"\\n=== Testing Review Creation ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping review creation.\")\n        return False\n    review_data = REVIEW_DATA.copy()\n    review_data[\"contractor\"] = ids[\"contractor_profile\"]\n    headers = {\"Authorization\": f\"Bearer {tokens['client']}\"}\n    response = requests.post(",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_contractor_profiles",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_get_contractor_profiles():\n    \"\"\"Test getting all contractor profiles\"\"\"\n    print(\"\\n=== Testing Get All Contractor Profiles ===\")\n    response = requests.get(f\"{BASE_URL}/contractors/profiles/\")\n    print_response(response, \"Get All Contractor Profiles\")\n    return response.status_code == 200\ndef test_get_contractor_profile_detail():\n    \"\"\"Test getting a specific contractor profile\"\"\"\n    print(\"\\n=== Testing Get Contractor Profile Detail ===\")\n    if not ids[\"contractor_profile\"]:",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_contractor_profile_detail",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def test_get_contractor_profile_detail():\n    \"\"\"Test getting a specific contractor profile\"\"\"\n    print(\"\\n=== Testing Get Contractor Profile Detail ===\")\n    if not ids[\"contractor_profile\"]:\n        print(\"Contractor profile ID not available. Skipping profile detail.\")\n        return False\n    response = requests.get(f\"{BASE_URL}/contractors/profiles/{ids['contractor_profile']}/\")\n    print_response(response, \"Get Contractor Profile Detail\")\n    return response.status_code == 200\ndef run_all_tests():",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "run_all_tests",
        "kind": 2,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "def run_all_tests():\n    \"\"\"Run all API tests in sequence\"\"\"\n    tests = [\n        (\"User Registration\", test_register_users),\n        (\"User Login\", test_login),\n        (\"Service Category Creation\", test_create_service_category),\n        (\"Contractor Profile Creation\", test_create_contractor_profile),\n        (\"Contractor Profile Update\", test_update_contractor_profile),\n        (\"Review Creation\", test_create_review),\n        (\"Get All Contractor Profiles\", test_get_contractor_profiles),",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "User = get_user_model()\n# Base URL for API\nBASE_URL = \"http://localhost:8000/api\"\n# Test data\nCLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/api\"\n# Test data\nCLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"\n}\ndef generate_verification_code(length=20):",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client@example.com\",\n    \"name\": \"Test Client\",\n    \"phone_number\": \"1234567890\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CLIENT\"\n}\ndef generate_verification_code(length=20):\n    \"\"\"\n    Generate a random verification code",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "CONTRACTOR_USER",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "CONTRACTOR_USER = {\n    \"email\": \"contractor@example.com\",\n    \"name\": \"Test Contractor\",\n    \"phone_number\": \"0987654321\",\n    \"password\": \"SecurePass123!\",\n    \"role\": \"CONTRACTOR\"\n}\nCONTRACTOR_PROFILE = {\n    \"business_name\": \"Test Construction LLC\",\n    \"description\": \"We are a test construction company\",",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "CONTRACTOR_PROFILE",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "CONTRACTOR_PROFILE = {\n    \"business_name\": \"Test Construction LLC\",\n    \"description\": \"We are a test construction company\",\n    \"years_in_business\": 5,\n    \"license_number\": \"TEST-12345\",\n    \"insurance_info\": \"Fully insured\",\n    \"service_area\": \"Test City and surrounding areas\"\n}\nREVIEW_DATA = {\n    \"rating\": 4,",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "REVIEW_DATA",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "REVIEW_DATA = {\n    \"rating\": 4,\n    \"comment\": \"Great work, very professional!\",\n}\nSERVICE_CATEGORY = {\n    \"name\": \"Plumbing\",\n    \"description\": \"All plumbing services\"\n}\n# Store tokens and IDs\ntokens = {",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "SERVICE_CATEGORY",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "SERVICE_CATEGORY = {\n    \"name\": \"Plumbing\",\n    \"description\": \"All plumbing services\"\n}\n# Store tokens and IDs\ntokens = {\n    \"client\": None,\n    \"contractor\": None\n}\nids = {",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "tokens = {\n    \"client\": None,\n    \"contractor\": None\n}\nids = {\n    \"contractor_profile\": None,\n    \"service_category\": None,\n    \"review\": None\n}\ndef print_response(response, label):",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "ids",
        "kind": 5,
        "importPath": "server.test_api",
        "description": "server.test_api",
        "peekOfCode": "ids = {\n    \"contractor_profile\": None,\n    \"service_category\": None,\n    \"review\": None\n}\ndef print_response(response, label):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n--- {label} ---\")\n    print(f\"Status Code: {response.status_code}\")\n    try:",
        "detail": "server.test_api",
        "documentation": {}
    },
    {
        "label": "print_response",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n=== {label} ===\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response JSON: {json.dumps(response.json(), indent=2)}\")\n    except:\n        print(f\"Response Text: {response.text}\")\n    print(\"-\" * 80)\ndef get_auth_token(credentials):",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "get_auth_token",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def get_auth_token(credentials):\n    \"\"\"Get JWT auth token for a user\"\"\"\n    url = f\"{BASE_URL}/users/token/\"\n    response = requests.post(url, json=credentials)\n    if response.status_code == 200:\n        return response.json().get('access')\n    else:\n        print_response(response, \"Auth Token Error\")\n        return None\ndef test_user_profile(token):",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_user_profile",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_user_profile(token):\n    \"\"\"Test getting user profile\"\"\"\n    url = f\"{BASE_URL}/users/me/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"User Profile\")\n    return response.status_code == 200\ndef test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profiles",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_alistpro_profiles():\n    \"\"\"Test getting all A-List Home Pro profiles\"\"\"\n    # Try the new endpoint first\n    url = f\"{BASE_URL}/alistpros/profiles/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        print_response(response, \"All A-List Home Pro Profiles\")\n        return True\n    else:\n        # Fall back to the old endpoint for backward compatibility",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_alistpro_profile_detail",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_alistpro_profile_detail(alistpro_id=None):\n    \"\"\"Test getting a specific A-List Home Pro profile\"\"\"\n    # First, get a list of profiles\n    print(\"Fetching profile list to find a valid ID...\")\n    # Try both new and legacy endpoints to get profiles\n    profiles_data = None\n    profiles_endpoints = [\n        f\"{BASE_URL}/alistpros/profiles/\",\n        f\"{BASE_URL}/contractors/profiles/\"\n    ]",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_appointments",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_appointments(token):\n    \"\"\"Test getting appointments\"\"\"\n    url = f\"{BASE_URL}/scheduling/appointments/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Appointments\")\n    return response.status_code == 200\ndef test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_conversations",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_conversations(token):\n    \"\"\"Test getting conversations\"\"\"\n    url = f\"{BASE_URL}/messaging/conversations/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Conversations\")\n    return response.status_code == 200\ndef test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_notifications",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_notifications(token):\n    \"\"\"Test getting notifications\"\"\"\n    url = f\"{BASE_URL}/notifications/notifications/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Notifications\")\n    return response.status_code == 200\ndef test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "test_stripe_dashboard_link",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def test_stripe_dashboard_link(token):\n    \"\"\"Test getting Stripe dashboard link\"\"\"\n    url = f\"{BASE_URL}/payments/dashboard-link/\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(url, headers=headers)\n    print_response(response, \"Stripe Dashboard Link\")\n    # Consider it a success if we get either 200 (success) or 404 (account not found)\n    # This is because in a new environment, Stripe accounts may not be set up yet\n    return response.status_code in [200, 404]\ndef run_all_tests(specific_tests=None):",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "run_all_tests",
        "kind": 2,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "def run_all_tests(specific_tests=None):\n    \"\"\"Run API tests\n    Args:\n        specific_tests: List of test names to run, or None to run all tests\n    \"\"\"\n    results = {}\n    total_tests = 0\n    passed_tests = 0\n    # Get authentication tokens first\n    print(\"\\n=== Authentication Tests ===\")",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "API_HOST",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "API_HOST = config('API_HOST', default='localhost')\nAPI_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "API_PORT",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "API_PORT = config('API_PORT', default='8000')\nAPI_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "API_PROTOCOL",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "API_PROTOCOL = config('API_PROTOCOL', default='http')\n# Construct the base URL\nBASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "BASE_URL = f\"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api\"\nprint(f\"Testing API at: {BASE_URL}\")\n# Test credentials\nADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "ADMIN_USER",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "ADMIN_USER = {\n    \"email\": \"admin@alistpros.com\",\n    \"password\": \"admin123\"\n}\nCLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "CLIENT_USER",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "CLIENT_USER = {\n    \"email\": \"client1@example.com\",\n    \"password\": \"client123\"\n}\nALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    },
    {
        "label": "ALISTPRO_USER",
        "kind": 5,
        "importPath": "server.test_api_endpoints",
        "description": "server.test_api_endpoints",
        "peekOfCode": "ALISTPRO_USER = {\n    \"email\": \"contractor1@example.com\",  # Using existing contractor email for backward compatibility\n    \"password\": \"contractor123\"\n}\ndef print_response(response, label=\"Response\"):\n    \"\"\"Print formatted response for debugging\"\"\"\n    print(f\"\\n=== {label} ===\")\n    print(f\"Status Code: {response.status_code}\")\n    try:\n        print(f\"Response JSON: {json.dumps(response.json(), indent=2)}\")",
        "detail": "server.test_api_endpoints",
        "documentation": {}
    }
]
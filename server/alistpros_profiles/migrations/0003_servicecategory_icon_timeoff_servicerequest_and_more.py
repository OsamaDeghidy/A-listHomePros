# Generated by Django 4.2.7 on 2025-06-05 12:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('alistpros_profiles', '0002_alter_alisthomeproreview_options_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='servicecategory',
            name='icon',
            field=models.CharField(blank=True, help_text='Icon class name', max_length=50),
        ),
        migrations.CreateModel(
            name='TimeOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_off', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('urgency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('emergency', 'Emergency')], default='medium', max_length=20)),
                ('preferred_date', models.DateTimeField(blank=True, null=True)),
                ('flexible_schedule', models.BooleanField(default=True)),
                ('budget_min', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('budget_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('quoted', 'Quoted'), ('accepted', 'Accepted'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this request is visible to all professionals')),
                ('images', models.JSONField(blank=True, default=list, help_text='List of image URLs')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
                ('professional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
                ('service_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to='core.address')),
                ('service_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='alistpros_profiles.servicecategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('estimated_duration', models.CharField(help_text='e.g., 2-3 hours, 1 day', max_length=100)),
                ('start_date', models.DateTimeField()),
                ('completion_date', models.DateTimeField()),
                ('terms_and_conditions', models.TextField(blank=True)),
                ('materials_included', models.BooleanField(default=True)),
                ('warranty_period', models.CharField(blank=True, help_text='e.g., 1 year', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('client_message', models.TextField(blank=True)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotes_sent', to=settings.AUTH_USER_MODEL)),
                ('service_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to='alistpros_profiles.servicerequest')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('service_request', 'professional')},
            },
        ),
        migrations.CreateModel(
            name='ProfessionalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_name', models.CharField(blank=True, max_length=255, null=True)),
                ('profession', models.CharField(help_text='Primary profession/specialization', max_length=200)),
                ('bio', models.TextField(blank=True, help_text='Professional biography')),
                ('years_of_experience', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('service_radius', models.PositiveIntegerField(default=50, help_text='Service radius in miles')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('license_number', models.CharField(blank=True, help_text='Professional license number', max_length=100)),
                ('license_type', models.CharField(blank=True, help_text='Type of license', max_length=100)),
                ('license_expiry', models.DateField(blank=True, null=True)),
                ('insurance_info', models.CharField(blank=True, max_length=255)),
                ('certifications', models.TextField(blank=True, help_text='Professional certifications')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='professional_profiles/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='professional_covers/')),
                ('website', models.URLField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_onboarded', models.BooleanField(default=False)),
                ('total_jobs', models.PositiveIntegerField(default=0)),
                ('jobs_completed', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('response_time_hours', models.PositiveIntegerField(default=24, help_text='Average response time in hours')),
                ('address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='professional', to='core.address')),
                ('service_categories', models.ManyToManyField(blank=True, related_name='professionals', to='alistpros_profiles.servicecategory')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professional_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-average_rating', '-total_jobs'],
            },
        ),
        migrations.CreateModel(
            name='JobAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='assigned', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('actual_completion_date', models.DateTimeField(blank=True, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(default='pending', max_length=20)),
                ('use_escrow', models.BooleanField(default=False)),
                ('progress_notes', models.TextField(blank=True)),
                ('completion_photos', models.JSONField(blank=True, default=list)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hired_jobs', to=settings.AUTH_USER_MODEL)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_assignments', to=settings.AUTH_USER_MODEL)),
                ('quote', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to='alistpros_profiles.servicequote')),
                ('service_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to='alistpros_profiles.servicerequest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('overall_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('punctuality_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('comment', models.TextField()),
                ('professional_response', models.TextField(blank=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('photos', models.JSONField(blank=True, default=list)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professional_reviews_given', to=settings.AUTH_USER_MODEL)),
                ('job_assignment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='alistpros_profiles.jobassignment')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('professional', 'client', 'job_assignment')},
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_schedule', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['weekday', 'start_time'],
                'unique_together': {('professional', 'weekday', 'start_time')},
            },
        ),
    ]
